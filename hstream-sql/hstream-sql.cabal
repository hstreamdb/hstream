cabal-version:      2.2
name:               hstream-sql
version:            0.1.0.0
synopsis:           High performance stream processing platform for IoT data written in Haskell.
description:        Please see the README on Github at
                    <https://github.com/hstream-io/hstream#readme>
license:            BSD-3-Clause
license-file:       LICENSE
copyright:          Copyright (c) 2020 EMQ Technologies Co., Ltd.
author:             Feng Lee <feng@emqx.io>
maintainer:         maosics@gmail.com
tested-with:        GHC == 8.10.4, GHC == 8.8.4
category:           Language
homepage:           https://github.com/hstream-io/hstream
bug-reports:        https://github.com/hstream-io/hstream/issues
build-type:         Simple
extra-source-files: ChangeLog.md
                    README.md

source-repository head
  type:     git
  location: https://github.com/hstreamdb/hstream

library
  exposed-modules:  HStream.SQL
                    HStream.SQL.AST
                    HStream.SQL.Abs
                    HStream.SQL.Exception
                    HStream.SQL.Parse
                    HStream.SQL.Codegen
  other-modules:    HStream.SQL.ErrM
                    HStream.SQL.Extra
                    HStream.SQL.Lex
                    HStream.SQL.Par
                    HStream.SQL.Preprocess
                    HStream.SQL.Print
                    HStream.SQL.Validate
                    HStream.SQL.Validate.Utils
                    HStream.SQL.Codegen.Boilerplate
                    HStream.SQL.Codegen.Utils
  hs-source-dirs:   src
  build-depends:    base       >= 4.11 && < 5
                  , aeson
                  , array
                  , binary
                  , bytestring ^>= 0.10
                  , extra
                  , text       ^>= 1.2
                  , time       >= 1.9.1 && < 2
                  , scientific
                  , string-random
                  , hstream-store
                  , hstream-processing
                  , rio
                  , unordered-containers
  default-language: Haskell2010
  ghc-options:      -Wall -Wcompat -Widentities -Wincomplete-record-updates
                    -Wincomplete-uni-patterns -Wpartial-fields -Wredundant-constraints

executable sql-example-mock
  main-is:          Example.hs
  hs-source-dirs:   sql-example-mock
  build-depends:    base
                  , aeson
                  , hstream-processing
                  , hstream-sql
                  , random
                  , rio
                  , scientific
                  , text
                  , unordered-containers
  default-language: Haskell2010
  ghc-options:      -Wall -Wcompat -Widentities -Wincomplete-record-updates -threaded
                    -Wincomplete-uni-patterns -Wpartial-fields -Wredundant-constraints

executable sql-example-logdevice
  main-is:          Example.hs
  hs-source-dirs:   sql-example-logdevice
  build-depends:    base
                  , aeson
                  , hstream-processing
                  , hstream-sql
                  , hstream-store
                  , random
                  , rio
                  , scientific
                  , text
                  , unordered-containers
                  , Z-Data
  default-language: Haskell2010
  ghc-options:      -Wall -Wcompat -Widentities -Wincomplete-record-updates -threaded
                    -Wincomplete-uni-patterns -Wpartial-fields -Wredundant-constraints