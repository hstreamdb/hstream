-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE DeriveTraversable #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
{-# LANGUAGE LambdaCase #-}
{-# LANGUAGE PatternSynonyms #-}
{-# LANGUAGE OverloadedStrings #-}

-- | The abstract syntax of language SQL.

module HStream.SQL.Abs where

import Prelude (Double, Integer, String)
import qualified Prelude as C
  ( Eq, Ord, Show, Read
  , Functor, Foldable, Traversable
  , Int, Maybe(..)
  )
import qualified Data.String

import qualified Data.Text

type PNInteger = PNInteger' BNFC'Position
data PNInteger' a
    = PInteger a Integer | IPInteger a Integer | NInteger a Integer
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type PNDouble = PNDouble' BNFC'Position
data PNDouble' a
    = PDouble a Double | IPDouble a Double | NDouble a Double
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type SQL = SQL' BNFC'Position
data SQL' a
    = QSelect a (Select' a)
    | QCreate a (Create' a)
    | QInsert a (Insert' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Create = Create' BNFC'Position
data Create' a
    = DCreate a Ident [StreamOption' a]
    | CreateAs a Ident (Select' a) [StreamOption' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type StreamOption = StreamOption' BNFC'Position
data StreamOption' a
    = OptionFormat a String | OptionRepFactor a (PNInteger' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Insert = Insert' BNFC'Position
data Insert' a = DInsert a Ident [Ident] [ValueExpr' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Select = Select' BNFC'Position
data Select' a
    = DSelect a (Sel' a) (From' a) (Where' a) (GroupBy' a) (Having' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Sel = Sel' BNFC'Position
data Sel' a = DSel a (SelList' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type SelList = SelList' BNFC'Position
data SelList' a
    = SelListAsterisk a | SelListSublist a [DerivedCol' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type DerivedCol = DerivedCol' BNFC'Position
data DerivedCol' a
    = DerivedColSimpl a (ValueExpr' a)
    | DerivedColAs a (ValueExpr' a) Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type From = From' BNFC'Position
data From' a = DFrom a [TableRef' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type TableRef = TableRef' BNFC'Position
data TableRef' a
    = TableRefSimple a Ident
    | TableRefAs a (TableRef' a) Ident
    | TableRefJoin a (TableRef' a) (JoinType' a) (TableRef' a) (JoinWindow' a) (JoinCond' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type JoinType = JoinType' BNFC'Position
data JoinType' a = JoinInner a | JoinLeft a | JoinOuter a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type JoinWindow = JoinWindow' BNFC'Position
data JoinWindow' a = DJoinWindow a (Interval' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type JoinCond = JoinCond' BNFC'Position
data JoinCond' a = DJoinCond a (SearchCond' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Where = Where' BNFC'Position
data Where' a = DWhereEmpty a | DWhere a (SearchCond' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type GroupBy = GroupBy' BNFC'Position
data GroupBy' a = DGroupByEmpty a | DGroupBy a [GrpItem' a]
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type GrpItem = GrpItem' BNFC'Position
data GrpItem' a
    = GrpItemCol a (ColName' a) | GrpItemWin a (Window' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Window = Window' BNFC'Position
data Window' a
    = TumblingWindow a (Interval' a)
    | HoppingWindow a (Interval' a) (Interval' a)
    | SessionWindow a (Interval' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Having = Having' BNFC'Position
data Having' a = DHavingEmpty a | DHaving a (SearchCond' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type ValueExpr = ValueExpr' BNFC'Position
data ValueExpr' a
    = ExprOr a (ValueExpr' a) (ValueExpr' a)
    | ExprAnd a (ValueExpr' a) (ValueExpr' a)
    | ExprAdd a (ValueExpr' a) (ValueExpr' a)
    | ExprSub a (ValueExpr' a) (ValueExpr' a)
    | ExprMul a (ValueExpr' a) (ValueExpr' a)
    | ExprInt a (PNInteger' a)
    | ExprNum a (PNDouble' a)
    | ExprString a String
    | ExprBool a (Boolean' a)
    | ExprDate a (Date' a)
    | ExprTime a (Time' a)
    | ExprInterval a (Interval' a)
    | ExprArr a [ValueExpr' a]
    | ExprMap a [LabelledValueExpr' a]
    | ExprColName a (ColName' a)
    | ExprSetFunc a (SetFunc' a)
    | ExprScalarFunc a (ScalarFunc' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Boolean = Boolean' BNFC'Position
data Boolean' a = BoolTrue a | BoolFalse a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Date = Date' BNFC'Position
data Date' a = DDate a (PNInteger' a) (PNInteger' a) (PNInteger' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Time = Time' BNFC'Position
data Time' a = DTime a (PNInteger' a) (PNInteger' a) (PNInteger' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type TimeUnit = TimeUnit' BNFC'Position
data TimeUnit' a
    = TimeUnitYear a
    | TimeUnitMonth a
    | TimeUnitWeek a
    | TimeUnitDay a
    | TimeUnitMin a
    | TimeUnitSec a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type Interval = Interval' BNFC'Position
data Interval' a = DInterval a (PNInteger' a) (TimeUnit' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type LabelledValueExpr = LabelledValueExpr' BNFC'Position
data LabelledValueExpr' a
    = DLabelledValueExpr a Ident (ValueExpr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type ColName = ColName' BNFC'Position
data ColName' a
    = ColNameSimple a Ident
    | ColNameStream a Ident Ident
    | ColNameInner a (ColName' a) Ident
    | ColNameIndex a (ColName' a) (PNInteger' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type SetFunc = SetFunc' BNFC'Position
data SetFunc' a
    = SetFuncCountAll a
    | SetFuncCount a (ValueExpr' a)
    | SetFuncAvg a (ValueExpr' a)
    | SetFuncSum a (ValueExpr' a)
    | SetFuncMax a (ValueExpr' a)
    | SetFuncMin a (ValueExpr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type ScalarFunc = ScalarFunc' BNFC'Position
data ScalarFunc' a
    = ScalarFuncSin a (ValueExpr' a)
    | ScalarFuncSinh a (ValueExpr' a)
    | ScalarFuncAsin a (ValueExpr' a)
    | ScalarFuncAsinh a (ValueExpr' a)
    | ScalarFuncCos a (ValueExpr' a)
    | ScalarFuncCosh a (ValueExpr' a)
    | ScalarFuncAcos a (ValueExpr' a)
    | ScalarFuncAcosh a (ValueExpr' a)
    | ScalarFuncTan a (ValueExpr' a)
    | ScalarFuncTanh a (ValueExpr' a)
    | ScalarFuncAtan a (ValueExpr' a)
    | ScalarFuncAtanh a (ValueExpr' a)
    | ScalarFuncAbs a (ValueExpr' a)
    | ScalarFuncCeil a (ValueExpr' a)
    | ScalarFuncFloor a (ValueExpr' a)
    | ScalarFuncRound a (ValueExpr' a)
    | ScalarFuncSqrt a (ValueExpr' a)
    | ScalarFuncLog a (ValueExpr' a)
    | ScalarFuncLog2 a (ValueExpr' a)
    | ScalarFuncLog10 a (ValueExpr' a)
    | ScalarFuncExp a (ValueExpr' a)
    | ScalarFuncIsInt a (ValueExpr' a)
    | ScalarFuncIsFloat a (ValueExpr' a)
    | ScalarFuncIsNum a (ValueExpr' a)
    | ScalarFuncIsBool a (ValueExpr' a)
    | ScalarFuncIsStr a (ValueExpr' a)
    | ScalarFuncIsMap a (ValueExpr' a)
    | ScalarFuncIsArr a (ValueExpr' a)
    | ScalarFuncIsDate a (ValueExpr' a)
    | ScalarFuncIsTime a (ValueExpr' a)
    | ScalarFuncToStr a (ValueExpr' a)
    | ScalarFuncToLower a (ValueExpr' a)
    | ScalarFuncToUpper a (ValueExpr' a)
    | ScalarFuncTrim a (ValueExpr' a)
    | ScalarFuncLTrim a (ValueExpr' a)
    | ScalarFuncRTrim a (ValueExpr' a)
    | ScalarFuncRev a (ValueExpr' a)
    | ScalarFuncStrlen a (ValueExpr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type SearchCond = SearchCond' BNFC'Position
data SearchCond' a
    = CondOr a (SearchCond' a) (SearchCond' a)
    | CondAnd a (SearchCond' a) (SearchCond' a)
    | CondNot a (SearchCond' a)
    | CondOp a (ValueExpr' a) (CompOp' a) (ValueExpr' a)
    | CondBetween a (ValueExpr' a) (ValueExpr' a) (ValueExpr' a)
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

type CompOp = CompOp' BNFC'Position
data CompOp' a
    = CompOpEQ a
    | CompOpNE a
    | CompOpLT a
    | CompOpGT a
    | CompOpLEQ a
    | CompOpGEQ a
  deriving (C.Eq, C.Ord, C.Show, C.Read, C.Functor, C.Foldable, C.Traversable)

newtype Ident = Ident Data.Text.Text
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

-- | Start position (line, column) of something.

type BNFC'Position = C.Maybe (C.Int, C.Int)

pattern BNFC'NoPosition :: BNFC'Position
pattern BNFC'NoPosition = C.Nothing

pattern BNFC'Position :: C.Int -> C.Int -> BNFC'Position
pattern BNFC'Position line col = C.Just (line, col)

-- | Get the start position of something.

class HasPosition a where
  hasPosition :: a -> BNFC'Position

instance HasPosition PNInteger where
  hasPosition = \case
    PInteger p _ -> p
    IPInteger p _ -> p
    NInteger p _ -> p

instance HasPosition PNDouble where
  hasPosition = \case
    PDouble p _ -> p
    IPDouble p _ -> p
    NDouble p _ -> p

instance HasPosition SQL where
  hasPosition = \case
    QSelect p _ -> p
    QCreate p _ -> p
    QInsert p _ -> p

instance HasPosition Create where
  hasPosition = \case
    DCreate p _ _ -> p
    CreateAs p _ _ _ -> p

instance HasPosition StreamOption where
  hasPosition = \case
    OptionFormat p _ -> p
    OptionRepFactor p _ -> p

instance HasPosition Insert where
  hasPosition = \case
    DInsert p _ _ _ -> p

instance HasPosition Select where
  hasPosition = \case
    DSelect p _ _ _ _ _ -> p

instance HasPosition Sel where
  hasPosition = \case
    DSel p _ -> p

instance HasPosition SelList where
  hasPosition = \case
    SelListAsterisk p -> p
    SelListSublist p _ -> p

instance HasPosition DerivedCol where
  hasPosition = \case
    DerivedColSimpl p _ -> p
    DerivedColAs p _ _ -> p

instance HasPosition From where
  hasPosition = \case
    DFrom p _ -> p

instance HasPosition TableRef where
  hasPosition = \case
    TableRefSimple p _ -> p
    TableRefAs p _ _ -> p
    TableRefJoin p _ _ _ _ _ -> p

instance HasPosition JoinType where
  hasPosition = \case
    JoinInner p -> p
    JoinLeft p -> p
    JoinOuter p -> p

instance HasPosition JoinWindow where
  hasPosition = \case
    DJoinWindow p _ -> p

instance HasPosition JoinCond where
  hasPosition = \case
    DJoinCond p _ -> p

instance HasPosition Where where
  hasPosition = \case
    DWhereEmpty p -> p
    DWhere p _ -> p

instance HasPosition GroupBy where
  hasPosition = \case
    DGroupByEmpty p -> p
    DGroupBy p _ -> p

instance HasPosition GrpItem where
  hasPosition = \case
    GrpItemCol p _ -> p
    GrpItemWin p _ -> p

instance HasPosition Window where
  hasPosition = \case
    TumblingWindow p _ -> p
    HoppingWindow p _ _ -> p
    SessionWindow p _ -> p

instance HasPosition Having where
  hasPosition = \case
    DHavingEmpty p -> p
    DHaving p _ -> p

instance HasPosition ValueExpr where
  hasPosition = \case
    ExprOr p _ _ -> p
    ExprAnd p _ _ -> p
    ExprAdd p _ _ -> p
    ExprSub p _ _ -> p
    ExprMul p _ _ -> p
    ExprInt p _ -> p
    ExprNum p _ -> p
    ExprString p _ -> p
    ExprBool p _ -> p
    ExprDate p _ -> p
    ExprTime p _ -> p
    ExprInterval p _ -> p
    ExprArr p _ -> p
    ExprMap p _ -> p
    ExprColName p _ -> p
    ExprSetFunc p _ -> p
    ExprScalarFunc p _ -> p

instance HasPosition Boolean where
  hasPosition = \case
    BoolTrue p -> p
    BoolFalse p -> p

instance HasPosition Date where
  hasPosition = \case
    DDate p _ _ _ -> p

instance HasPosition Time where
  hasPosition = \case
    DTime p _ _ _ -> p

instance HasPosition TimeUnit where
  hasPosition = \case
    TimeUnitYear p -> p
    TimeUnitMonth p -> p
    TimeUnitWeek p -> p
    TimeUnitDay p -> p
    TimeUnitMin p -> p
    TimeUnitSec p -> p

instance HasPosition Interval where
  hasPosition = \case
    DInterval p _ _ -> p

instance HasPosition LabelledValueExpr where
  hasPosition = \case
    DLabelledValueExpr p _ _ -> p

instance HasPosition ColName where
  hasPosition = \case
    ColNameSimple p _ -> p
    ColNameStream p _ _ -> p
    ColNameInner p _ _ -> p
    ColNameIndex p _ _ -> p

instance HasPosition SetFunc where
  hasPosition = \case
    SetFuncCountAll p -> p
    SetFuncCount p _ -> p
    SetFuncAvg p _ -> p
    SetFuncSum p _ -> p
    SetFuncMax p _ -> p
    SetFuncMin p _ -> p

instance HasPosition ScalarFunc where
  hasPosition = \case
    ScalarFuncSin p _ -> p
    ScalarFuncSinh p _ -> p
    ScalarFuncAsin p _ -> p
    ScalarFuncAsinh p _ -> p
    ScalarFuncCos p _ -> p
    ScalarFuncCosh p _ -> p
    ScalarFuncAcos p _ -> p
    ScalarFuncAcosh p _ -> p
    ScalarFuncTan p _ -> p
    ScalarFuncTanh p _ -> p
    ScalarFuncAtan p _ -> p
    ScalarFuncAtanh p _ -> p
    ScalarFuncAbs p _ -> p
    ScalarFuncCeil p _ -> p
    ScalarFuncFloor p _ -> p
    ScalarFuncRound p _ -> p
    ScalarFuncSqrt p _ -> p
    ScalarFuncLog p _ -> p
    ScalarFuncLog2 p _ -> p
    ScalarFuncLog10 p _ -> p
    ScalarFuncExp p _ -> p
    ScalarFuncIsInt p _ -> p
    ScalarFuncIsFloat p _ -> p
    ScalarFuncIsNum p _ -> p
    ScalarFuncIsBool p _ -> p
    ScalarFuncIsStr p _ -> p
    ScalarFuncIsMap p _ -> p
    ScalarFuncIsArr p _ -> p
    ScalarFuncIsDate p _ -> p
    ScalarFuncIsTime p _ -> p
    ScalarFuncToStr p _ -> p
    ScalarFuncToLower p _ -> p
    ScalarFuncToUpper p _ -> p
    ScalarFuncTrim p _ -> p
    ScalarFuncLTrim p _ -> p
    ScalarFuncRTrim p _ -> p
    ScalarFuncRev p _ -> p
    ScalarFuncStrlen p _ -> p

instance HasPosition SearchCond where
  hasPosition = \case
    CondOr p _ _ -> p
    CondAnd p _ _ -> p
    CondNot p _ -> p
    CondOp p _ _ _ -> p
    CondBetween p _ _ _ -> p

instance HasPosition CompOp where
  hasPosition = \case
    CompOpEQ p -> p
    CompOpNE p -> p
    CompOpLT p -> p
    CompOpGT p -> p
    CompOpLEQ p -> p
    CompOpGEQ p -> p

