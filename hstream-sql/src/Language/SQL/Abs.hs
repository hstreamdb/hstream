-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module Language.SQL.Abs where

newtype Ident = Ident String
  deriving (Eq, Ord, Show, Read)

data SQL = QSelect Select | QCreate Create | QInsert Insert
  deriving (Eq, Ord, Show, Read)

data Create
    = DCreate Ident [SchemaElem] [StreamOption] | CreateAs Ident Select
  deriving (Eq, Ord, Show, Read)

data SchemaElem = DSchemaElem Ident DataType
  deriving (Eq, Ord, Show, Read)

data DataType
    = TypeInt
    | TypeNum
    | TypeString
    | TypeDateTime
    | TypeInterval
    | TypeArr
    | TypeMap
  deriving (Eq, Ord, Show, Read)

data StreamOption
    = OptionSource String | OptionFormat String | OptionSink String
  deriving (Eq, Ord, Show, Read)

data Insert
    = DInsert Ident [ValueExpr]
    | IndertWithSchema Ident [Ident] [ValueExpr]
  deriving (Eq, Ord, Show, Read)

data Select = DSelect Sel From Where GroupBy Having
  deriving (Eq, Ord, Show, Read)

data Sel = DSel SelList
  deriving (Eq, Ord, Show, Read)

data SelList = SelListAsterisk | SelListSublist [DerivedCol]
  deriving (Eq, Ord, Show, Read)

data DerivedCol
    = DerivedColSimpl ValueExpr | DerivedColAs ValueExpr Ident
  deriving (Eq, Ord, Show, Read)

data From = DFrom [TableRef]
  deriving (Eq, Ord, Show, Read)

data TableRef
    = TableRefSimple Ident
    | TableRefAs TableRef Ident
    | TableRefJoin TableRef JoinType TableRef JoinWindow JoinCond
  deriving (Eq, Ord, Show, Read)

data JoinType = JoinLeft | JoinRight | JoinFull | JoinCross
  deriving (Eq, Ord, Show, Read)

data JoinWindow = DJoinWindow Interval
  deriving (Eq, Ord, Show, Read)

data JoinCond = DJoinCond SearchCond
  deriving (Eq, Ord, Show, Read)

data Where = DWhereEmpty | DWhere SearchCond
  deriving (Eq, Ord, Show, Read)

data GroupBy = DGroupByEmpty | DGroupBy [GrpItem]
  deriving (Eq, Ord, Show, Read)

data GrpItem = GrpItemCol ColName | GrpItemWin Window
  deriving (Eq, Ord, Show, Read)

data Window
    = TumblingWindow Interval
    | HoppingWindow Interval Interval
    | SessionWindow Interval Interval
  deriving (Eq, Ord, Show, Read)

data Having = DHavingEmpty | DHaving SearchCond
  deriving (Eq, Ord, Show, Read)

data ValueExpr
    = ExprAdd ValueExpr ValueExpr
    | ExprSub ValueExpr ValueExpr
    | ExprMul ValueExpr ValueExpr
    | ExprDiv ValueExpr ValueExpr
    | ExprInt Integer
    | ExprNum Double
    | ExprString String
    | ExprDate Date
    | ExprTime Time
    | ExprInterval Interval
    | ExprArr [ValueExpr]
    | ExprMap [LabelledValueExpr]
    | ExprColName ColName
    | ExprSetFunc SetFunc
  deriving (Eq, Ord, Show, Read)

data Date = DDate Integer Integer Integer
  deriving (Eq, Ord, Show, Read)

data Time = DTime Integer Integer Integer
  deriving (Eq, Ord, Show, Read)

data TimeUnit
    = TimeUnitYear
    | TimeUnitMonth
    | TimeUnitWeek
    | TimeUnitDay
    | TimeUnitMin
    | TimeUnitSec
  deriving (Eq, Ord, Show, Read)

data Interval = DInterval Integer TimeUnit
  deriving (Eq, Show, Read)

intervalToSec :: Interval -> Integer
intervalToSec (DInterval n TimeUnitYear)  = n * 365 * 24 * 60 * 60
intervalToSec (DInterval n TimeUnitMonth) = n * 30 * 24 * 60 * 60
intervalToSec (DInterval n TimeUnitWeek)  = n * 7 * 24 * 60 * 60
intervalToSec (DInterval n TimeUnitDay)   = n * 24 * 60 * 60
intervalToSec (DInterval n TimeUnitMin)   = n * 60
intervalToSec (DInterval n TimeUnitSec)   = n

instance Ord Interval where
  compare i1 i2 = compare (intervalToSec i1) (intervalToSec i2)

data LabelledValueExpr = DLabelledValueExpr Ident ValueExpr
  deriving (Eq, Ord, Show, Read)

data ColName
    = ColNameSimple Ident
    | ColNameStream Ident Ident
    | ColNameInner ColName Ident
    | ColNameIndex ColName Integer
  deriving (Eq, Ord, Show, Read)

data SetFunc
    = SetFuncCountAll
    | SetFuncCount ValueExpr
    | SetFuncAvg ValueExpr
    | SetFuncSum ValueExpr
    | SetFuncMax ValueExpr
    | SetFuncMin ValueExpr
  deriving (Eq, Ord, Show, Read)

data SearchCond
    = CondOr SearchCond SearchCond
    | CondAnd SearchCond SearchCond
    | CondNot SearchCond
    | CondOp ValueExpr CompOp ValueExpr
    | CondBetween ValueExpr ValueExpr ValueExpr
  deriving (Eq, Ord, Show, Read)

data CompOp
    = CompOpEQ | CompOpNE | CompOpLT | CompOpGT | CompOpLEQ | CompOpGEQ
  deriving (Eq, Ord, Show, Read)
