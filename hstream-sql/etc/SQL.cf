{-
Simple parser for a SQL-like language

Implemented queries:
- SELECT
- CREATE STREAM
- CREATE STREAM AS
- INSERT

It can parse the following file content:

```
SELECT * FROM temperatureSource EMIT CHANGES;

CREATE STREAM demoStream ;

CREATE STREAM demoSink AS SELECT SUM(source2.humidity) AS result FROM source2 INNER JOIN source1 WITHIN (INTERVAL 5 SECOND) ON (source2.temperature = source1.temperature) WHERE source2.humidity > 20 GROUP BY source2.humidity, TUMBLING (INTERVAL 10 SECOND) EMIT CHANGES WITH (FORMAT = "JSON");

INSERT INTO demoStream (temperature, humidity) VALUES (30, 75);
-}

--------------------------------------------------------------------------------

PInteger.  PNInteger ::= "+" Integer ;
IPInteger. PNInteger ::=     Integer ;
NInteger.  PNInteger ::= "-" Integer ;

PDouble.  PNDouble ::= "+" Double ;
IPDouble. PNDouble ::=     Double ;
NDouble.  PNDouble ::= "-" Double ;

token SString '\'' char+ '\'' ;
--------------------------------------------------------------------------------

comment "//" ;
comment "/*" "*/" ;

entrypoints SQL ;

QSelect. SQL ::= Select ";" ;
QCreate. SQL ::= Create ";" ;
QInsert. SQL ::= Insert ";" ;
QShow.   SQL ::= ShowQ  ";" ;
QDrop.   SQL ::= Drop   ";" ;
QTerminate. SQL ::= Terminate ";";

---- Create Query
DCreate.  Create ::= "CREATE" "STREAM" Ident ;
CreateOp. Create ::= "CREATE" "STREAM" Ident "WITH" "(" [StreamOption] ")" ;
separator StreamOption "," ;
CreateAs. Create ::= "CREATE" "STREAM" Ident "AS" Select ;
CreateAsOp. Create ::= "CREATE" "STREAM" Ident "AS" Select "WITH" "(" [StreamOption] ")" ;

-- OptionTopic.  StreamOption ::= "TOPIC"  "=" String ;
-- OptionFormat. StreamOption ::= "FORMAT" "=" String ;
OptionRepFactor. StreamOption ::= "REPLICATE" "=" PNInteger ;

CreateConnector. Create ::= "CREATE" "SOURCE" "|" "SINK" "CONNECTOR" Ident "WITH" "(" [ConnectorOption] ")" ;
CreateConnectorIf. Create ::= "CREATE" "SOURCE" "|" "SINK" "CONNECTOR" Ident "IF" "NOT" "EXIST" "WITH" "(" [ConnectorOption] ")" ;
separator ConnectorOption "," ;

CreateView. Create ::= "CREATE" "VIEW" Ident "AS" Select ;

PropertyAny. ConnectorOption ::= Ident "=" ValueExpr ;

---- Insert Query
DInsert. Insert ::= "INSERT" "INTO" Ident "(" [Ident] ")" "VALUES" "(" [ValueExpr] ")" ;
separator Ident "," ;
separator ValueExpr "," ;
InsertBinary. Insert ::= "INSERT" "INTO" Ident "VALUES" String ;
InsertJson.   Insert ::= "INSERT" "INTO" Ident "VALUES" SString ;

---- Show Query
DShow. ShowQ ::= "SHOW" ShowOption ;
ShowQueries. ShowOption ::= "QUERIES" ;
ShowStreams. ShowOption ::= "STREAMS" ;
ShowConnectors. ShowOption ::= "CONNECTORS" ;
ShowViews. ShowOption ::= "VIEWS" ;

--- Drop Query
DDrop.  Drop ::= "DROP" DropOption Ident ;
DropIf. Drop ::= "DROP" DropOption "IF" "EXISTS" Ident ;

DropStream. DropOption ::= "STREAM";
DropView. DropOption ::= "VIEW";

-- Terminate Query
TerminateQuery. Terminate ::= "TERMINATE" "QUERY" String ;
TerminateAll. Terminate ::= "TERMINATE" "ALL";

---- Select Query
DSelect. Select ::= Sel From Where GroupBy Having "EMIT" "CHANGES" ;

-- Sel
DSel. Sel ::= "SELECT" SelList ;
SelListAsterisk. SelList ::= "*" ;
SelListSublist.  SelList ::= [DerivedCol] ;
separator DerivedCol "," ;

DerivedColSimpl. DerivedCol ::= ValueExpr ;
DerivedColAs.    DerivedCol ::= ValueExpr "AS" Ident ;

-- From
DFrom. From ::= "FROM" [TableRef] ;
separator TableRef "," ;

TableRefSimple. TableRef ::= Ident ;
TableRefAs.     TableRef ::= TableRef "AS" Ident ;
TableRefJoin.   TableRef ::= TableRef JoinType "JOIN" TableRef JoinWindow JoinCond ;

JoinInner.  JoinType ::= "INNER" ;
JoinLeft.   JoinType ::= "LEFT" ;
JoinOuter.  JoinType ::= "OUTER" ;

DJoinWindow. JoinWindow ::= "WITHIN" "(" Interval ")" ;
DJoinCond. JoinCond ::= "ON" SearchCond ;

-- Where
DWhereEmpty. Where ::= "" ;
DWhere.     Where ::= "WHERE" SearchCond ;

-- GroupBy
DGroupByEmpty. GroupBy ::= "" ;
DGroupBy.      GroupBy ::= "GROUP" "BY" [GrpItem] ;
separator GrpItem "," ;

GrpItemCol. GrpItem ::= ColName ;
GrpItemWin. GrpItem ::= Window ;

TumblingWindow. Window ::= "TUMBLING" "(" Interval ")" ;
HoppingWindow.  Window ::= "HOPPING"  "(" Interval "," Interval ")" ;
SessionWindow.  Window ::= "SESSION"  "(" Interval ")" ;

-- Having
DHavingEmpty. Having ::= "" ;
DHaving.      Having ::= "HAVING" SearchCond ;

--------------------------------------------------------------------------------

---- Value Expression
-- Boolean Expr
ExprOr.  ValueExpr  ::= ValueExpr  "||" ValueExpr1 ;
ExprAnd. ValueExpr1 ::= ValueExpr1 "&&" ValueExpr2 ;

-- Arith Expr
ExprAdd. ValueExpr2 ::= ValueExpr2 "+" ValueExpr3 ;
ExprSub. ValueExpr2 ::= ValueExpr2 "-" ValueExpr3 ;
ExprMul. ValueExpr3 ::= ValueExpr3 "*" ValueExpr4 ;

-- Scalar Numeric Type
ExprInt. ValueExpr4 ::= PNInteger ;
ExprNum. ValueExpr4 ::= PNDouble  ;

-- Plain String
ExprString. ValueExpr4 ::= String ;

-- Boolean Type
BoolTrue.  Boolean ::= "TRUE"  ;
BoolFalse. Boolean ::= "FALSE" ;
ExprBool. ValueExpr4 ::= Boolean ;

-- Date, Time and Interval
DDate. Date ::= "DATE" PNInteger "-" PNInteger "-" PNInteger ;
DTime. Time ::= "TIME" PNInteger ":" PNInteger ":" PNInteger ;
ExprDate. ValueExpr4 ::= Date ;
ExprTime. ValueExpr4 ::= Time ;

TimeUnitYear.  TimeUnit ::= "YEAR"   ;
TimeUnitMonth. TimeUnit ::= "MONTH"  ;
TimeUnitWeek.  TimeUnit ::= "WEEK"   ;
TimeUnitDay.   TimeUnit ::= "DAY"    ;
TimeUnitMin.   TimeUnit ::= "MINUTE" ;
TimeUnitSec.   TimeUnit ::= "SECOND" ;

DInterval. Interval ::= "INTERVAL" PNInteger TimeUnit ;
ExprInterval. ValueExpr4 ::= Interval ;

-- Non-Scalar Type (Array and Map)
ExprArr. ValueExpr ::= "[" [ValueExpr] "]" ;
ExprMap. ValueExpr ::= "{" [LabelledValueExpr] "}" ;
separator LabelledValueExpr "," ;

DLabelledValueExpr. LabelledValueExpr ::= Ident ":" ValueExpr ;

-- Column Name
ColNameSimple. ColName ::= Ident ;
ColNameStream. ColName ::= Ident "." Ident ;
ColNameInner.  ColName ::= ColName "[" Ident "]" ;
ColNameIndex.  ColName ::= ColName "[" PNInteger "]" ;
ExprColName. ValueExpr4 ::= ColName ;

-- Set Functions
SetFuncCountAll. SetFunc ::= "COUNT(*)" ;
SetFuncCount.    SetFunc ::= "COUNT" "(" ValueExpr ")" ;
SetFuncAvg.      SetFunc ::= "AVG"   "(" ValueExpr ")" ;
SetFuncSum.      SetFunc ::= "SUM"   "(" ValueExpr ")" ;
SetFuncMax.      SetFunc ::= "MAX"   "(" ValueExpr ")" ;
SetFuncMin.      SetFunc ::= "MIN"   "(" ValueExpr ")" ;
ExprSetFunc. ValueExpr4 ::= SetFunc ;

-- Scalar Functions
ScalarFuncSin.   ScalarFunc ::= "SIN"   "(" ValueExpr ")" ;
ScalarFuncSinh.  ScalarFunc ::= "SINH"  "(" ValueExpr ")" ;
ScalarFuncAsin.  ScalarFunc ::= "ASIN"  "(" ValueExpr ")" ;
ScalarFuncAsinh. ScalarFunc ::= "ASINH" "(" ValueExpr ")" ;
ScalarFuncCos.   ScalarFunc ::= "COS"   "(" ValueExpr ")" ;
ScalarFuncCosh.  ScalarFunc ::= "COSH"  "(" ValueExpr ")" ;
ScalarFuncAcos.  ScalarFunc ::= "ACOS"  "(" ValueExpr ")" ;
ScalarFuncAcosh. ScalarFunc ::= "ACOSH" "(" ValueExpr ")" ;
ScalarFuncTan.   ScalarFunc ::= "TAN"   "(" ValueExpr ")" ;
ScalarFuncTanh.  ScalarFunc ::= "TANH"  "(" ValueExpr ")" ;
ScalarFuncAtan.  ScalarFunc ::= "ATAN"  "(" ValueExpr ")" ;
ScalarFuncAtanh. ScalarFunc ::= "ATANH" "(" ValueExpr ")" ;

ScalarFuncAbs.   ScalarFunc ::= "ABS"   "(" ValueExpr ")" ;
ScalarFuncCeil.  ScalarFunc ::= "CEIL"  "(" ValueExpr ")" ;
ScalarFuncFloor. ScalarFunc ::= "FLOOR" "(" ValueExpr ")" ;
ScalarFuncRound. ScalarFunc ::= "ROUND" "(" ValueExpr ")" ;

ScalarFuncSqrt.  ScalarFunc ::= "SQRT"  "(" ValueExpr ")" ;
ScalarFuncLog.   ScalarFunc ::= "LOG"   "(" ValueExpr ")" ;
ScalarFuncLog2.  ScalarFunc ::= "LOG2"  "(" ValueExpr ")" ;
ScalarFuncLog10. ScalarFunc ::= "LOG10" "(" ValueExpr ")" ;
ScalarFuncExp.   ScalarFunc ::= "EXP"   "(" ValueExpr ")" ;

ScalarFuncIsInt.   ScalarFunc ::= "IS_INT"   "(" ValueExpr ")" ;
ScalarFuncIsFloat. ScalarFunc ::= "IS_FLOAT" "(" ValueExpr ")" ;
ScalarFuncIsNum.   ScalarFunc ::= "IS_NUM"   "(" ValueExpr ")" ;
ScalarFuncIsBool.  ScalarFunc ::= "IS_BOOL"  "(" ValueExpr ")" ;
ScalarFuncIsStr.   ScalarFunc ::= "IS_STR"   "(" ValueExpr ")" ;
ScalarFuncIsMap.   ScalarFunc ::= "IS_MAP"   "(" ValueExpr ")" ;
ScalarFuncIsArr.   ScalarFunc ::= "IS_ARRAY" "(" ValueExpr ")" ;
ScalarFuncIsDate.  ScalarFunc ::= "IS_DATE"  "(" ValueExpr ")" ;
ScalarFuncIsTime.  ScalarFunc ::= "IS_TIME"  "(" ValueExpr ")" ;

ScalarFuncToStr.  ScalarFunc ::= "TO_STR"  "(" ValueExpr ")" ;

ScalarFuncToLower. ScalarFunc ::= "TO_LOWER"   "(" ValueExpr ")" ;
ScalarFuncToUpper. ScalarFunc ::= "TO_UPPER"   "(" ValueExpr ")" ;
ScalarFuncTrim.    ScalarFunc ::= "TRIM"       "(" ValueExpr ")" ;
ScalarFuncLTrim.   ScalarFunc ::= "LEFT_TRIM"  "(" ValueExpr ")" ;
ScalarFuncRTrim.   ScalarFunc ::= "RIGHT_TRIM" "(" ValueExpr ")" ;
ScalarFuncRev.     ScalarFunc ::= "REVERSE"    "(" ValueExpr ")" ;
ScalarFuncStrlen.  ScalarFunc ::= "STRLEN"     "(" ValueExpr ")" ;

ExprScalarFunc. ValueExpr ::= ScalarFunc ;

coercions ValueExpr 4 ;


---- Search Condition
CondOr.  SearchCond  ::= SearchCond  "OR"  SearchCond1 ;
CondAnd. SearchCond1 ::= SearchCond1 "AND" SearchCond2 ;
CondNot. SearchCond2 ::= "NOT" SearchCond3 ;
CondOp.  SearchCond3 ::= ValueExpr CompOp ValueExpr ;
CondBetween. SearchCond3 ::= ValueExpr "BETWEEN" ValueExpr "AND" ValueExpr ;

coercions SearchCond 3 ;

CompOpEQ.  CompOp ::= "=" ;
CompOpNE.  CompOp ::= "<>" ;
CompOpLT.  CompOp ::= "<" ;
CompOpGT.  CompOp ::= ">" ;
CompOpLEQ. CompOp ::= "<=" ;
CompOpGEQ. CompOp ::= ">=" ;
