{-
Simple parser for a SQL-like language

Implemented queries:
- SELECT
- CREATE STREAM
- CREATE STREAM AS
- INSERT

It can parse the following file content:

```
SELECT * FROM temperatureSource EMIT CHANGES;

CREATE STREAM demoStream WITH (FORMAT = "JSON");

CREATE STREAM demoSink AS SELECT SUM(source2.humidity) AS result FROM source2 INNER JOIN source1 WITHIN (INTERVAL 5 SECOND) ON (source2.temperature = source1.temperature) WHERE source2.humidity > 20 GROUP BY source2.humidity, TUMBLING (INTERVAL 10 SECOND) EMIT CHANGES WITH (FORMAT = "JSON");

INSERT INTO demoStream (temperature, humidity) VALUES (30, 75);
-}

--------------------------------------------------------------------------------

comment "//" ;
comment "/*" "*/" ;

QSelect. SQL ::= Select ";" ;
QCreate. SQL ::= Create ";" ;
QInsert. SQL ::= Insert ";" ;

---- Create Query
DCreate.  Create ::= "CREATE" "STREAM" Ident "WITH" "(" [StreamOption] ")" ;
separator StreamOption "," ;
CreateAs. Create ::= "CREATE" "STREAM" Ident "AS" Select "WITH" "(" [StreamOption] ")" ;

-- OptionTopic.  StreamOption ::= "TOPIC"  "=" String ;
OptionFormat. StreamOption ::= "FORMAT" "=" String ;

---- Insert Query
DInsert. Insert ::= "INSERT" "INTO" Ident "(" [Ident] ")" "VALUES" "(" [ValueExpr] ")" ;
separator Ident "," ;
separator ValueExpr "," ;

---- Select Query
DSelect. Select ::= Sel From Where GroupBy Having "EMIT" "CHANGES" ;

-- Sel
DSel. Sel ::= "SELECT" SelList ;
SelListAsterisk. SelList ::= "*" ;
SelListSublist.  SelList ::= [DerivedCol] ;
separator DerivedCol "," ;

DerivedColSimpl. DerivedCol ::= ValueExpr ;
DerivedColAs.    DerivedCol ::= ValueExpr "AS" Ident ;

-- From
DFrom. From ::= "FROM" [TableRef] ;
separator TableRef "," ;

TableRefSimple. TableRef ::= Ident ;
TableRefAs.     TableRef ::= TableRef "AS" Ident ;
TableRefJoin.   TableRef ::= TableRef JoinType "JOIN" TableRef JoinWindow JoinCond ;

JoinInner.  JoinType ::= "INNER" ;
JoinLeft.   JoinType ::= "LEFT" ;
JoinOuter.  JoinType ::= "OUTER" ;

DJoinWindow. JoinWindow ::= "WITHIN" "(" Interval ")" ;
DJoinCond. JoinCond ::= "ON" SearchCond ;

-- Where
DWhereEmpty. Where ::= "" ;
DWhere.     Where ::= "WHERE" SearchCond ;

-- GroupBy
DGroupByEmpty. GroupBy ::= "" ;
DGroupBy.      GroupBy ::= "GROUP" "BY" [GrpItem] ;
separator GrpItem "," ;

GrpItemCol. GrpItem ::= ColName ;
GrpItemWin. GrpItem ::= Window ;

TumblingWindow. Window ::= "TUMBLING" "(" Interval ")" ;
HoppingWindow.  Window ::= "HOPPING"  "(" Interval "," Interval ")" ;
SessionWindow.  Window ::= "SESSION"  "(" Interval ")" ;

-- Having
DHavingEmpty. Having ::= "" ;
DHaving.      Having ::= "HAVING" SearchCond ;

--------------------------------------------------------------------------------

---- Value Expression
-- Arith Expr
ExprAdd. ValueExpr  ::= ValueExpr  "+" ValueExpr1 ;
ExprSub. ValueExpr  ::= ValueExpr  "-" ValueExpr1 ;
ExprMul. ValueExpr1 ::= ValueExpr1 "*" ValueExpr2 ;

-- Scalar Numeric Type
ExprInt. ValueExpr2 ::= Integer ;
ExprNum. ValueExpr2 ::= Double  ;

-- Plain String
ExprString. ValueExpr2 ::= String ;

-- Date, Time and Interval
DDate. Date ::= "DATE" Integer "-" Integer "-" Integer ;
DTime. Time ::= "TIME" Integer ":" Integer ":" Integer ;
ExprDate. ValueExpr2 ::= Date ;
ExprTime. ValueExpr2 ::= Time ;

TimeUnitYear.  TimeUnit ::= "YEAR"   ;
TimeUnitMonth. TimeUnit ::= "MONTH"  ;
TimeUnitWeek.  TimeUnit ::= "WEEK"   ;
TimeUnitDay.   TimeUnit ::= "DAY"    ;
TimeUnitMin.   TimeUnit ::= "MINUTE" ;
TimeUnitSec.   TimeUnit ::= "SECOND" ;

DInterval. Interval ::= "INTERVAL" Integer TimeUnit ;
ExprInterval. ValueExpr2 ::= Interval ;

-- Non-Scalar Type (Array and Map)
ExprArr. ValueExpr ::= "[" [ValueExpr] "]" ;
ExprMap. ValueExpr ::= "{" [LabelledValueExpr] "}" ;
separator LabelledValueExpr "," ;

DLabelledValueExpr. LabelledValueExpr ::= Ident ":" ValueExpr ;

-- Column Name
ColNameSimple. ColName ::= Ident ;
ColNameStream. ColName ::= Ident "." Ident ;
ColNameInner.  ColName ::= ColName "[" Ident "]" ;
ColNameIndex.  ColName ::= ColName "[" Integer "]" ;
ExprColName. ValueExpr2 ::= ColName ;

-- Set Functions
SetFuncCountAll. SetFunc ::= "COUNT(*)" ;
SetFuncCount.    SetFunc ::= "COUNT" "(" ValueExpr ")" ;
SetFuncAvg.      SetFunc ::= "AVG"   "(" ValueExpr ")" ;
SetFuncSum.      SetFunc ::= "SUM"   "(" ValueExpr ")" ;
SetFuncMax.      SetFunc ::= "MAX"   "(" ValueExpr ")" ;
SetFuncMin.      SetFunc ::= "MIN"   "(" ValueExpr ")" ;
ExprSetFunc. ValueExpr2 ::= SetFunc ;

coercions ValueExpr 2 ;


---- Search Condition
CondOr.  SearchCond  ::= SearchCond  "OR"  SearchCond1 ;
CondAnd. SearchCond1 ::= SearchCond1 "AND" SearchCond2 ;
CondNot. SearchCond2 ::= "NOT" SearchCond3 ;
CondOp.  SearchCond3 ::= ValueExpr CompOp ValueExpr ;
CondBetween. SearchCond3 ::= ValueExpr "BETWEEN" ValueExpr "AND" ValueExpr ;

coercions SearchCond 3 ;

CompOpEQ.  CompOp ::= "=" ;
CompOpNE.  CompOp ::= "<>" ;
CompOpLT.  CompOp ::= "<" ;
CompOpGT.  CompOp ::= ">" ;
CompOpLEQ. CompOp ::= "<=" ;
CompOpGEQ. CompOp ::= ">=" ;
