-- -*- haskell -*-
-- This Alex file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}
module HStream.SQL.Lex where

import Prelude

import qualified Data.Text
import qualified Data.Bits
import Data.Word (Word8)
import Data.Char (ord)
}


$c = [A-Z\192-\221] # [\215]  -- capital isolatin1 letter (215 = \times) FIXME
$s = [a-z\222-\255] # [\247]  -- small   isolatin1 letter (247 = \div  ) FIXME
$l = [$c $s]         -- letter
$d = [0-9]           -- digit
$i = [$l $d _ ']     -- identifier character
$u = [. \n]          -- universal: any character

@rsyms =    -- symbols and non-identifier-like reserved words
   \+ | \- | \; | \( | \) | \, | \= | \* | \| \| | \& \& | \: | \[ | \] | \{ | \} | \. | "COUNT" \( \* \) | \< \> | \< | \> | \< \= | \> \=

:-

-- Line comments
"//" [.]* ;

-- Block comments
\/ \* [$u # \*]* \* ([$u # [\* \/]] [$u # \*]* \* | \*)* \/ ;

$white+ ;
@rsyms
    { tok (\p s -> PT p (eitherResIdent TV s)) }
\' $u + \'
    { tok (\p s -> PT p (eitherResIdent T_SString s)) }

$l $i*
    { tok (\p s -> PT p (eitherResIdent TV s)) }
\" ([$u # [\" \\ \n]] | (\\ (\" | \\ | \' | n | t | r | f)))* \"
    { tok (\p s -> PT p (TL $ unescapeInitTail s)) }

$d+
    { tok (\p s -> PT p (TI s))    }
$d+ \. $d+ (e (\-)? $d+)?
    { tok (\p s -> PT p (TD s)) }

{

tok :: (Posn -> Data.Text.Text -> Token) -> (Posn -> Data.Text.Text -> Token)
tok f p s = f p s

data Tok =
   TS !Data.Text.Text !Int    -- reserved words and symbols
 | TL !Data.Text.Text         -- string literals
 | TI !Data.Text.Text         -- integer literals
 | TV !Data.Text.Text         -- identifiers
 | TD !Data.Text.Text         -- double precision float literals
 | TC !Data.Text.Text         -- character literals
 | T_SString !Data.Text.Text

 deriving (Eq,Show,Ord)

data Token =
   PT  Posn Tok
 | Err Posn
  deriving (Eq,Show,Ord)

printPosn :: Posn -> String
printPosn (Pn _ l c) = "line " ++ show l ++ ", column " ++ show c

tokenPos :: [Token] -> String
tokenPos (t:_) = printPosn (tokenPosn t)
tokenPos [] = "end of file"

tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p) = p

tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

mkPosToken :: Token -> ((Int, Int), Data.Text.Text)
mkPosToken t@(PT p _) = (posLineCol p, tokenText t)

tokenText :: Token -> Data.Text.Text
tokenText t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> Data.Text.pack (show s)
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  Err _         -> Data.Text.pack "#error"
  PT _ (T_SString s) -> s

prToken :: Token -> String
prToken t = Data.Text.unpack (tokenText t)

data BTree = N | B Data.Text.Text Tok BTree BTree deriving (Show)

eitherResIdent :: (Data.Text.Text -> Tok) -> Data.Text.Text -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) | (Data.Text.toUpper s) < (Data.Text.toUpper a) = treeFind left
                              | (Data.Text.toUpper s) > (Data.Text.toUpper a) = treeFind right
                              | (Data.Text.toUpper s) == (Data.Text.toUpper a) = t

resWords :: BTree
resWords = b "IS_FLOAT" 56 (b "BY" 28 (b "=" 14 (b "-" 7 (b "*" 4 (b "(" 2 (b "&&" 1 N N) (b ")" 3 N N)) (b "," 6 (b "+" 5 N N) N)) (b "<" 11 (b ":" 9 (b "." 8 N N) (b ";" 10 N N)) (b "<>" 13 (b "<=" 12 N N) N))) (b "AS" 21 (b "ACOS" 18 (b ">=" 16 (b ">" 15 N N) (b "ABS" 17 N N)) (b "AND" 20 (b "ACOSH" 19 N N) N)) (b "ATANH" 25 (b "ASINH" 23 (b "ASIN" 22 N N) (b "ATAN" 24 N N)) (b "BETWEEN" 27 (b "AVG" 26 N N) N)))) (b "FALSE" 42 (b "CREATE" 35 (b "COSH" 32 (b "CHANGES" 30 (b "CEIL" 29 N N) (b "COS" 31 N N)) (b "COUNT(*)" 34 (b "COUNT" 33 N N) N)) (b "EMIT" 39 (b "DAY" 37 (b "DATE" 36 N N) (b "DROP" 38 N N)) (b "EXP" 41 (b "EXIST" 40 N N) N))) (b "INNER" 49 (b "HAVING" 46 (b "FROM" 44 (b "FLOOR" 43 N N) (b "GROUP" 45 N N)) (b "IF" 48 (b "HOPPING" 47 N N) N)) (b "IS_ARRAY" 53 (b "INTERVAL" 51 (b "INSERT" 50 N N) (b "INTO" 52 N N)) (b "IS_DATE" 55 (b "IS_BOOL" 54 N N) N))))) (b "SHOW" 84 (b "MINUTE" 70 (b "LEFT" 63 (b "IS_STR" 60 (b "IS_MAP" 58 (b "IS_INT" 57 N N) (b "IS_NUM" 59 N N)) (b "JOIN" 62 (b "IS_TIME" 61 N N) N)) (b "LOG2" 67 (b "LOG" 65 (b "LEFT_TRIM" 64 N N) (b "LOG10" 66 N N)) (b "MIN" 69 (b "MAX" 68 N N) N))) (b "REPLICATE" 77 (b "OR" 74 (b "NOT" 72 (b "MONTH" 71 N N) (b "ON" 73 N N)) (b "QUERIES" 76 (b "OUTER" 75 N N) N)) (b "SECOND" 81 (b "RIGHT_TRIM" 79 (b "REVERSE" 78 N N) (b "ROUND" 80 N N)) (b "SESSION" 83 (b "SELECT" 82 N N) N)))) (b "TRIM" 98 (b "SUM" 91 (b "STREAM" 88 (b "SINH" 86 (b "SIN" 85 N N) (b "SQRT" 87 N N)) (b "STRLEN" 90 (b "STREAMS" 89 N N) N)) (b "TO_LOWER" 95 (b "TANH" 93 (b "TAN" 92 N N) (b "TIME" 94 N N)) (b "TO_UPPER" 97 (b "TO_STR" 96 N N) N))) (b "WITHIN" 105 (b "WEEK" 102 (b "TUMBLING" 100 (b "TRUE" 99 N N) (b "VALUES" 101 N N)) (b "WITH" 104 (b "WHERE" 103 N N) N)) (b "{" 109 (b "[" 107 (b "YEAR" 106 N N) (b "]" 108 N N)) (b "}" 111 (b "||" 110 N N) N)))))
   where b s n = let bs = Data.Text.pack s
                 in  B bs (TS bs n)

unescapeInitTail :: Data.Text.Text -> Data.Text.Text
unescapeInitTail = Data.Text.pack . unesc . tail . Data.Text.unpack
  where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '\\':'r':cs  -> '\r' : unesc cs
    '\\':'f':cs  -> '\f' : unesc cs
    '"':[]    -> []
    c:cs      -> c : unesc cs
    _         -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
      deriving (Eq, Show,Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  Data.Text.Text)   -- current input string

tokens :: Data.Text.Text -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (Data.Text.take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case Data.Text.uncons s of
    Nothing  -> Nothing
    Just (c,s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
 where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
