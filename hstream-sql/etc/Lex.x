-- -*- haskell -*-
-- This Alex file was machine-generated by the BNF converter
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}
module HStream.SQL.Lex where

import Prelude

import qualified Data.Text
import qualified Data.Bits
import Data.Word (Word8)
import Data.Char (ord)
}


$c = [A-Z\192-\221] # [\215]  -- capital isolatin1 letter (215 = \times) FIXME
$s = [a-z\222-\255] # [\247]  -- small   isolatin1 letter (247 = \div  ) FIXME
$l = [$c $s]         -- letter
$d = [0-9]           -- digit
$i = [$l $d _ ']     -- identifier character
$u = [. \n]          -- universal: any character

@rsyms =    -- symbols and non-identifier-like reserved words
   \+ | \- | \; | \( | \) | \, | \= | \* | \| \| | \& \& | \: | \[ | \] | \{ | \} | \. | "COUNT" \( \* \) | \< \> | \< | \> | \< \= | \> \=

:-

-- Line comments
"//" [.]* ;

-- Block comments
\/ \* [$u # \*]* \* ([$u # [\* \/]] [$u # \*]* \* | \*)* \/ ;

$white+ ;
@rsyms
    { tok (\p s -> PT p (eitherResIdent TV s)) }
\' $u + \'
    { tok (\p s -> PT p (eitherResIdent T_SString s)) }

$l $i*
    { tok (\p s -> PT p (eitherResIdent TV s)) }
\" ([$u # [\" \\ \n]] | (\\ (\" | \\ | \' | n | t | r | f)))* \"
    { tok (\p s -> PT p (TL $ unescapeInitTail s)) }

$d+
    { tok (\p s -> PT p (TI s))    }
$d+ \. $d+ (e (\-)? $d+)?
    { tok (\p s -> PT p (TD s)) }

{

tok :: (Posn -> Data.Text.Text -> Token) -> (Posn -> Data.Text.Text -> Token)
tok f p s = f p s

data Tok =
   TS !Data.Text.Text !Int    -- reserved words and symbols
 | TL !Data.Text.Text         -- string literals
 | TI !Data.Text.Text         -- integer literals
 | TV !Data.Text.Text         -- identifiers
 | TD !Data.Text.Text         -- double precision float literals
 | TC !Data.Text.Text         -- character literals
 | T_SString !Data.Text.Text

 deriving (Eq,Show,Ord)

data Token =
   PT  Posn Tok
 | Err Posn
  deriving (Eq,Show,Ord)

printPosn :: Posn -> String
printPosn (Pn _ l c) = "line " ++ show l ++ ", column " ++ show c

tokenPos :: [Token] -> String
tokenPos (t:_) = printPosn (tokenPosn t)
tokenPos [] = "end of file"

tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p) = p

tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

mkPosToken :: Token -> ((Int, Int), Data.Text.Text)
mkPosToken t@(PT p _) = (posLineCol p, tokenText t)

tokenText :: Token -> Data.Text.Text
tokenText t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> Data.Text.pack (show s)
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  Err _         -> Data.Text.pack "#error"
  PT _ (T_SString s) -> s

prToken :: Token -> String
prToken t = Data.Text.unpack (tokenText t)

data BTree = N | B Data.Text.Text Tok BTree BTree deriving (Show)

eitherResIdent :: (Data.Text.Text -> Tok) -> Data.Text.Text -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) | (Data.Text.toUpper s) < (Data.Text.toUpper a) = treeFind left
                              | (Data.Text.toUpper s) > (Data.Text.toUpper a) = treeFind right
                              | (Data.Text.toUpper s) == (Data.Text.toUpper a) = t

resWords :: BTree
resWords = b "IS_FLOAT" 57 (b "CEIL" 29 (b ">" 15 (b "." 8 (b "*" 4 (b "(" 2 (b "&&" 1 N N) (b ")" 3 N N)) (b "," 6 (b "+" 5 N N) (b "-" 7 N N))) (b "<=" 12 (b ";" 10 (b ":" 9 N N) (b "<" 11 N N)) (b "=" 14 (b "<>" 13 N N) N))) (b "ASIN" 22 (b "ACOSH" 19 (b "ABS" 17 (b ">=" 16 N N) (b "ACOS" 18 N N)) (b "AS" 21 (b "AND" 20 N N) N)) (b "AVG" 26 (b "ATAN" 24 (b "ASINH" 23 N N) (b "ATANH" 25 N N)) (b "BY" 28 (b "BETWEEN" 27 N N) N)))) (b "FLOOR" 43 (b "DATE" 36 (b "COUNT" 33 (b "COS" 31 (b "CHANGES" 30 N N) (b "COSH" 32 N N)) (b "CREATE" 35 (b "COUNT(*)" 34 N N) N)) (b "EXIST" 40 (b "DROP" 38 (b "DAY" 37 N N) (b "EMIT" 39 N N)) (b "FALSE" 42 (b "EXP" 41 N N) N))) (b "INNER" 50 (b "HAVING" 47 (b "FROM" 45 (b "FORMAT" 44 N N) (b "GROUP" 46 N N)) (b "IF" 49 (b "HOPPING" 48 N N) N)) (b "IS_ARRAY" 54 (b "INTERVAL" 52 (b "INSERT" 51 N N) (b "INTO" 53 N N)) (b "IS_DATE" 56 (b "IS_BOOL" 55 N N) N))))) (b "SHOW" 85 (b "MINUTE" 71 (b "LEFT" 64 (b "IS_STR" 61 (b "IS_MAP" 59 (b "IS_INT" 58 N N) (b "IS_NUM" 60 N N)) (b "JOIN" 63 (b "IS_TIME" 62 N N) N)) (b "LOG2" 68 (b "LOG" 66 (b "LEFT_TRIM" 65 N N) (b "LOG10" 67 N N)) (b "MIN" 70 (b "MAX" 69 N N) N))) (b "REPLICATE" 78 (b "OR" 75 (b "NOT" 73 (b "MONTH" 72 N N) (b "ON" 74 N N)) (b "QUERIES" 77 (b "OUTER" 76 N N) N)) (b "SECOND" 82 (b "RIGHT_TRIM" 80 (b "REVERSE" 79 N N) (b "ROUND" 81 N N)) (b "SESSION" 84 (b "SELECT" 83 N N) N)))) (b "TRIM" 99 (b "SUM" 92 (b "STREAM" 89 (b "SINH" 87 (b "SIN" 86 N N) (b "SQRT" 88 N N)) (b "STRLEN" 91 (b "STREAMS" 90 N N) N)) (b "TO_LOWER" 96 (b "TANH" 94 (b "TAN" 93 N N) (b "TIME" 95 N N)) (b "TO_UPPER" 98 (b "TO_STR" 97 N N) N))) (b "WITHIN" 106 (b "WEEK" 103 (b "TUMBLING" 101 (b "TRUE" 100 N N) (b "VALUES" 102 N N)) (b "WITH" 105 (b "WHERE" 104 N N) N)) (b "{" 110 (b "[" 108 (b "YEAR" 107 N N) (b "]" 109 N N)) (b "}" 112 (b "||" 111 N N) N)))))
   where b s n = let bs = Data.Text.pack s
                 in  B bs (TS bs n)

unescapeInitTail :: Data.Text.Text -> Data.Text.Text
unescapeInitTail = Data.Text.pack . unesc . tail . Data.Text.unpack
  where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '\\':'r':cs  -> '\r' : unesc cs
    '\\':'f':cs  -> '\f' : unesc cs
    '"':[]    -> []
    c:cs      -> c : unesc cs
    _         -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
      deriving (Eq, Show,Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  Data.Text.Text)   -- current input string

tokens :: Data.Text.Text -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (Data.Text.take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case Data.Text.uncons s of
    Nothing  -> Nothing
    Just (c,s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
 where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
