name: Build and Run tests

on:
  push:
    branches: [master]

  pull_request:
    branches: [master]

env:
  IMAGE: hstreamdb/haskell-rocksdb

jobs:
  pre-build:
    runs-on: ubuntu-latest
    name: Prepare pre-build environment for tests
    outputs:
      ghc: ${{ steps.parser.outputs.ghc }}
      packages: ${{ steps.parser.outputs.packages }}
    steps:
      - uses: actions/checkout@v2
      - id: parser
        run: |
          pkgcabal="hstream/hstream.cabal"
          GHCS=$(cat ${pkgcabal} | grep tested-with | sed -e 's/[^0-9|\.]/ /g' -e 's/^ *//g' -e 's/ *$//g' | python3 -c 'import sys, json; print(json.dumps([x.strip() for x in sys.stdin.read().split()]))')
          echo "Set ghc versions: $GHCS..."
          echo "::set-output name=ghc::$GHCS"

  build:
    needs: pre-build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ghc: ${{ fromJson(needs.pre-build.outputs.ghc) }}

    name: GHC-${{ matrix.ghc }}
    steps:
      - uses: actions/checkout@v2

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cabal/packages
            ~/.cabal/store
          key: ${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.ghc }}-

      - name: Pull ghc-${{ matrix.ghc }} image and start build-${{ matrix.ghc }} container.
        run: |
          docker pull $IMAGE:${{ matrix.ghc }}
          docker run -td --rm --name build-${{ matrix.ghc }} -e LC_ALL=en_US.UTF-8 -v $HOME/.cabal:/root/.cabal -v $(pwd):/srv -w /srv $IMAGE:${{ matrix.ghc }} bash
          docker exec build-${{ matrix.ghc }} apt-get update
          docker exec build-${{ matrix.ghc }} apt-get install -y locales
          docker exec build-${{ matrix.ghc }} localedef -i en_US -c -f UTF-8 -A /usr/share/locale/locale.alias en_US.UTF-8

      - name: Install dependencies
        run: |
          docker exec build-${{ matrix.ghc }} cabal update
          docker exec build-${{ matrix.ghc }} cabal build --only-dependencies --enable-tests --enable-benchmarks all

      - name: Build
        run: docker exec build-${{ matrix.ghc }} cabal build --enable-tests --enable-benchmarks all

      - name: Run tests
        run: docker exec build-${{ matrix.ghc }} cabal test all

      - name: Run cabal check
        run: |
          # from: https://unix.stackexchange.com/questions/184340/how-to-grep-a-line-with-unknown-number-of-its-indented-lines
          regex="^packages:$"
          PACKAGES=$(cat cabal.project | awk '/'"$regex"'/ && !f{f=1;x=$0;sub(/[^ ].*/,"",x);x=x" ";print;next} f {if (substr($0,1,length(x))==x)print; else f=0}' | grep -v "$regex")
          # unfortunately, there is no `cabal check all`
          for pkg in ${PACKAGES}; do docker exec build-${{ matrix.ghc }} bash -c "echo check $pkg... && cd $pkg && cabal -vnormal check"; done

      - name: Haddock
        run: docker exec build-${{ matrix.ghc }} cabal haddock --enable-tests --enable-benchmarks all

      - name: Stylish
        run: |
          echo "Install stylish-haskell"

          PACKAGE=stylish-haskell
          RELEASES=$(curl --silent https://github.com/jaspervdj/$PACKAGE/releases)
          URL=https://github.com/$(echo $RELEASES | grep -o '\"[^\"]*-linux-x86_64\.tar\.gz\"' | sed s/\"//g | head -n1)
          VERSION=$(echo $URL | sed -e 's/.*-\(v[\.0-9]\+-linux-x86_64\)\.tar\.gz/\1/')
          TEMP=$(mktemp --directory)
          curl --progress-bar --location -o$TEMP/$PACKAGE.tar.gz $URL
          tar -xzf $TEMP/$PACKAGE.tar.gz -C$TEMP
          chmod +x $TEMP/$PACKAGE-$VERSION/$PACKAGE

          find . -type f -not -path "./dist-newstyle/*" -not -path "*/.stack-work/*" | grep "\.l\?hs$" | xargs $TEMP/$PACKAGE-$VERSION/$PACKAGE -c .stylish-haskell.yaml -i && git diff-index --exit-code HEAD
