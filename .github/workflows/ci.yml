name: CI

on:
  push:
    branches: [main, master]

  pull_request:
    branches: [main, master]

jobs:
  pre-build:
    runs-on: ubuntu-latest
    name: Prepare pre-build environment for tests
    outputs:
      ghc: ${{ steps.parser.outputs.ghc }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - id: parser
        run: |
          pkgcabal="hstream/hstream.cabal"
          GHCS=$(cat ${pkgcabal} | grep tested-with | python3 -c 'import sys, re, json; print(re.findall(r"(\d+\.\d+\.\d+)", sys.stdin.read()))')
          echo "Set ghc versions: $GHCS..."
          echo "::set-output name=ghc::$GHCS"

      - name: Run stylish-haskell
        run: |
          # install stylish-haskell
          PACKAGE=stylish-haskell
          RELEASES=$(curl --silent https://github.com/haskell/$PACKAGE/releases)
          URL=https://github.com/$(echo $RELEASES | grep -o '\"[^\"]*-linux-x86_64\.tar\.gz\"' | sed s/\"//g | head -n1)
          VERSION=$(echo $URL | sed -e 's/.*-\(v[\.0-9]\+-linux-x86_64\)\.tar\.gz/\1/')
          TEMP=$(mktemp --directory)
          curl --progress-bar --location -o$TEMP/$PACKAGE.tar.gz $URL
          tar -xzf $TEMP/$PACKAGE.tar.gz -C$TEMP
          chmod +x $TEMP/$PACKAGE-$VERSION/$PACKAGE
          # check all sources
          echo "Run script/format.sh with latest stylish-haskell..."
          FORMATER_BIN=$TEMP/$PACKAGE-$VERSION/$PACKAGE bash script/format.sh ci && git diff-index --exit-code HEAD

  build-and-test:
    needs: pre-build
    runs-on: ubuntu-latest
    name: GHC-${{ matrix.ghc }}
    strategy:
      matrix:
        ghc: ${{ fromJson(needs.pre-build.outputs.ghc) }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cabal/packages
            ~/.cabal/store
            dist-newstyle
          key: ${{ runner.os }}-${{ matrix.ghc }}-v2-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.ghc }}-v2

      - name: Start required services
        run: |
          python3 script/dev-tools start-services

      # Since we use the upgraded version of z-data and z-io, this should resolve the problem.
      #
      # We remove these caches because there is an unknown reason that will cause ci to fail without any error message.
      #- name: remove all Z related builds
      #  run: find ~/.cabal/store/ -maxdepth 2 -type d -name "Z*" -o -name "zoo*" | xargs rm -rf

      - name: build
        run: |
          python3 script/dev-tools cabal --check --no-interactive -i docker.io/hstreamdb/haskell:${{ matrix.ghc }} \
            update
          python3 script/dev-tools shell --check --no-interactive -i docker.io/hstreamdb/haskell:${{ matrix.ghc }} \
            make
          python3 script/dev-tools cabal --check --no-interactive -i docker.io/hstreamdb/haskell:${{ matrix.ghc }} -- \
            build --enable-tests --enable-benchmarks all
          python3 script/dev-tools cabal --check --no-interactive -i docker.io/hstreamdb/haskell:${{ matrix.ghc }} -- \
            install hstream-server hstream-http-server

      - name: start hstream server
        run: |
          SERVER_PORT=$(cat local-data/dev_tools.env|grep SERVER_LOCAL_PORT|cut -d '=' -f2)
          HADMIN_PORT=$(cat local-data/dev_tools.env|grep STORE_ADMIN_LOCAL_PORT|cut -d '=' -f2)
          NAME="test-hstream-server"

          python3 script/dev-tools shell --check --no-interactive --command "" --detach \
              --container-name $NAME -i docker.io/hstreamdb/haskell:${{ matrix.ghc }} -- \
              hstream-server --port $SERVER_PORT --hadmin-port $HADMIN_PORT
          sleep 5
          docker logs --tail 100 $NAME

      - name: start hstream http server
        run: |
          HTTP_PORT=$(cat local-data/dev_tools.env|grep HTTP_LOCAL_PORT|cut -d '=' -f2)
          SERVER_PORT=$(cat local-data/dev_tools.env|grep SERVER_LOCAL_PORT|cut -d '=' -f2)
          NAME="test-http-server"

          python3 script/dev-tools shell --check --no-interactive --command "" --detach \
              --container-name $NAME -i docker.io/hstreamdb/haskell:${{ matrix.ghc }} -- \
              hstream-http-server --port $HTTP_PORT --hstream-port $SERVER_PORT
          sleep 5
          docker logs --tail 100 $NAME

      - name: test
        run: |
          python3 script/dev-tools cabal --check --no-interactive -i docker.io/hstreamdb/haskell:${{ matrix.ghc }} -- test --test-show-details=direct all

      - name: check
        run: |
          python3 script/dev-tools cabal --check --no-interactive -i docker.io/hstreamdb/haskell:${{ matrix.ghc }} -- sdist all

          # unfortunately, there is no `cabal check all`
          #log_info "Run all cabal check..."
          # Note that we ignore hstream-store package to run cabal check, because there
          # is an unexpected warning:
          #   ...
          #   Warning: 'cpp-options': -std=c++17 is not portable C-preprocessor flag
          #   Warning: Hackage would reject this package.
          for dir in hstream-sql hstream-processing hstream; do
            python3 script/dev-tools shell --check --no-interactive -i docker.io/hstreamdb/haskell:${{ matrix.ghc }} "'cd $dir && cabal check'"
          done

      #- name: remove all Z related builds
      #  run: find ~/.cabal/store/ -maxdepth 2 -type d -name "Z*" -o -name "zoo*" | xargs rm -rf

      # TODO
      #- name: haddock
      #    python3 script/dev-tools cabal --check --no-interactive -i docker.io/hstreamdb/haskell:${{ matrix.ghc }} -- haddock haddock --enable-documentation --haddock-for-hackage all
