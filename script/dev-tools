#!/usr/bin/env python3
# PYTHON_ARGCOMPLETE_OK
#
# If you want to enable tab completion of this script, you must install
# argcomplete, for details, see:
#
# https://kislyuk.github.io/argcomplete/#installation
import argparse
import os
import sys
import getpass
from pathlib import Path
import time
import subprocess
import re
import tempfile
import string
import random

logerr = lambda s: print(f"\033[91m{s}\033[0m")
logdebug = lambda s: print(f"\033[95m[DEBUG] \033[0m{s}")
loginfo = lambda s: print(f"\033[96m{s}\033[0m")
logwarn = lambda s: print(f"\033[33m{s}\033[0m")

try:
    import argcomplete
except Exception:
    from unittest.mock import MagicMock

    argcomplete = MagicMock()
    argcomplete.autocomplete = lambda x: logwarn(
        "There is no tab completion supported since argcomplete not found!"
    )

HOME = os.getenv("HOME")
CABAL_HOME = os.getenv("CABAL_HOME", f"{HOME}/.cabal")
STACK_HOME = os.getenv("STACK_HOME", f"{HOME}/.stack")
HOOGLE_HOME = os.getenv("HOOGLE_HOME", f"{HOME}/.hoogle")
GOPATH = os.getenv("GOPATH", f"{HOME}/.go")
GOCACHE = os.getenv("GOCACHE", f"{HOME}/.cache/.go-build")

PROJECT_ROOT = os.path.dirname(
    os.path.dirname(os.path.realpath(os.path.abspath(__file__)))
)
CUID, CGID = os.getuid(), os.getgid()
CUSERNAME = getpass.getuser()
CWD = os.getcwd()

DEFAULT_LOCAL_DATA = os.path.join(PROJECT_ROOT, "local-data")
Path(DEFAULT_LOCAL_DATA).mkdir(parents=True, exist_ok=True)

DEFAULT_HSTREAM_CONF = os.path.join(PROJECT_ROOT, "conf/hstream.yaml")

DEFAULT_LOGDEVICE_DIR = os.path.join(DEFAULT_LOCAL_DATA, "logdevice")
Path(DEFAULT_LOGDEVICE_DIR).mkdir(parents=True, exist_ok=True)
DEFAULT_ZK_PERSISTENT_DIR = os.path.join(DEFAULT_LOCAL_DATA, "zookeeper")
Path(DEFAULT_ZK_PERSISTENT_DIR).mkdir(parents=True, exist_ok=True)

DEFAULT_ENV_FILE = os.path.join(DEFAULT_LOCAL_DATA, "dev_tools.env")
with open(DEFAULT_ENV_FILE, "a"):
    pass
DEFAULT_SWAGGER_FILE = os.path.join(
    DEFAULT_LOCAL_DATA, "HStreamApi.swagger.json"
)
BASH_HISTORY_FILE = os.path.join(DEFAULT_LOCAL_DATA, "bash_history")
with open(BASH_HISTORY_FILE, "a"):
    pass

IMAGES = {
    "HS_IMAGE": os.getenv("DEV_IMAGE", "docker.io/hstreamdb/haskell"),
    "LD_IMAGE": "docker.io/hstreamdb/logdevice",
    "DB_IMAGE": "docker.io/hstreamdb/hstream",
    "SWAGGER_IMAGE": "swaggerapi/swagger-ui",
    # TODO: we should update haskell-mysql to support password protocol in higher versions of mysql
    "MYSQL_IMAGE": "mysql:5.6",
    "CLICKHOUSE_IMAGE": "yandex/clickhouse-server",
    "ZOOKEEPER_IMAGE": "zookeeper:3.6",
}

SERVICES = {
    "mysql": f"hstream-test-mysql-{CUID}",
    "clickhouse": f"hstream-test-clickhouse-{CUID}",
    "zookeeper": f"hstream-test-zookeeper-{CUID}",
    "store": f"logdevice-dev-cluster-{CUID}",
}

HSTREAM_SERVER_PORT_ENV = "SERVER_LOCAL_PORT"
HSTREAM_HTTP_PORT_ENV = "HTTP_LOCAL_PORT"
STORE_ADMIN_PORT_ENV = "STORE_ADMIN_LOCAL_PORT"
MYSQL_PORT_ENV = "MYSQL_LOCAL_PORT"
CLICKHOUSE_PORT_ENV = "CLICKHOUSE_LOCAL_PORT"
ZOOKEEPER_PORT_ENV = "ZOOKEEPER_LOCAL_PORT"

gen_randoms = lambda n: "".join(
    random.choices(string.ascii_letters + string.digits, k=n)
)


def find_free_port():
    import socket
    from contextlib import closing

    with closing(socket.socket(socket.AF_INET, socket.SOCK_STREAM)) as s:
        s.bind(("", 0))
        s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        return s.getsockname()[1]


def run_sh(sh, stderr=subprocess.STDOUT, stdout=None, check=True):
    assert isinstance(sh, str)
    args = ["bash", "-c", sh]
    return subprocess.run(args, stderr=stderr, stdout=stdout, check=check)


# -----------------------------------------------------------------------------


def is_service_started(container_bin, service_key):
    if not container_bin:
        return logerr("No such container_bin")
    result = run_sh(
        str(container_bin) + " ps --format {{.Names}}", stdout=subprocess.PIPE
    )
    if result and result.stdout:
        rs = result.stdout.decode().strip().split("\n")
        if SERVICES[service_key] in rs:
            return True
    return False


def write_env(key, val):
    if not os.path.exists(DEFAULT_ENV_FILE):
        with open(DEFAULT_ENV_FILE, "w") as f:
            f.write(f"{key}={val}\n")
        return None

    # NOTE: thread unsafe
    with open(DEFAULT_ENV_FILE) as f:
        lines = f.readlines()
        envs = dict(
            [x.strip() for x in re.split("=", line, maxsplit=1)]
            for line in lines
        )
        envs[key.strip()] = val
    with open(DEFAULT_ENV_FILE, "w") as f:
        f.write("".join(f"{k}={v}\n" for k, v in envs.items()))


def read_env():
    if not os.path.exists(DEFAULT_ENV_FILE):
        return {}

    with open(DEFAULT_ENV_FILE) as f:
        lines = f.readlines()
        return dict(
            [x.strip() for x in re.split("=", line, maxsplit=1)]
            for line in lines
        )


def get_ldadmin_server_host(container_bin):
    container_name = SERVICES["store"]
    result = run_sh(
        f"{container_bin} logs {container_name}", stdout=subprocess.PIPE
    )
    if result and result.stdout:
        rs = set(
            re.findall(r"--admin-server-host=([\d\.]*)", result.stdout.decode())
        )
        if len(rs) == 0:
            return None
        elif len(rs) == 1:
            host = rs.pop()
            return host
        else:
            logerr("Get admin-server-host error!")


def get_ldadmin_server_port(container_bin):
    container_name = SERVICES["store"]
    result = run_sh(
        f"{container_bin} logs {container_name}", stdout=subprocess.PIPE
    )
    if result and result.stdout:
        rs = set(
            re.findall(r"--admin-server-port=(\d*)", result.stdout.decode())
        )
        if len(rs) == 0:
            return None
        elif len(rs) == 1:
            port = rs.pop()
            return port
        else:
            logerr("Get admin-server-port error!")


def admin_addr(container_bin):
    if not is_service_started(container_bin, "store"):
        return logerr(
            "Please start the dev-cluster first. Run: dev-tools start-services"
        )

    host = get_ldadmin_server_host(container_bin)
    port = get_ldadmin_server_port(container_bin)
    if host and port:
        loginfo(f"Host: {host}, port: {port}")


def run_hadmin(image, container_bin, command, cmd_args):
    if not is_service_started(container_bin, "store"):
        return logerr("Please start the dev-cluster first.")

    host = "127.0.0.1"
    port = get_ldadmin_server_port(container_bin)
    container_opts = "-it"
    if command == "hadmin store":
        user_command = f"{command} --host={host} --port={port}"
        if cmd_args:
            user_command = user_command + " " + " ".join(cmd_args)
    else:
        user_command = command

    name = f"{CUSERNAME}_{CUID}_hadmin_{gen_randoms(10)}"
    cmd = f"{container_bin} run --name {name} --rm {container_opts} --network host {image} {user_command}"
    run_sh(cmd, check=False)


# TODO: wait serive to start
def _service_mysql_(container_bin="docker", port=None, **kw):
    if is_service_started(container_bin, "mysql"):
        return logerr("Already started!")

    port = port or os.getenv(MYSQL_PORT_ENV, 3306)
    write_env(MYSQL_PORT_ENV, port)
    container_name = SERVICES["mysql"]
    cmd = " ".join(
        [
            f"{container_bin} run -td -p {port}:3306 --name {container_name} --rm",
            "-e MYSQL_ALLOW_EMPTY_PASSWORD=yes",
            IMAGES["MYSQL_IMAGE"],
        ]
    )
    run_sh(cmd)
    loginfo("done")


# TODO: wait serive to start
def _service_clickhouse_(container_bin="docker", port=None, **kw):
    if is_service_started(container_bin, "clickhouse"):
        return logerr("Already started!")

    port = port or os.getenv(CLICKHOUSE_PORT_ENV, 9000)
    write_env(CLICKHOUSE_PORT_ENV, port)
    container_name = SERVICES["clickhouse"]
    cmd = " ".join(
        [
            f"{container_bin} run -td -p {port}:9000 --name {container_name} --rm",
            "--ulimit nofile=262144:262144",
            IMAGES["CLICKHOUSE_IMAGE"],
        ]
    )
    run_sh(cmd)
    loginfo("done")


# TODO: wait serive to start
def _service_zookeeper_(container_bin="docker", port=None, **kw):
    if is_service_started(container_bin, "zookeeper"):
        return logerr("Already started!")

    port = port or os.getenv(ZOOKEEPER_PORT_ENV, 9000)
    write_env(ZOOKEEPER_PORT_ENV, port)
    container_name = SERVICES["zookeeper"]
    cmd = " ".join(
        [
            f"{container_bin} run -td -p {port}:2181 --name {container_name} --rm",
            f"-v {DEFAULT_ZK_PERSISTENT_DIR}/data:/data",
            f"-v {DEFAULT_ZK_PERSISTENT_DIR}/datalog:/datalog",
            IMAGES["ZOOKEEPER_IMAGE"],
        ]
    )
    run_sh(cmd)
    loginfo("done")


def _service_store_(
    container_bin="docker",
    image=IMAGES["DB_IMAGE"],
    data_dir=DEFAULT_LOGDEVICE_DIR,
    retries=120,
    **kw,
):
    if is_service_started(container_bin, "store"):
        return logerr("Already started!")

    container_name = SERVICES["store"]
    cmd = " ".join(
        [
            f"{container_bin} run -td --name {container_name} --rm",
            "--network host",
            "-u " + str(CUID) + ":" + str(CGID)
            if container_bin.strip() in ["docker"]
            else "",
            f"-v {data_dir}:/data/store {image}",
            "/usr/local/bin/ld-dev-cluster --root /data/store --use-tcp",
        ]
    )
    run_sh(cmd)

    while True:
        if retries < 0:
            logerr("Fail to start dev cluster!")
            service_stop(container_bin, services=["store"])
            return None
        time.sleep(1)
        port = get_ldadmin_server_port(container_bin)
        if port:
            break
        else:
            loginfo("Starting dev cluster...")
        retries = retries - 1

    loginfo("Cluster admin info: ")
    admin_addr(container_bin)
    run_hadmin(
        image=image,
        container_bin="docker",
        command="hadmin store",
        cmd_args=["status"],
    )

    port = get_ldadmin_server_port(container_bin)
    write_env(STORE_ADMIN_PORT_ENV, port)

    loginfo("Done")


def service_start(services=None, container_bin=None, **kws):
    services = services or SERVICES.keys()
    kws["container_bin"] = container_bin
    for s in services:
        port = find_free_port()
        kws["port"] = port
        loginfo(f"Start {s}...")
        globals()[f"_service_{s}_"](**kws)
        time.sleep(1)

    port = find_free_port()
    write_env(HSTREAM_SERVER_PORT_ENV, port)

    port = find_free_port()
    write_env(HSTREAM_HTTP_PORT_ENV, port)

    # here we stop all "shell" containers, because "service_start" will refresh
    # all random ports, the old ports used in "shell" container is obsoleted.
    loginfo("Stop all 'shell' containers...")
    run_sh(
        f"{container_bin} "
        "ps --format '{{.Names}}' | "
        f"grep '{CUSERNAME}_{CUID}_haskell_' | "
        "xargs --no-run-if-empty docker kill"
    )


def service_stop(container_bin=None, services=None):
    if not container_bin:
        return logerr("No container_bin...")

    services = services or SERVICES.keys()
    for s in services:
        name = SERVICES[s]
        if is_service_started(container_bin, s):
            run_sh(f"{container_bin} kill {name}", check=False)
        else:
            logwarn(f"No such service {s}, ignored")


def update_images(images=None):
    images = images or IMAGES.values()
    for i in images:
        cmd = f"docker pull {i}"
        loginfo(f"Run {cmd}...")
        run_sh(cmd)


def gen_swagger_json(container_bin):
    hs_image = IMAGES["HS_IMAGE"]
    proto_path = os.path.join(PROJECT_ROOT, "common/proto/HStream/Server")
    proto_file = os.path.join(proto_path, "HStreamApi.proto")
    conf_file = os.path.join(proto_path, "HStreamApi.yaml")

    cmd = (
        f"/usr/local/bin/protoc -I {proto_path} "
        f"--openapiv2_out {DEFAULT_LOCAL_DATA} "
        f"--openapiv2_opt grpc_api_configuration={conf_file} "
        f"{proto_file}"
    )
    run_sh(
        f"{container_bin} run -t --rm -u {CUID}:{CGID} "
        f"-v {PROJECT_ROOT}:{PROJECT_ROOT} {hs_image} {cmd}"
    )


def swagger_ui_start(container_bin, port, swagger_path=None, no_regen=False):
    SWAGGER_CONTAINER_NAME = f"hstream-swagger-{CUID}"
    swagger_path = swagger_path or DEFAULT_SWAGGER_FILE

    if not no_regen:
        gen_swagger_json(container_bin)
        swagger_path = DEFAULT_SWAGGER_FILE

    if not os.path.exists(swagger_path):
        return logerr(f"No such swagger_path: {swagger_path}")

    cmd = " ".join(
        [
            f"{container_bin} run -t --rm -p {port}:8080 --name {SWAGGER_CONTAINER_NAME}",
            f"-v {swagger_path}:/app/swagger.json",
            "-e SWAGGER_JSON=/app/swagger.json",
            "-e SWAGGER_JSON_URL=/swagger.json",
            '-e BASE_URL="/"',
            IMAGES["SWAGGER_IMAGE"],
        ]
    )
    print(cmd)
    run_sh(cmd)


def run_ldshell(image, container_bin, command, cmd_args):
    if not is_service_started(container_bin, "store"):
        return logerr(
            "Please start the dev-cluster first. Run: dev-tools start-services"
        )

    host = "127.0.0.1"
    port = get_ldadmin_server_port(container_bin)
    container_opts = "-it"
    if command == "ldshell":
        user_command = (
            f"{command} --admin-server-host={host} --admin-server-port={port}"
        )
        if cmd_args:
            user_command = user_command + " " + " ".join(cmd_args)
            container_opts = "-t"
    else:
        user_command = command

    name = f"{CUSERNAME}_{CUID}_ldshell_{gen_randoms(10)}"
    cmd = f"{container_bin} run --name {name} --rm {container_opts} --network host {image} {user_command}"
    run_sh(cmd, check=False)


def dev_env(
    image,
    command,
    cmd_args,
    tty,
    interactive,
    rm,
    no_services_required,
    detach,
    check,
    container_bin="docker",
    data_dir=DEFAULT_LOGDEVICE_DIR,
    network="host",
    extra_container_options="",
    container_name=None,
    **args,
):
    if not no_services_required and not all(
        is_service_started(container_bin, k) for k in SERVICES.keys()
    ):
        sys.exit(
            "Please start all required services first. Run: dev-tools start-services"
        )

    Path(f"{HOME}/.local/bin").mkdir(parents=True, exist_ok=True)
    Path(f"{HOME}/.ghc").mkdir(parents=True, exist_ok=True)
    Path(f"{CABAL_HOME}").mkdir(parents=True, exist_ok=True)
    Path(f"{STACK_HOME}").mkdir(parents=True, exist_ok=True)
    Path(f"{HOOGLE_HOME}").mkdir(parents=True, exist_ok=True)
    Path(f"{GOPATH}").mkdir(parents=True, exist_ok=True)
    Path(f"{GOCACHE}").mkdir(parents=True, exist_ok=True)

    user_cmd = f"{command} {' '.join(cmd_args)}"
    user_path = f"/opt/ghc/bin:/opt/cabal/bin:/usr/local/bin:{CABAL_HOME}/bin:{HOME}/.local/bin:$PATH"
    container_name = (
        container_name or f"{CUSERNAME}_{CUID}_haskell_{gen_randoms(10)}"
    )
    container_opts = " ".join(
        [
            "-t" if tty else "",
            "-i" if interactive else "",
            "-d" if detach else "",
            "--rm" if rm else "",
            "-u " + str(CUID) + ":" + str(CGID)
            if container_bin.strip() in ["docker"]
            else "",
        ]
    )
    cmd = f"""{container_bin} run {container_opts} \
                --name {container_name} \
                -e HOME={HOME} \
                -e LC_ALL=C.UTF-8 \
                -e HISTSIZE=10000 -e HISTFILESIZE=10000 \
                -e HISTCONTROL=ignoreboth \
                -e PATH={user_path} \
                -e USER={CUSERNAME} \
                -e GOPATH={GOPATH} \
                -e GOCACHE={GOCACHE} \
                --env-file {DEFAULT_ENV_FILE} \
                -v "{BASH_HISTORY_FILE}:{HOME}/.bash_history:rw" \
                -v {HOME}/.local/bin:{HOME}/.local/bin:rw \
                -v {HOME}/.ghc:{HOME}/.ghc:rw \
                -v {STACK_HOME}:{HOME}/.stack:rw \
                -v {CABAL_HOME}:{HOME}/.cabal:rw \
                -v {HOOGLE_HOME}:{HOME}/.hoogle:rw \
                -v {GOPATH}:{GOPATH} \
                -v {GOCACHE}:{GOCACHE} \
                -v "{PROJECT_ROOT}:{PROJECT_ROOT}" \
                -v "{data_dir}:/data/store" \
                -v "/tmp:/tmp" \
                -w "{PROJECT_ROOT}" \
                --network {network} \
                {extra_container_options} \
                {image} {user_cmd}"""
    loginfo(f"Run <{user_cmd}> from <{image}> image...")
    run_sh(cmd, check=check)


# -----------------------------------------------------------------------------


class Command:
    _commands = {}

    def __init__(self, parser):
        self._parser = parser
        self._parser.add_argument("--container-bin", default="docker")
        self._subparsers = parser.add_subparsers(
            title="subcommands", dest="sub_command"
        )
        self._args = {}

    def register(self, SubCommand):
        s = SubCommand()
        s.parser(self._subparsers)
        commands = (
            SubCommand.COMMAND
            if isinstance(SubCommand.COMMAND, list)
            else [SubCommand.COMMAND]
        )
        for cmd in commands:
            if self._commands.get(cmd):
                raise RuntimeError(f"Register a registered service: {cmd}!")
            self._commands[cmd] = s

    def run(self):
        argcomplete.autocomplete(parser)
        args = vars(self._parser.parse_args())
        sub_command = args.pop("sub_command")
        if sub_command:
            if s := self._commands.get(sub_command):
                s.run(**args)
            else:
                logerr(f"No such command: {sub_command}!")
                self._parser.print_help()
        else:
            self._parser.print_help()


class UpdateImageCommand:
    COMMAND = "update-images"

    def parser(self, subparsers):
        subparsers.add_parser(
            self.COMMAND, help="Update all required docker images"
        )

    def run(self, **args):
        update_images()


class StartServicesCommand:
    COMMAND = "start-services"

    def parser(self, subparsers):
        p = subparsers.add_parser(
            self.COMMAND, help="Start all services with default argument"
        )
        p.add_argument("--container-bin", default="docker")
        p.add_argument(
            "--services",
            default=None,
            choices=SERVICES.keys(),
            nargs="*",
            help="Start services, none means all valid services",
        )

    def run(self, **args):
        service_start(**args)


class StopServicesCommand:
    COMMAND = "stop-services"

    def parser(self, subparsers):
        p = subparsers.add_parser(self.COMMAND, help="Stop all services")
        p.add_argument("--container-bin", default="docker")
        p.add_argument(
            "--services",
            default=None,
            choices=SERVICES.keys(),
            nargs="*",
            help="Stop services, none means all valid services",
        )

    def run(self, **args):
        service_stop(**args)


class StartHServerCommand:
    COMMAND = "start-hserver"

    def parser(self, subparsers):
        parser_start_hserver = subparsers.add_parser(
            self.COMMAND, help="Start hstream-server."
        )
        parser_start_hserver.add_argument(
            "--force-restart", "-f", action="store_true"
        )
        parser_start_hserver.add_argument(
            "--image", "-i", default=IMAGES["HS_IMAGE"]
        )
        parser_start_hserver.add_argument(
            "--num-server", "-n", type=int, default=4
        )
        parser_start_hserver.add_argument(
            "--data-dir", "-d", type=Path, default=DEFAULT_LOGDEVICE_DIR
        )

    def run(self, **args):
        envs = read_env()
        num_server = args.pop("num_server")
        data_dir = args.pop("data_dir")
        force_restart = args.pop("force_restart")

        def gen_free_port():
            yield envs.get(HSTREAM_SERVER_PORT_ENV)
            for _ in range(num_server):
                yield find_free_port()

        free_ports = gen_free_port()

        for i in range(num_server):
            container_name = f"{CUSERNAME}_{CUID}_hstream_server_{i}"
            if force_restart:
                run_sh(f"docker rm -f {container_name}")
            command = "cabal run -- hstream-server"
            port = next(free_ports)
            cmd_args = [
                "--host 127.0.0.1 --address 127.0.0.1",
                f"--port {port} --internal-port {find_free_port()}",
                f"--config-path {DEFAULT_HSTREAM_CONF}",
                f"--server-id {i}",
                f"--zkuri 127.0.0.1:{envs.get(ZOOKEEPER_PORT_ENV)}",
                "--store-config /data/store/logdevice.conf",
            ]
            dev_env(
                command=command,
                cmd_args=cmd_args,
                container_name=container_name,
                tty=True,
                interactive=False,
                detach=True,
                rm=True,
                no_services_required=False,
                check=True,
                data_dir=data_dir,
                **args,
            )


class ShellCommand:
    COMMAND = "shell"

    def parser(self, subparsers):
        parser_haskell = subparsers.add_parser(
            self.COMMAND,
            help="Enter in a shell with all haskell dev dependencies",
        )
        parser_haskell.add_argument(
            "--image",
            "-i",
            help="haskell docker images",
            default=IMAGES["HS_IMAGE"],
        )
        parser_haskell.add_argument("--container-name", default=None)
        parser_haskell.add_argument("--command", default=None)
        parser_haskell.add_argument("--no-interactive", action="store_true")
        parser_haskell.add_argument("--no-tty", action="store_true")
        parser_haskell.add_argument(
            "--no-services-required", action="store_true"
        )
        parser_haskell.add_argument("--detach", action="store_true")
        parser_haskell.add_argument("--check", action="store_true")
        parser_haskell.add_argument(
            "--data-dir", "-d", type=Path, default=DEFAULT_LOGDEVICE_DIR
        )
        parser_haskell.add_argument("--network", default="host")
        parser_haskell.add_argument("--extra-container-options", default="")
        parser_haskell.add_argument("cmd_args", nargs="*")

    def run(self, **args):
        args["interactive"] = not args.pop("no_interactive")
        args["tty"] = not args.pop("no_tty")
        if args["command"] is None:
            if args["interactive"]:
                args["command"] = "bash"
                args["cmd_args"] = ""
                dev_env(rm=True, **args)
            else:
                args["command"] = "bash -c"
                dev_env(rm=True, **args)
        else:
            dev_env(rm=True, **args)


class CabalCommand:
    COMMAND = "cabal"

    def parser(self, subparsers):
        parser_haskell_cabal = subparsers.add_parser(
            "cabal", help="Run cabal command directly"
        )
        parser_haskell_cabal.add_argument(
            "--image",
            "-i",
            help="haskell docker images",
            default=IMAGES["HS_IMAGE"],
        )
        parser_haskell_cabal.add_argument("--container-name", default=None)
        # TODO: since python3.9 there is BooleanOptionalAction available in argparse
        parser_haskell_cabal.add_argument(
            "--no-interactive", action="store_true"
        )
        parser_haskell_cabal.add_argument("--no-tty", action="store_true")
        parser_haskell_cabal.add_argument(
            "--no-services-required", action="store_true"
        )
        parser_haskell_cabal.add_argument("--detach", action="store_true")
        parser_haskell_cabal.add_argument("--check", action="store_true")
        parser_haskell_cabal.add_argument(
            "--data-dir", "-d", type=Path, default=DEFAULT_LOGDEVICE_DIR
        )
        parser_haskell_cabal.add_argument("--network", default="host")
        parser_haskell_cabal.add_argument(
            "--extra-container-options", default=""
        )
        parser_haskell_cabal.add_argument("cmd_args", nargs="*")

    def run(
        self,
        image=IMAGES["HS_IMAGE"],
        container_name=None,
        detach=False,
        check=False,
        data_dir=DEFAULT_LOGDEVICE_DIR,
        network="host",
        **args,
    ):
        args["interactive"] = not args.pop("no_interactive", False)
        args["tty"] = not args.pop("no_tty", False)
        dev_env(
            image=image,
            container_name=container_name,
            detach=detach,
            command="cabal",
            data_dir=data_dir,
            network=network,
            rm=True,
            check=check,
            **args,
        )


class InfoCommand:
    COMMAND = "info"

    def parser(self, subparsers):
        parser_get_info = subparsers.add_parser(
            "info", help="Get info about services."
        )
        parser_get_info.add_argument("--service", default=None)
        parser_get_info.add_argument(
            "--port-only", default=False, action="store_true"
        )

    def run(
        self, container_bin="docker", service=None, port_only=False, **args
    ):
        if not service or service == "store":
            if not is_service_started(container_bin, "store"):
                logerr(
                    "Please start the dev-cluster first. "
                    "Run: dev-tools start-services --services store"
                )
                sys.exit(1)
            else:
                host = get_ldadmin_server_host(container_bin)
                port = get_ldadmin_server_port(container_bin)
                if host and port:
                    if port_only:
                        print(port)
                    else:
                        loginfo(
                            f"local-store-cluster admin host: {host}, port: {port}"
                        )
                else:
                    logerr("get local store cluster address info failed.")
                    sys.exit(1)

        envs = read_env()

        if not service or service == "mysql":
            if not is_service_started(container_bin, "mysql"):
                logerr(
                    "Please start the mysql service first. "
                    "Run: dev-tools start-services --services mysql"
                )
                sys.exit(1)
            else:
                loginfo(f"mysql port: {envs.get(MYSQL_PORT_ENV)}")

        if not service or service == "clickhouse":
            if not is_service_started(container_bin, "clickhouse"):
                logerr(
                    "Please start the clickhouse service first."
                    "Run: dev-tools start-services --services clickhouse"
                )
                sys.exit(1)
            else:
                loginfo(f"clickhouse port: {envs.get(CLICKHOUSE_PORT_ENV)}")

        if not service or service == "zookeeper":
            if not is_service_started(container_bin, "zookeeper"):
                logerr(
                    "Please start the zookeeper service first. "
                    "Run: dev-tools start-services --services zookeeper"
                )
                sys.exit(1)
            else:
                loginfo(f"zookeeper port: {envs.get(ZOOKEEPER_PORT_ENV)}")


class SwaggerStartCommand:
    COMMAND = "swagger-start"

    def parser(self, subparsers):
        parser_swagger_start = subparsers.add_parser(
            self.COMMAND, help="Start swagger ui"
        )
        parser_swagger_start.add_argument("--container-bin", default="docker")
        parser_swagger_start.add_argument("--port", default="8080")
        parser_swagger_start.add_argument(
            "--swagger-path", default=f"{CWD}/swagger.json"
        )
        parser_swagger_start.add_argument("--no-regen", action="store_true")

    def run(self, **args):
        swagger_ui_start(**args)


class HadminStoreCommand:
    COMMAND = "hadmin-store"

    def parser(self, subparsers):
        _parser = subparsers.add_parser("hadmin-store", help="")
        _parser.add_argument(
            "--image",
            "-i",
            default=IMAGES["DB_IMAGE"],
        )
        _parser.add_argument("--container-bin", default="docker")
        _parser.add_argument("cmd_args", nargs="*")

    def run(self, **args):
        args["command"] = "hadmin store"
        run_hadmin(**args)


class LDShellCommand:
    COMMAND = "ldshell"

    def parser(self, subparsers):
        parser_cluster_ldshell = subparsers.add_parser("ldshell", help="")
        parser_cluster_ldshell.add_argument(
            "--image",
            "-i",
            help="ldshell docker images",
            default=f'{IMAGES["LD_IMAGE"]}:v3.0.0',
        )
        parser_cluster_ldshell.add_argument("--container-bin", default="docker")
        parser_cluster_ldshell.add_argument(
            "--command", "-c", default="ldshell"
        )
        parser_cluster_ldshell.add_argument("cmd_args", nargs="*")

    def run(self, **args):
        run_ldshell(**args)


class QuickBuildDevImageCommand:
    COMMAND = "quick-build-dev-image"

    def parser(self, subparsers):
        p = subparsers.add_parser(
            self.COMMAND,
            help=(
                "Quick build a new hstream server image based on current "
                "project source. (NOTE: http server is not included.)"
            ),
        )
        p.add_argument(
            "--builder-image",
            default=IMAGES["HS_IMAGE"],
            help="Your haskell development image",
        )
        p.add_argument("--tag", "-t", required=True, help="target image tag")
        # p.add_argument("--force-rebuild", "-f", action="store_true")  # TODO
        p.add_argument("--no-clean-installdir", action="store_true")

    def run(
        self,
        tag,
        builder_image,
        **kargs,
    ):
        tmp_name = "tmp_build_dev_image_" + gen_randoms(20)
        base_image = IMAGES["DB_IMAGE"]
        tmpdir = tempfile.TemporaryDirectory()
        installdir = tmpdir.name
        clean_installdir = not kargs.pop("no_clean_installdir", False)
        loginfo(
            f"Temp install dir: {installdir}, autoclean: {clean_installdir}"
        )
        try:
            hs_targets = "hstream hstream-admin"
            files = [
                (
                    f"{installdir}/hstream-server",
                    "/usr/local/bin/hstream-server",
                ),
                (
                    f"{installdir}/hstream-client",
                    "/usr/local/bin/hstream-client",
                ),
                (f"{installdir}/hadmin", "/usr/local/bin/hadmin"),
                (f"{DEFAULT_HSTREAM_CONF}", "/etc/hstream/config.yaml"),
            ]

            # Install
            run_sh(
                f"python3 {__file__} cabal --check --no-interactive "
                f"--no-services-required --image {builder_image} --no-services-required "
                f"-- install --installdir={installdir} {hs_targets}"
            )
            # Copy
            run_sh(f"docker run -td --rm --name {tmp_name} {base_image} bash")
            run_sh(
                " && ".join(
                    f"docker cp -L {x} {tmp_name}:{y}" for x, y in files
                )
            )
            run_sh(f"docker commit {tmp_name} {tag}")
        except Exception as e:
            raise e
        finally:
            if clean_installdir:
                tmpdir.cleanup()
            run_sh(f"docker kill {tmp_name}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="HStream dev tools.")
    c = Command(parser)
    c.register(UpdateImageCommand)
    c.register(QuickBuildDevImageCommand)
    c.register(StartServicesCommand)
    c.register(StopServicesCommand)
    c.register(StartHServerCommand)
    c.register(ShellCommand)
    c.register(CabalCommand)
    c.register(InfoCommand)
    c.register(HadminStoreCommand)
    c.register(SwaggerStartCommand)
    c.register(LDShellCommand)
    c.run()
