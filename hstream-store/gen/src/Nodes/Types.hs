-----------------------------------------------------------------
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
--  @generated
-----------------------------------------------------------------
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE BangPatterns #-}
{-# OPTIONS_GHC -fno-warn-unused-imports#-}
{-# OPTIONS_GHC -fno-warn-overlapping-patterns#-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns#-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
module Nodes.Types
       (SequencerConfig(SequencerConfig, sequencerConfig_weight),
        StorageConfig(StorageConfig, storageConfig_weight,
                      storageConfig_num_shards),
        NodeConfig(NodeConfig, nodeConfig_node_index,
                   nodeConfig_data_address, nodeConfig_roles,
                   nodeConfig_other_addresses, nodeConfig_location,
                   nodeConfig_sequencer, nodeConfig_storage,
                   nodeConfig_location_per_scope, nodeConfig_name, nodeConfig_tags),
        MaintenanceStatus(MaintenanceStatus_NOT_STARTED,
                          MaintenanceStatus_STARTED,
                          MaintenanceStatus_AWAITING_NODES_CONFIG_CHANGES,
                          MaintenanceStatus_AWAITING_SAFETY_CHECK,
                          MaintenanceStatus_BLOCKED_UNTIL_SAFE,
                          MaintenanceStatus_AWAITING_DATA_REBUILDING,
                          MaintenanceStatus_REBUILDING_IS_BLOCKED,
                          MaintenanceStatus_COMPLETED, MaintenanceStatus_RETRY,
                          MaintenanceStatus_AWAITING_NODES_CONFIG_TRANSITION,
                          MaintenanceStatus_AWAITING_NODE_PROVISIONING,
                          MaintenanceStatus_AWAITING_START_DATA_MIGRATION,
                          MaintenanceStatus_BLOCKED_BY_ADMIN_OVERRIDE,
                          MaintenanceStatus_AWAITING_NODE_TO_BE_ALIVE,
                          MaintenanceStatus__UNKNOWN),
        ShardMaintenanceProgress(ShardMaintenanceProgress,
                                 shardMaintenanceProgress_status,
                                 shardMaintenanceProgress_target_states,
                                 shardMaintenanceProgress_created_at,
                                 shardMaintenanceProgress_last_updated_at,
                                 shardMaintenanceProgress_associated_group_ids),
        SequencerMaintenanceProgress(SequencerMaintenanceProgress,
                                     sequencerMaintenanceProgress_status,
                                     sequencerMaintenanceProgress_target_state,
                                     sequencerMaintenanceProgress_created_at,
                                     sequencerMaintenanceProgress_last_updated_at,
                                     sequencerMaintenanceProgress_associated_group_ids),
        ShardDataHealth(ShardDataHealth_UNKNOWN, ShardDataHealth_HEALTHY,
                        ShardDataHealth_UNAVAILABLE, ShardDataHealth_LOST_REGIONS,
                        ShardDataHealth_LOST_ALL, ShardDataHealth_EMPTY,
                        ShardDataHealth__UNKNOWN),
        ShardOperationalState(ShardOperationalState_UNKNOWN,
                              ShardOperationalState_ENABLED, ShardOperationalState_MAY_DISAPPEAR,
                              ShardOperationalState_DRAINED,
                              ShardOperationalState_MIGRATING_DATA,
                              ShardOperationalState_ENABLING, ShardOperationalState_PROVISIONING,
                              ShardOperationalState_PASSIVE_DRAINING,
                              ShardOperationalState_INVALID, ShardOperationalState__UNKNOWN),
        ShardStorageState(ShardStorageState_DISABLED,
                          ShardStorageState_READ_ONLY, ShardStorageState_READ_WRITE,
                          ShardStorageState_DATA_MIGRATION, ShardStorageState__UNKNOWN),
        ShardState(ShardState, shardState_data_health,
                   shardState_current_operational_state, shardState_maintenance,
                   shardState_storage_state, shardState_metadata_state),
        SequencingState(SequencingState_ENABLED, SequencingState_BOYCOTTED,
                        SequencingState_DISABLED, SequencingState_UNKNOWN,
                        SequencingState__UNKNOWN),
        SequencerState(SequencerState, sequencerState_state,
                       sequencerState_maintenance),
        ServiceState(ServiceState_UNKNOWN, ServiceState_ALIVE,
                     ServiceState_STARTING_UP, ServiceState_SHUTTING_DOWN,
                     ServiceState_DEAD, ServiceState__UNKNOWN),
        ServiceHealthStatus(ServiceHealthStatus_UNKNOWN,
                            ServiceHealthStatus_UNDEFINED, ServiceHealthStatus_HEALTHY,
                            ServiceHealthStatus_OVERLOADED, ServiceHealthStatus_UNHEALTHY,
                            ServiceHealthStatus__UNKNOWN),
        NodeState(NodeState, nodeState_node_index, nodeState_daemon_state,
                  nodeState_sequencer_state, nodeState_shard_states,
                  nodeState_config, nodeState_daemon_health_status),
        NodesConfig, NodesState,
        NodesFilter(NodesFilter, nodesFilter_node, nodesFilter_role,
                    nodesFilter_location),
        NodesConfigResponse(NodesConfigResponse, nodesConfigResponse_nodes,
                            nodesConfigResponse_version),
        NodesStateResponse(NodesStateResponse, nodesStateResponse_states,
                           nodesStateResponse_version),
        NodesStateRequest(NodesStateRequest, nodesStateRequest_filter,
                          nodesStateRequest_force))
       where
import qualified Common.Types as Common
import qualified Control.DeepSeq as DeepSeq
import qualified Control.Exception as Exception
import qualified Control.Monad as Monad
import qualified Control.Monad.ST.Trans as ST
import qualified Control.Monad.Trans.Class as Trans
import qualified Data.Aeson as Aeson
import qualified Data.Aeson.Types as Aeson
import qualified Data.Default as Default
import qualified Data.Function as Function
import qualified Data.HashMap.Strict as HashMap
import qualified Data.Hashable as Hashable
import qualified Data.Int as Int
import qualified Data.List as List
import qualified Data.Map.Strict as Map
import qualified Data.Ord as Ord
import qualified Data.Set as Set
import qualified Data.Text as Text
import qualified Data.Text.Encoding as Text
import qualified Membership.Types as Membership
import qualified Prelude as Prelude
import qualified Thrift.Binary.Parser as Parser
import qualified Thrift.CodegenTypesOnly as Thrift
import Control.Applicative ((<|>), (*>), (<*))
import Data.Aeson ((.:), (.:?), (.=), (.!=))
import Data.Monoid ((<>))
import Prelude ((.), (++), (>), (==))
import Prelude ((.), (<$>), (<*>), (>>=), (==), (/=), (<), (++))

newtype SequencerConfig = SequencerConfig{sequencerConfig_weight ::
                                          Prelude.Double}
                          deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON SequencerConfig where
  toJSON (SequencerConfig __field__weight)
    = Aeson.object ("weight" .= __field__weight : Prelude.mempty)

instance Thrift.ThriftStruct SequencerConfig where
  buildStruct _proxy (SequencerConfig __field__weight)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "weight" (Thrift.getDoubleType _proxy) 1 0
           (Thrift.genDouble _proxy __field__weight)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__weight <- ST.newSTRef 1.0
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getDoubleType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseDouble
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__weight
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__weight <- ST.readSTRef
                                                                 __field__weight
                                             Prelude.pure (SequencerConfig __val__weight)
              _idMap = HashMap.fromList [("weight", 1)]
            _parse 0)

instance DeepSeq.NFData SequencerConfig where
  rnf (SequencerConfig __field__weight)
    = DeepSeq.rnf __field__weight `Prelude.seq` ()

instance Default.Default SequencerConfig where
  def = SequencerConfig 1.0

instance Hashable.Hashable SequencerConfig where
  hashWithSalt __salt (SequencerConfig _weight)
    = Hashable.hashWithSalt __salt _weight

data StorageConfig = StorageConfig{storageConfig_weight ::
                                   Prelude.Double,
                                   storageConfig_num_shards :: Int.Int32}
                     deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON StorageConfig where
  toJSON (StorageConfig __field__weight __field__num_shards)
    = Aeson.object
        ("weight" .= __field__weight :
           "num_shards" .= __field__num_shards : Prelude.mempty)

instance Thrift.ThriftStruct StorageConfig where
  buildStruct _proxy
    (StorageConfig __field__weight __field__num_shards)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "weight" (Thrift.getDoubleType _proxy) 1 0
           (Thrift.genDouble _proxy __field__weight)
           :
           Thrift.genFieldPrim _proxy "num_shards" (Thrift.getI32Type _proxy)
             2
             1
             (Thrift.genI32Prim _proxy)
             __field__num_shards
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__weight <- ST.newSTRef 1.0
            __field__num_shards <- ST.newSTRef 1
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getDoubleType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseDouble
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__weight
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI32
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__num_shards
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__weight <- ST.readSTRef
                                                                 __field__weight
                                             !__val__num_shards <- ST.readSTRef __field__num_shards
                                             Prelude.pure
                                               (StorageConfig __val__weight __val__num_shards)
              _idMap = HashMap.fromList [("weight", 1), ("num_shards", 2)]
            _parse 0)

instance DeepSeq.NFData StorageConfig where
  rnf (StorageConfig __field__weight __field__num_shards)
    = DeepSeq.rnf __field__weight `Prelude.seq`
        DeepSeq.rnf __field__num_shards `Prelude.seq` ()

instance Default.Default StorageConfig where
  def = StorageConfig 1.0 1

instance Hashable.Hashable StorageConfig where
  hashWithSalt __salt (StorageConfig _weight _num_shards)
    = Hashable.hashWithSalt (Hashable.hashWithSalt __salt _weight)
        _num_shards

data NodeConfig = NodeConfig{nodeConfig_node_index ::
                             Common.NodeIndex,
                             nodeConfig_data_address :: Common.SocketAddress,
                             nodeConfig_roles :: Set.Set Common.Role,
                             nodeConfig_other_addresses :: Prelude.Maybe Common.Addresses,
                             nodeConfig_location :: Prelude.Maybe Text.Text,
                             nodeConfig_sequencer :: Prelude.Maybe SequencerConfig,
                             nodeConfig_storage :: Prelude.Maybe StorageConfig,
                             nodeConfig_location_per_scope :: Common.Location,
                             nodeConfig_name :: Text.Text,
                             nodeConfig_tags :: Map.Map Text.Text Text.Text}
                  deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON NodeConfig where
  toJSON
    (NodeConfig __field__node_index __field__data_address
       __field__roles __field__other_addresses __field__location
       __field__sequencer __field__storage __field__location_per_scope
       __field__name __field__tags)
    = Aeson.object
        ("node_index" .= __field__node_index :
           "data_address" .= __field__data_address :
             "roles" .= __field__roles :
               Prelude.maybe Prelude.id ((:) . ("other_addresses" .=))
                 __field__other_addresses
                 (Prelude.maybe Prelude.id ((:) . ("location" .=)) __field__location
                    (Prelude.maybe Prelude.id ((:) . ("sequencer" .=))
                       __field__sequencer
                       (Prelude.maybe Prelude.id ((:) . ("storage" .=)) __field__storage
                          ("location_per_scope" .=
                             Map.mapKeys Thrift.keyToStr __field__location_per_scope
                             :
                             "name" .= __field__name :
                               "tags" .= __field__tags : Prelude.mempty)))))

instance Thrift.ThriftStruct NodeConfig where
  buildStruct _proxy
    (NodeConfig __field__node_index __field__data_address
       __field__roles __field__other_addresses __field__location
       __field__sequencer __field__storage __field__location_per_scope
       __field__name __field__tags)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "node_index" (Thrift.getI16Type _proxy) 1 0
           (Thrift.genI16 _proxy __field__node_index)
           :
           Thrift.genField _proxy "data_address" (Thrift.getStructType _proxy)
             2
             1
             (Thrift.buildStruct _proxy __field__data_address)
             :
             Thrift.genField _proxy "roles" (Thrift.getSetType _proxy) 3 2
               ((Thrift.genList _proxy (Thrift.getI32Type _proxy)
                   (Thrift.genI32 _proxy . Prelude.fromIntegral .
                      Thrift.fromThriftEnum)
                   . Set.toList)
                  __field__roles)
               :
               let (__cereal__other_addresses, __id__other_addresses)
                     = case __field__other_addresses of
                         Prelude.Just _val -> ((:)
                                                 (Thrift.genField _proxy "other_addresses"
                                                    (Thrift.getStructType _proxy)
                                                    4
                                                    3
                                                    (Thrift.buildStruct _proxy _val)),
                                               4)
                         Prelude.Nothing -> (Prelude.id, 3)
                 in
                 __cereal__other_addresses
                   (let (__cereal__location, __id__location)
                          = case __field__location of
                              Prelude.Just _val -> ((:)
                                                      (Thrift.genField _proxy "location"
                                                         (Thrift.getStringType _proxy)
                                                         5
                                                         __id__other_addresses
                                                         (Thrift.genText _proxy _val)),
                                                    5)
                              Prelude.Nothing -> (Prelude.id, __id__other_addresses)
                      in
                      __cereal__location
                        (let (__cereal__sequencer, __id__sequencer)
                               = case __field__sequencer of
                                   Prelude.Just _val -> ((:)
                                                           (Thrift.genField _proxy "sequencer"
                                                              (Thrift.getStructType _proxy)
                                                              6
                                                              __id__location
                                                              (Thrift.buildStruct _proxy _val)),
                                                         6)
                                   Prelude.Nothing -> (Prelude.id, __id__location)
                           in
                           __cereal__sequencer
                             (let (__cereal__storage, __id__storage)
                                    = case __field__storage of
                                        Prelude.Just _val -> ((:)
                                                                (Thrift.genField _proxy "storage"
                                                                   (Thrift.getStructType _proxy)
                                                                   7
                                                                   __id__sequencer
                                                                   (Thrift.buildStruct _proxy
                                                                      _val)),
                                                              7)
                                        Prelude.Nothing -> (Prelude.id, __id__sequencer)
                                in
                                __cereal__storage
                                  (Thrift.genField _proxy "location_per_scope"
                                     (Thrift.getMapType _proxy)
                                     8
                                     __id__storage
                                     ((Thrift.genMap _proxy (Thrift.getI32Type _proxy)
                                         (Thrift.getStringType _proxy)
                                         Prelude.False
                                         (Thrift.genI32 _proxy . Prelude.fromIntegral .
                                            Thrift.fromThriftEnum)
                                         (Thrift.genText _proxy)
                                         . Map.toList)
                                        __field__location_per_scope)
                                     :
                                     Thrift.genField _proxy "name" (Thrift.getStringType _proxy) 9 8
                                       (Thrift.genText _proxy __field__name)
                                       :
                                       Thrift.genField _proxy "tags" (Thrift.getMapType _proxy) 10 9
                                         ((Thrift.genMap _proxy (Thrift.getStringType _proxy)
                                             (Thrift.getStringType _proxy)
                                             Prelude.True
                                             (Thrift.genText _proxy)
                                             (Thrift.genText _proxy)
                                             . Map.toList)
                                            __field__tags)
                                         : [])))))
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__node_index <- ST.newSTRef Default.def
            __field__data_address <- ST.newSTRef Default.def
            __field__roles <- ST.newSTRef Default.def
            __field__other_addresses <- ST.newSTRef Prelude.Nothing
            __field__location <- ST.newSTRef Prelude.Nothing
            __field__sequencer <- ST.newSTRef Prelude.Nothing
            __field__storage <- ST.newSTRef Prelude.Nothing
            __field__location_per_scope <- ST.newSTRef Default.def
            __field__name <- ST.newSTRef ""
            __field__tags <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI16Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI16
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__node_index
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__data_address
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getSetType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Set.fromList .
                                                                                      Prelude.snd
                                                                                      <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseEnum
                                                                                           _proxy
                                                                                           "Role"))
                                                                        ST.writeSTRef __field__roles
                                                                          _val
                                                                 4 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__other_addresses
                                                                          (Prelude.Just _val)
                                                                 5 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__location
                                                                          (Prelude.Just _val)
                                                                 6 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__sequencer
                                                                          (Prelude.Just _val)
                                                                 7 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__storage
                                                                          (Prelude.Just _val)
                                                                 8 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Map.fromList <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseEnum
                                                                                           _proxy
                                                                                           "LocationScope")
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        Prelude.False)
                                                                        ST.writeSTRef
                                                                          __field__location_per_scope
                                                                          _val
                                                                 9 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__name
                                                                          _val
                                                                 10 | _type ==
                                                                        Thrift.getMapType _proxy
                                                                      ->
                                                                      do !_val <- Trans.lift
                                                                                    (Map.fromList
                                                                                       <$>
                                                                                       Thrift.parseMap
                                                                                         _proxy
                                                                                         (Thrift.parseText
                                                                                            _proxy)
                                                                                         (Thrift.parseText
                                                                                            _proxy)
                                                                                         Prelude.True)
                                                                         ST.writeSTRef __field__tags
                                                                           _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__node_index <- ST.readSTRef
                                                                     __field__node_index
                                             !__val__data_address <- ST.readSTRef
                                                                       __field__data_address
                                             !__val__roles <- ST.readSTRef __field__roles
                                             !__val__other_addresses <- ST.readSTRef
                                                                          __field__other_addresses
                                             !__val__location <- ST.readSTRef __field__location
                                             !__val__sequencer <- ST.readSTRef __field__sequencer
                                             !__val__storage <- ST.readSTRef __field__storage
                                             !__val__location_per_scope <- ST.readSTRef
                                                                             __field__location_per_scope
                                             !__val__name <- ST.readSTRef __field__name
                                             !__val__tags <- ST.readSTRef __field__tags
                                             Prelude.pure
                                               (NodeConfig __val__node_index __val__data_address
                                                  __val__roles
                                                  __val__other_addresses
                                                  __val__location
                                                  __val__sequencer
                                                  __val__storage
                                                  __val__location_per_scope
                                                  __val__name
                                                  __val__tags)
              _idMap
                = HashMap.fromList
                    [("node_index", 1), ("data_address", 2), ("roles", 3),
                     ("other_addresses", 4), ("location", 5), ("sequencer", 6),
                     ("storage", 7), ("location_per_scope", 8), ("name", 9),
                     ("tags", 10)]
            _parse 0)

instance DeepSeq.NFData NodeConfig where
  rnf
    (NodeConfig __field__node_index __field__data_address
       __field__roles __field__other_addresses __field__location
       __field__sequencer __field__storage __field__location_per_scope
       __field__name __field__tags)
    = DeepSeq.rnf __field__node_index `Prelude.seq`
        DeepSeq.rnf __field__data_address `Prelude.seq`
          DeepSeq.rnf __field__roles `Prelude.seq`
            DeepSeq.rnf __field__other_addresses `Prelude.seq`
              DeepSeq.rnf __field__location `Prelude.seq`
                DeepSeq.rnf __field__sequencer `Prelude.seq`
                  DeepSeq.rnf __field__storage `Prelude.seq`
                    DeepSeq.rnf __field__location_per_scope `Prelude.seq`
                      DeepSeq.rnf __field__name `Prelude.seq`
                        DeepSeq.rnf __field__tags `Prelude.seq` ()

instance Default.Default NodeConfig where
  def
    = NodeConfig Default.def Default.def Default.def Prelude.Nothing
        Prelude.Nothing
        Prelude.Nothing
        Prelude.Nothing
        Default.def
        ""
        Default.def

instance Hashable.Hashable NodeConfig where
  hashWithSalt __salt
    (NodeConfig _node_index _data_address _roles _other_addresses
       _location _sequencer _storage _location_per_scope _name _tags)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt
           (Hashable.hashWithSalt
              (Hashable.hashWithSalt
                 (Hashable.hashWithSalt
                    (Hashable.hashWithSalt
                       (Hashable.hashWithSalt
                          (Hashable.hashWithSalt
                             (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _node_index)
                                _data_address)
                             (Set.elems _roles))
                          _other_addresses)
                       _location)
                    _sequencer)
                 _storage)
              ((Prelude.map (\ (_k, _v) -> (_k, _v)) . Map.toAscList)
                 _location_per_scope))
           _name)
        ((Prelude.map (\ (_k, _v) -> (_k, _v)) . Map.toAscList) _tags)

data MaintenanceStatus = MaintenanceStatus_NOT_STARTED
                       | MaintenanceStatus_STARTED
                       | MaintenanceStatus_AWAITING_NODES_CONFIG_CHANGES
                       | MaintenanceStatus_AWAITING_SAFETY_CHECK
                       | MaintenanceStatus_BLOCKED_UNTIL_SAFE
                       | MaintenanceStatus_AWAITING_DATA_REBUILDING
                       | MaintenanceStatus_REBUILDING_IS_BLOCKED
                       | MaintenanceStatus_COMPLETED
                       | MaintenanceStatus_RETRY
                       | MaintenanceStatus_AWAITING_NODES_CONFIG_TRANSITION
                       | MaintenanceStatus_AWAITING_NODE_PROVISIONING
                       | MaintenanceStatus_AWAITING_START_DATA_MIGRATION
                       | MaintenanceStatus_BLOCKED_BY_ADMIN_OVERRIDE
                       | MaintenanceStatus_AWAITING_NODE_TO_BE_ALIVE
                       | MaintenanceStatus__UNKNOWN Prelude.Int
                         deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON MaintenanceStatus where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData MaintenanceStatus where
  rnf __MaintenanceStatus = Prelude.seq __MaintenanceStatus ()

instance Default.Default MaintenanceStatus where
  def = MaintenanceStatus_NOT_STARTED

instance Hashable.Hashable MaintenanceStatus where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum MaintenanceStatus where
  toThriftEnum 0 = MaintenanceStatus_NOT_STARTED
  toThriftEnum 1 = MaintenanceStatus_STARTED
  toThriftEnum 2 = MaintenanceStatus_AWAITING_NODES_CONFIG_CHANGES
  toThriftEnum 3 = MaintenanceStatus_AWAITING_SAFETY_CHECK
  toThriftEnum 4 = MaintenanceStatus_BLOCKED_UNTIL_SAFE
  toThriftEnum 5 = MaintenanceStatus_AWAITING_DATA_REBUILDING
  toThriftEnum 6 = MaintenanceStatus_REBUILDING_IS_BLOCKED
  toThriftEnum 7 = MaintenanceStatus_COMPLETED
  toThriftEnum 8 = MaintenanceStatus_RETRY
  toThriftEnum 9 = MaintenanceStatus_AWAITING_NODES_CONFIG_TRANSITION
  toThriftEnum 10 = MaintenanceStatus_AWAITING_NODE_PROVISIONING
  toThriftEnum 11 = MaintenanceStatus_AWAITING_START_DATA_MIGRATION
  toThriftEnum 12 = MaintenanceStatus_BLOCKED_BY_ADMIN_OVERRIDE
  toThriftEnum 13 = MaintenanceStatus_AWAITING_NODE_TO_BE_ALIVE
  toThriftEnum val = MaintenanceStatus__UNKNOWN val
  fromThriftEnum MaintenanceStatus_NOT_STARTED = 0
  fromThriftEnum MaintenanceStatus_STARTED = 1
  fromThriftEnum MaintenanceStatus_AWAITING_NODES_CONFIG_CHANGES = 2
  fromThriftEnum MaintenanceStatus_AWAITING_SAFETY_CHECK = 3
  fromThriftEnum MaintenanceStatus_BLOCKED_UNTIL_SAFE = 4
  fromThriftEnum MaintenanceStatus_AWAITING_DATA_REBUILDING = 5
  fromThriftEnum MaintenanceStatus_REBUILDING_IS_BLOCKED = 6
  fromThriftEnum MaintenanceStatus_COMPLETED = 7
  fromThriftEnum MaintenanceStatus_RETRY = 8
  fromThriftEnum MaintenanceStatus_AWAITING_NODES_CONFIG_TRANSITION
    = 9
  fromThriftEnum MaintenanceStatus_AWAITING_NODE_PROVISIONING = 10
  fromThriftEnum MaintenanceStatus_AWAITING_START_DATA_MIGRATION = 11
  fromThriftEnum MaintenanceStatus_BLOCKED_BY_ADMIN_OVERRIDE = 12
  fromThriftEnum MaintenanceStatus_AWAITING_NODE_TO_BE_ALIVE = 13
  fromThriftEnum (MaintenanceStatus__UNKNOWN val) = val
  allThriftEnumValues
    = [MaintenanceStatus_NOT_STARTED, MaintenanceStatus_STARTED,
       MaintenanceStatus_AWAITING_NODES_CONFIG_CHANGES,
       MaintenanceStatus_AWAITING_SAFETY_CHECK,
       MaintenanceStatus_BLOCKED_UNTIL_SAFE,
       MaintenanceStatus_AWAITING_DATA_REBUILDING,
       MaintenanceStatus_REBUILDING_IS_BLOCKED,
       MaintenanceStatus_COMPLETED, MaintenanceStatus_RETRY,
       MaintenanceStatus_AWAITING_NODES_CONFIG_TRANSITION,
       MaintenanceStatus_AWAITING_NODE_PROVISIONING,
       MaintenanceStatus_AWAITING_START_DATA_MIGRATION,
       MaintenanceStatus_BLOCKED_BY_ADMIN_OVERRIDE,
       MaintenanceStatus_AWAITING_NODE_TO_BE_ALIVE]
  toThriftEnumEither 0 = Prelude.Right MaintenanceStatus_NOT_STARTED
  toThriftEnumEither 1 = Prelude.Right MaintenanceStatus_STARTED
  toThriftEnumEither 2
    = Prelude.Right MaintenanceStatus_AWAITING_NODES_CONFIG_CHANGES
  toThriftEnumEither 3
    = Prelude.Right MaintenanceStatus_AWAITING_SAFETY_CHECK
  toThriftEnumEither 4
    = Prelude.Right MaintenanceStatus_BLOCKED_UNTIL_SAFE
  toThriftEnumEither 5
    = Prelude.Right MaintenanceStatus_AWAITING_DATA_REBUILDING
  toThriftEnumEither 6
    = Prelude.Right MaintenanceStatus_REBUILDING_IS_BLOCKED
  toThriftEnumEither 7 = Prelude.Right MaintenanceStatus_COMPLETED
  toThriftEnumEither 8 = Prelude.Right MaintenanceStatus_RETRY
  toThriftEnumEither 9
    = Prelude.Right MaintenanceStatus_AWAITING_NODES_CONFIG_TRANSITION
  toThriftEnumEither 10
    = Prelude.Right MaintenanceStatus_AWAITING_NODE_PROVISIONING
  toThriftEnumEither 11
    = Prelude.Right MaintenanceStatus_AWAITING_START_DATA_MIGRATION
  toThriftEnumEither 12
    = Prelude.Right MaintenanceStatus_BLOCKED_BY_ADMIN_OVERRIDE
  toThriftEnumEither 13
    = Prelude.Right MaintenanceStatus_AWAITING_NODE_TO_BE_ALIVE
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum MaintenanceStatus: "
           ++ Prelude.show val)

data ShardMaintenanceProgress = ShardMaintenanceProgress{shardMaintenanceProgress_status
                                                         :: MaintenanceStatus,
                                                         shardMaintenanceProgress_target_states ::
                                                         Set.Set ShardOperationalState,
                                                         shardMaintenanceProgress_created_at ::
                                                         Common.Timestamp,
                                                         shardMaintenanceProgress_last_updated_at ::
                                                         Common.Timestamp,
                                                         shardMaintenanceProgress_associated_group_ids
                                                         :: [Common.MaintenanceGroupID]}
                                deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON ShardMaintenanceProgress where
  toJSON
    (ShardMaintenanceProgress __field__status __field__target_states
       __field__created_at __field__last_updated_at
       __field__associated_group_ids)
    = Aeson.object
        ("status" .= __field__status :
           "target_states" .= __field__target_states :
             "created_at" .= __field__created_at :
               "last_updated_at" .= __field__last_updated_at :
                 "associated_group_ids" .= __field__associated_group_ids :
                   Prelude.mempty)

instance Thrift.ThriftStruct ShardMaintenanceProgress where
  buildStruct _proxy
    (ShardMaintenanceProgress __field__status __field__target_states
       __field__created_at __field__last_updated_at
       __field__associated_group_ids)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "status" (Thrift.getI32Type _proxy) 1 0
           ((Thrift.genI32 _proxy . Prelude.fromIntegral .
               Thrift.fromThriftEnum)
              __field__status)
           :
           Thrift.genField _proxy "target_states" (Thrift.getSetType _proxy) 2
             1
             ((Thrift.genList _proxy (Thrift.getI32Type _proxy)
                 (Thrift.genI32 _proxy . Prelude.fromIntegral .
                    Thrift.fromThriftEnum)
                 . Set.toList)
                __field__target_states)
             :
             Thrift.genField _proxy "created_at" (Thrift.getI64Type _proxy) 3 2
               (Thrift.genI64 _proxy __field__created_at)
               :
               Thrift.genField _proxy "last_updated_at" (Thrift.getI64Type _proxy)
                 4
                 3
                 (Thrift.genI64 _proxy __field__last_updated_at)
                 :
                 Thrift.genField _proxy "associated_group_ids"
                   (Thrift.getListType _proxy)
                   5
                   4
                   (Thrift.genList _proxy (Thrift.getStringType _proxy)
                      (Thrift.genText _proxy)
                      __field__associated_group_ids)
                   : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__status <- ST.newSTRef Default.def
            __field__target_states <- ST.newSTRef Default.def
            __field__created_at <- ST.newSTRef Default.def
            __field__last_updated_at <- ST.newSTRef Default.def
            __field__associated_group_ids <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "MaintenanceStatus")
                                                                        ST.writeSTRef
                                                                          __field__status
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getSetType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Set.fromList .
                                                                                      Prelude.snd
                                                                                      <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseEnum
                                                                                           _proxy
                                                                                           "ShardOperationalState"))
                                                                        ST.writeSTRef
                                                                          __field__target_states
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__created_at
                                                                          _val
                                                                 4 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__last_updated_at
                                                                          _val
                                                                 5 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseText
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__associated_group_ids
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__status <- ST.readSTRef
                                                                 __field__status
                                             !__val__target_states <- ST.readSTRef
                                                                        __field__target_states
                                             !__val__created_at <- ST.readSTRef __field__created_at
                                             !__val__last_updated_at <- ST.readSTRef
                                                                          __field__last_updated_at
                                             !__val__associated_group_ids <- ST.readSTRef
                                                                               __field__associated_group_ids
                                             Prelude.pure
                                               (ShardMaintenanceProgress __val__status
                                                  __val__target_states
                                                  __val__created_at
                                                  __val__last_updated_at
                                                  __val__associated_group_ids)
              _idMap
                = HashMap.fromList
                    [("status", 1), ("target_states", 2), ("created_at", 3),
                     ("last_updated_at", 4), ("associated_group_ids", 5)]
            _parse 0)

instance DeepSeq.NFData ShardMaintenanceProgress where
  rnf
    (ShardMaintenanceProgress __field__status __field__target_states
       __field__created_at __field__last_updated_at
       __field__associated_group_ids)
    = DeepSeq.rnf __field__status `Prelude.seq`
        DeepSeq.rnf __field__target_states `Prelude.seq`
          DeepSeq.rnf __field__created_at `Prelude.seq`
            DeepSeq.rnf __field__last_updated_at `Prelude.seq`
              DeepSeq.rnf __field__associated_group_ids `Prelude.seq` ()

instance Default.Default ShardMaintenanceProgress where
  def
    = ShardMaintenanceProgress Default.def Default.def Default.def
        Default.def
        Default.def

instance Hashable.Hashable ShardMaintenanceProgress where
  hashWithSalt __salt
    (ShardMaintenanceProgress _status _target_states _created_at
       _last_updated_at _associated_group_ids)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt
           (Hashable.hashWithSalt
              (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _status)
                 (Set.elems _target_states))
              _created_at)
           _last_updated_at)
        _associated_group_ids

data SequencerMaintenanceProgress = SequencerMaintenanceProgress{sequencerMaintenanceProgress_status
                                                                 :: MaintenanceStatus,
                                                                 sequencerMaintenanceProgress_target_state
                                                                 :: SequencingState,
                                                                 sequencerMaintenanceProgress_created_at
                                                                 :: Common.Timestamp,
                                                                 sequencerMaintenanceProgress_last_updated_at
                                                                 :: Common.Timestamp,
                                                                 sequencerMaintenanceProgress_associated_group_ids
                                                                 :: [Common.MaintenanceGroupID]}
                                    deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON SequencerMaintenanceProgress where
  toJSON
    (SequencerMaintenanceProgress __field__status __field__target_state
       __field__created_at __field__last_updated_at
       __field__associated_group_ids)
    = Aeson.object
        ("status" .= __field__status :
           "target_state" .= __field__target_state :
             "created_at" .= __field__created_at :
               "last_updated_at" .= __field__last_updated_at :
                 "associated_group_ids" .= __field__associated_group_ids :
                   Prelude.mempty)

instance Thrift.ThriftStruct SequencerMaintenanceProgress where
  buildStruct _proxy
    (SequencerMaintenanceProgress __field__status __field__target_state
       __field__created_at __field__last_updated_at
       __field__associated_group_ids)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "status" (Thrift.getI32Type _proxy) 1 0
           ((Thrift.genI32 _proxy . Prelude.fromIntegral .
               Thrift.fromThriftEnum)
              __field__status)
           :
           Thrift.genField _proxy "target_state" (Thrift.getI32Type _proxy) 2
             1
             ((Thrift.genI32 _proxy . Prelude.fromIntegral .
                 Thrift.fromThriftEnum)
                __field__target_state)
             :
             Thrift.genField _proxy "created_at" (Thrift.getI64Type _proxy) 3 2
               (Thrift.genI64 _proxy __field__created_at)
               :
               Thrift.genField _proxy "last_updated_at" (Thrift.getI64Type _proxy)
                 4
                 3
                 (Thrift.genI64 _proxy __field__last_updated_at)
                 :
                 Thrift.genField _proxy "associated_group_ids"
                   (Thrift.getListType _proxy)
                   5
                   4
                   (Thrift.genList _proxy (Thrift.getStringType _proxy)
                      (Thrift.genText _proxy)
                      __field__associated_group_ids)
                   : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__status <- ST.newSTRef Default.def
            __field__target_state <- ST.newSTRef Default.def
            __field__created_at <- ST.newSTRef Default.def
            __field__last_updated_at <- ST.newSTRef Default.def
            __field__associated_group_ids <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "MaintenanceStatus")
                                                                        ST.writeSTRef
                                                                          __field__status
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "SequencingState")
                                                                        ST.writeSTRef
                                                                          __field__target_state
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__created_at
                                                                          _val
                                                                 4 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__last_updated_at
                                                                          _val
                                                                 5 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseText
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__associated_group_ids
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__status <- ST.readSTRef
                                                                 __field__status
                                             !__val__target_state <- ST.readSTRef
                                                                       __field__target_state
                                             !__val__created_at <- ST.readSTRef __field__created_at
                                             !__val__last_updated_at <- ST.readSTRef
                                                                          __field__last_updated_at
                                             !__val__associated_group_ids <- ST.readSTRef
                                                                               __field__associated_group_ids
                                             Prelude.pure
                                               (SequencerMaintenanceProgress __val__status
                                                  __val__target_state
                                                  __val__created_at
                                                  __val__last_updated_at
                                                  __val__associated_group_ids)
              _idMap
                = HashMap.fromList
                    [("status", 1), ("target_state", 2), ("created_at", 3),
                     ("last_updated_at", 4), ("associated_group_ids", 5)]
            _parse 0)

instance DeepSeq.NFData SequencerMaintenanceProgress where
  rnf
    (SequencerMaintenanceProgress __field__status __field__target_state
       __field__created_at __field__last_updated_at
       __field__associated_group_ids)
    = DeepSeq.rnf __field__status `Prelude.seq`
        DeepSeq.rnf __field__target_state `Prelude.seq`
          DeepSeq.rnf __field__created_at `Prelude.seq`
            DeepSeq.rnf __field__last_updated_at `Prelude.seq`
              DeepSeq.rnf __field__associated_group_ids `Prelude.seq` ()

instance Default.Default SequencerMaintenanceProgress where
  def
    = SequencerMaintenanceProgress Default.def Default.def Default.def
        Default.def
        Default.def

instance Hashable.Hashable SequencerMaintenanceProgress where
  hashWithSalt __salt
    (SequencerMaintenanceProgress _status _target_state _created_at
       _last_updated_at _associated_group_ids)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt
           (Hashable.hashWithSalt
              (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _status)
                 _target_state)
              _created_at)
           _last_updated_at)
        _associated_group_ids

data ShardDataHealth = ShardDataHealth_UNKNOWN
                     | ShardDataHealth_HEALTHY
                     | ShardDataHealth_UNAVAILABLE
                     | ShardDataHealth_LOST_REGIONS
                     | ShardDataHealth_LOST_ALL
                     | ShardDataHealth_EMPTY
                     | ShardDataHealth__UNKNOWN Prelude.Int
                       deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON ShardDataHealth where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData ShardDataHealth where
  rnf __ShardDataHealth = Prelude.seq __ShardDataHealth ()

instance Default.Default ShardDataHealth where
  def = ShardDataHealth_UNKNOWN

instance Hashable.Hashable ShardDataHealth where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum ShardDataHealth where
  toThriftEnum 0 = ShardDataHealth_UNKNOWN
  toThriftEnum 1 = ShardDataHealth_HEALTHY
  toThriftEnum 2 = ShardDataHealth_UNAVAILABLE
  toThriftEnum 3 = ShardDataHealth_LOST_REGIONS
  toThriftEnum 4 = ShardDataHealth_LOST_ALL
  toThriftEnum 5 = ShardDataHealth_EMPTY
  toThriftEnum val = ShardDataHealth__UNKNOWN val
  fromThriftEnum ShardDataHealth_UNKNOWN = 0
  fromThriftEnum ShardDataHealth_HEALTHY = 1
  fromThriftEnum ShardDataHealth_UNAVAILABLE = 2
  fromThriftEnum ShardDataHealth_LOST_REGIONS = 3
  fromThriftEnum ShardDataHealth_LOST_ALL = 4
  fromThriftEnum ShardDataHealth_EMPTY = 5
  fromThriftEnum (ShardDataHealth__UNKNOWN val) = val
  allThriftEnumValues
    = [ShardDataHealth_UNKNOWN, ShardDataHealth_HEALTHY,
       ShardDataHealth_UNAVAILABLE, ShardDataHealth_LOST_REGIONS,
       ShardDataHealth_LOST_ALL, ShardDataHealth_EMPTY]
  toThriftEnumEither 0 = Prelude.Right ShardDataHealth_UNKNOWN
  toThriftEnumEither 1 = Prelude.Right ShardDataHealth_HEALTHY
  toThriftEnumEither 2 = Prelude.Right ShardDataHealth_UNAVAILABLE
  toThriftEnumEither 3 = Prelude.Right ShardDataHealth_LOST_REGIONS
  toThriftEnumEither 4 = Prelude.Right ShardDataHealth_LOST_ALL
  toThriftEnumEither 5 = Prelude.Right ShardDataHealth_EMPTY
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum ShardDataHealth: "
           ++ Prelude.show val)

data ShardOperationalState = ShardOperationalState_UNKNOWN
                           | ShardOperationalState_ENABLED
                           | ShardOperationalState_MAY_DISAPPEAR
                           | ShardOperationalState_DRAINED
                           | ShardOperationalState_MIGRATING_DATA
                           | ShardOperationalState_ENABLING
                           | ShardOperationalState_PROVISIONING
                           | ShardOperationalState_PASSIVE_DRAINING
                           | ShardOperationalState_INVALID
                           | ShardOperationalState__UNKNOWN Prelude.Int
                             deriving (Prelude.Eq, Prelude.Show)

instance Aeson.ToJSON ShardOperationalState where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData ShardOperationalState where
  rnf __ShardOperationalState
    = Prelude.seq __ShardOperationalState ()

instance Default.Default ShardOperationalState where
  def = ShardOperationalState_UNKNOWN

instance Hashable.Hashable ShardOperationalState where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum ShardOperationalState where
  toThriftEnum 0 = ShardOperationalState_UNKNOWN
  toThriftEnum 1 = ShardOperationalState_ENABLED
  toThriftEnum 2 = ShardOperationalState_MAY_DISAPPEAR
  toThriftEnum 3 = ShardOperationalState_DRAINED
  toThriftEnum 51 = ShardOperationalState_MIGRATING_DATA
  toThriftEnum 52 = ShardOperationalState_ENABLING
  toThriftEnum 53 = ShardOperationalState_PROVISIONING
  toThriftEnum 54 = ShardOperationalState_PASSIVE_DRAINING
  toThriftEnum 99 = ShardOperationalState_INVALID
  toThriftEnum val = ShardOperationalState__UNKNOWN val
  fromThriftEnum ShardOperationalState_UNKNOWN = 0
  fromThriftEnum ShardOperationalState_ENABLED = 1
  fromThriftEnum ShardOperationalState_MAY_DISAPPEAR = 2
  fromThriftEnum ShardOperationalState_DRAINED = 3
  fromThriftEnum ShardOperationalState_MIGRATING_DATA = 51
  fromThriftEnum ShardOperationalState_ENABLING = 52
  fromThriftEnum ShardOperationalState_PROVISIONING = 53
  fromThriftEnum ShardOperationalState_PASSIVE_DRAINING = 54
  fromThriftEnum ShardOperationalState_INVALID = 99
  fromThriftEnum (ShardOperationalState__UNKNOWN val) = val
  allThriftEnumValues
    = [ShardOperationalState_UNKNOWN, ShardOperationalState_ENABLED,
       ShardOperationalState_MAY_DISAPPEAR, ShardOperationalState_DRAINED,
       ShardOperationalState_MIGRATING_DATA,
       ShardOperationalState_ENABLING, ShardOperationalState_PROVISIONING,
       ShardOperationalState_PASSIVE_DRAINING,
       ShardOperationalState_INVALID]
  toThriftEnumEither 0 = Prelude.Right ShardOperationalState_UNKNOWN
  toThriftEnumEither 1 = Prelude.Right ShardOperationalState_ENABLED
  toThriftEnumEither 2
    = Prelude.Right ShardOperationalState_MAY_DISAPPEAR
  toThriftEnumEither 3 = Prelude.Right ShardOperationalState_DRAINED
  toThriftEnumEither 51
    = Prelude.Right ShardOperationalState_MIGRATING_DATA
  toThriftEnumEither 52
    = Prelude.Right ShardOperationalState_ENABLING
  toThriftEnumEither 53
    = Prelude.Right ShardOperationalState_PROVISIONING
  toThriftEnumEither 54
    = Prelude.Right ShardOperationalState_PASSIVE_DRAINING
  toThriftEnumEither 99 = Prelude.Right ShardOperationalState_INVALID
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum ShardOperationalState: "
           ++ Prelude.show val)

instance Prelude.Ord ShardOperationalState where
  compare = Function.on Prelude.compare Thrift.fromThriftEnum

data ShardStorageState = ShardStorageState_DISABLED
                       | ShardStorageState_READ_ONLY
                       | ShardStorageState_READ_WRITE
                       | ShardStorageState_DATA_MIGRATION
                       | ShardStorageState__UNKNOWN Prelude.Int
                         deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON ShardStorageState where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData ShardStorageState where
  rnf __ShardStorageState = Prelude.seq __ShardStorageState ()

instance Default.Default ShardStorageState where
  def = ShardStorageState_DISABLED

instance Hashable.Hashable ShardStorageState where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum ShardStorageState where
  toThriftEnum 0 = ShardStorageState_DISABLED
  toThriftEnum 1 = ShardStorageState_READ_ONLY
  toThriftEnum 2 = ShardStorageState_READ_WRITE
  toThriftEnum 3 = ShardStorageState_DATA_MIGRATION
  toThriftEnum val = ShardStorageState__UNKNOWN val
  fromThriftEnum ShardStorageState_DISABLED = 0
  fromThriftEnum ShardStorageState_READ_ONLY = 1
  fromThriftEnum ShardStorageState_READ_WRITE = 2
  fromThriftEnum ShardStorageState_DATA_MIGRATION = 3
  fromThriftEnum (ShardStorageState__UNKNOWN val) = val
  allThriftEnumValues
    = [ShardStorageState_DISABLED, ShardStorageState_READ_ONLY,
       ShardStorageState_READ_WRITE, ShardStorageState_DATA_MIGRATION]
  toThriftEnumEither 0 = Prelude.Right ShardStorageState_DISABLED
  toThriftEnumEither 1 = Prelude.Right ShardStorageState_READ_ONLY
  toThriftEnumEither 2 = Prelude.Right ShardStorageState_READ_WRITE
  toThriftEnumEither 3
    = Prelude.Right ShardStorageState_DATA_MIGRATION
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum ShardStorageState: "
           ++ Prelude.show val)

data ShardState = ShardState{shardState_data_health ::
                             ShardDataHealth,
                             shardState_current_operational_state :: ShardOperationalState,
                             shardState_maintenance :: Prelude.Maybe ShardMaintenanceProgress,
                             shardState_storage_state :: Membership.StorageState,
                             shardState_metadata_state :: Membership.MetaDataStorageState}
                  deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON ShardState where
  toJSON
    (ShardState __field__data_health __field__current_operational_state
       __field__maintenance __field__storage_state
       __field__metadata_state)
    = Aeson.object
        ("data_health" .= __field__data_health :
           "current_operational_state" .= __field__current_operational_state :
             Prelude.maybe Prelude.id ((:) . ("maintenance" .=))
               __field__maintenance
               ("storage_state" .= __field__storage_state :
                  "metadata_state" .= __field__metadata_state : Prelude.mempty))

instance Thrift.ThriftStruct ShardState where
  buildStruct _proxy
    (ShardState __field__data_health __field__current_operational_state
       __field__maintenance __field__storage_state
       __field__metadata_state)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "data_health" (Thrift.getI32Type _proxy) 1
           0
           ((Thrift.genI32 _proxy . Prelude.fromIntegral .
               Thrift.fromThriftEnum)
              __field__data_health)
           :
           Thrift.genField _proxy "current_operational_state"
             (Thrift.getI32Type _proxy)
             3
             1
             ((Thrift.genI32 _proxy . Prelude.fromIntegral .
                 Thrift.fromThriftEnum)
                __field__current_operational_state)
             :
             let (__cereal__maintenance, __id__maintenance)
                   = case __field__maintenance of
                       Prelude.Just _val -> ((:)
                                               (Thrift.genField _proxy "maintenance"
                                                  (Thrift.getStructType _proxy)
                                                  4
                                                  3
                                                  (Thrift.buildStruct _proxy _val)),
                                             4)
                       Prelude.Nothing -> (Prelude.id, 3)
               in
               __cereal__maintenance
                 (Thrift.genField _proxy "storage_state" (Thrift.getI32Type _proxy)
                    5
                    __id__maintenance
                    ((Thrift.genI32 _proxy . Prelude.fromIntegral .
                        Thrift.fromThriftEnum)
                       __field__storage_state)
                    :
                    Thrift.genField _proxy "metadata_state" (Thrift.getI32Type _proxy)
                      6
                      5
                      ((Thrift.genI32 _proxy . Prelude.fromIntegral .
                          Thrift.fromThriftEnum)
                         __field__metadata_state)
                      : []))
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__data_health <- ST.newSTRef Default.def
            __field__current_operational_state <- ST.newSTRef Default.def
            __field__maintenance <- ST.newSTRef Prelude.Nothing
            __field__storage_state <- ST.newSTRef Default.def
            __field__metadata_state <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "ShardDataHealth")
                                                                        ST.writeSTRef
                                                                          __field__data_health
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "ShardOperationalState")
                                                                        ST.writeSTRef
                                                                          __field__current_operational_state
                                                                          _val
                                                                 4 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__maintenance
                                                                          (Prelude.Just _val)
                                                                 5 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "StorageState")
                                                                        ST.writeSTRef
                                                                          __field__storage_state
                                                                          _val
                                                                 6 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "MetaDataStorageState")
                                                                        ST.writeSTRef
                                                                          __field__metadata_state
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__data_health <- ST.readSTRef
                                                                      __field__data_health
                                             !__val__current_operational_state <- ST.readSTRef
                                                                                    __field__current_operational_state
                                             !__val__maintenance <- ST.readSTRef
                                                                      __field__maintenance
                                             !__val__storage_state <- ST.readSTRef
                                                                        __field__storage_state
                                             !__val__metadata_state <- ST.readSTRef
                                                                         __field__metadata_state
                                             Prelude.pure
                                               (ShardState __val__data_health
                                                  __val__current_operational_state
                                                  __val__maintenance
                                                  __val__storage_state
                                                  __val__metadata_state)
              _idMap
                = HashMap.fromList
                    [("data_health", 1), ("current_operational_state", 3),
                     ("maintenance", 4), ("storage_state", 5), ("metadata_state", 6)]
            _parse 0)

instance DeepSeq.NFData ShardState where
  rnf
    (ShardState __field__data_health __field__current_operational_state
       __field__maintenance __field__storage_state
       __field__metadata_state)
    = DeepSeq.rnf __field__data_health `Prelude.seq`
        DeepSeq.rnf __field__current_operational_state `Prelude.seq`
          DeepSeq.rnf __field__maintenance `Prelude.seq`
            DeepSeq.rnf __field__storage_state `Prelude.seq`
              DeepSeq.rnf __field__metadata_state `Prelude.seq` ()

instance Default.Default ShardState where
  def
    = ShardState Default.def Default.def Prelude.Nothing Default.def
        Default.def

instance Hashable.Hashable ShardState where
  hashWithSalt __salt
    (ShardState _data_health _current_operational_state _maintenance
       _storage_state _metadata_state)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt
           (Hashable.hashWithSalt
              (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _data_health)
                 _current_operational_state)
              _maintenance)
           _storage_state)
        _metadata_state

data SequencingState = SequencingState_ENABLED
                     | SequencingState_BOYCOTTED
                     | SequencingState_DISABLED
                     | SequencingState_UNKNOWN
                     | SequencingState__UNKNOWN Prelude.Int
                       deriving (Prelude.Eq, Prelude.Show)

instance Aeson.ToJSON SequencingState where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData SequencingState where
  rnf __SequencingState = Prelude.seq __SequencingState ()

instance Default.Default SequencingState where
  def = SequencingState_ENABLED

instance Hashable.Hashable SequencingState where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum SequencingState where
  toThriftEnum 1 = SequencingState_ENABLED
  toThriftEnum 2 = SequencingState_BOYCOTTED
  toThriftEnum 3 = SequencingState_DISABLED
  toThriftEnum 4 = SequencingState_UNKNOWN
  toThriftEnum val = SequencingState__UNKNOWN val
  fromThriftEnum SequencingState_ENABLED = 1
  fromThriftEnum SequencingState_BOYCOTTED = 2
  fromThriftEnum SequencingState_DISABLED = 3
  fromThriftEnum SequencingState_UNKNOWN = 4
  fromThriftEnum (SequencingState__UNKNOWN val) = val
  allThriftEnumValues
    = [SequencingState_ENABLED, SequencingState_BOYCOTTED,
       SequencingState_DISABLED, SequencingState_UNKNOWN]
  toThriftEnumEither 1 = Prelude.Right SequencingState_ENABLED
  toThriftEnumEither 2 = Prelude.Right SequencingState_BOYCOTTED
  toThriftEnumEither 3 = Prelude.Right SequencingState_DISABLED
  toThriftEnumEither 4 = Prelude.Right SequencingState_UNKNOWN
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum SequencingState: "
           ++ Prelude.show val)

instance Prelude.Ord SequencingState where
  compare = Function.on Prelude.compare Thrift.fromThriftEnum

data SequencerState = SequencerState{sequencerState_state ::
                                     SequencingState,
                                     sequencerState_maintenance ::
                                     Prelude.Maybe SequencerMaintenanceProgress}
                      deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON SequencerState where
  toJSON (SequencerState __field__state __field__maintenance)
    = Aeson.object
        ("state" .= __field__state :
           Prelude.maybe Prelude.id ((:) . ("maintenance" .=))
             __field__maintenance
             Prelude.mempty)

instance Thrift.ThriftStruct SequencerState where
  buildStruct _proxy
    (SequencerState __field__state __field__maintenance)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "state" (Thrift.getI32Type _proxy) 1 0
           ((Thrift.genI32 _proxy . Prelude.fromIntegral .
               Thrift.fromThriftEnum)
              __field__state)
           :
           case __field__maintenance of
             Prelude.Just _val -> Thrift.genField _proxy "maintenance"
                                    (Thrift.getStructType _proxy)
                                    3
                                    1
                                    (Thrift.buildStruct _proxy _val)
                                    : []
             Prelude.Nothing -> [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__state <- ST.newSTRef Default.def
            __field__maintenance <- ST.newSTRef Prelude.Nothing
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "SequencingState")
                                                                        ST.writeSTRef __field__state
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__maintenance
                                                                          (Prelude.Just _val)
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__state <- ST.readSTRef __field__state
                                             !__val__maintenance <- ST.readSTRef
                                                                      __field__maintenance
                                             Prelude.pure
                                               (SequencerState __val__state __val__maintenance)
              _idMap = HashMap.fromList [("state", 1), ("maintenance", 3)]
            _parse 0)

instance DeepSeq.NFData SequencerState where
  rnf (SequencerState __field__state __field__maintenance)
    = DeepSeq.rnf __field__state `Prelude.seq`
        DeepSeq.rnf __field__maintenance `Prelude.seq` ()

instance Default.Default SequencerState where
  def = SequencerState Default.def Prelude.Nothing

instance Hashable.Hashable SequencerState where
  hashWithSalt __salt (SequencerState _state _maintenance)
    = Hashable.hashWithSalt (Hashable.hashWithSalt __salt _state)
        _maintenance

data ServiceState = ServiceState_UNKNOWN
                  | ServiceState_ALIVE
                  | ServiceState_STARTING_UP
                  | ServiceState_SHUTTING_DOWN
                  | ServiceState_DEAD
                  | ServiceState__UNKNOWN Prelude.Int
                    deriving (Prelude.Eq, Prelude.Show)

instance Aeson.ToJSON ServiceState where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData ServiceState where
  rnf __ServiceState = Prelude.seq __ServiceState ()

instance Default.Default ServiceState where
  def = ServiceState_UNKNOWN

instance Hashable.Hashable ServiceState where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum ServiceState where
  toThriftEnum 0 = ServiceState_UNKNOWN
  toThriftEnum 1 = ServiceState_ALIVE
  toThriftEnum 2 = ServiceState_STARTING_UP
  toThriftEnum 3 = ServiceState_SHUTTING_DOWN
  toThriftEnum 5 = ServiceState_DEAD
  toThriftEnum val = ServiceState__UNKNOWN val
  fromThriftEnum ServiceState_UNKNOWN = 0
  fromThriftEnum ServiceState_ALIVE = 1
  fromThriftEnum ServiceState_STARTING_UP = 2
  fromThriftEnum ServiceState_SHUTTING_DOWN = 3
  fromThriftEnum ServiceState_DEAD = 5
  fromThriftEnum (ServiceState__UNKNOWN val) = val
  allThriftEnumValues
    = [ServiceState_UNKNOWN, ServiceState_ALIVE,
       ServiceState_STARTING_UP, ServiceState_SHUTTING_DOWN,
       ServiceState_DEAD]
  toThriftEnumEither 0 = Prelude.Right ServiceState_UNKNOWN
  toThriftEnumEither 1 = Prelude.Right ServiceState_ALIVE
  toThriftEnumEither 2 = Prelude.Right ServiceState_STARTING_UP
  toThriftEnumEither 3 = Prelude.Right ServiceState_SHUTTING_DOWN
  toThriftEnumEither 5 = Prelude.Right ServiceState_DEAD
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum ServiceState: "
           ++ Prelude.show val)

instance Prelude.Ord ServiceState where
  compare = Function.on Prelude.compare Thrift.fromThriftEnum

data ServiceHealthStatus = ServiceHealthStatus_UNKNOWN
                         | ServiceHealthStatus_UNDEFINED
                         | ServiceHealthStatus_HEALTHY
                         | ServiceHealthStatus_OVERLOADED
                         | ServiceHealthStatus_UNHEALTHY
                         | ServiceHealthStatus__UNKNOWN Prelude.Int
                           deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON ServiceHealthStatus where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData ServiceHealthStatus where
  rnf __ServiceHealthStatus = Prelude.seq __ServiceHealthStatus ()

instance Default.Default ServiceHealthStatus where
  def = ServiceHealthStatus_UNKNOWN

instance Hashable.Hashable ServiceHealthStatus where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum ServiceHealthStatus where
  toThriftEnum 0 = ServiceHealthStatus_UNKNOWN
  toThriftEnum 1 = ServiceHealthStatus_UNDEFINED
  toThriftEnum 2 = ServiceHealthStatus_HEALTHY
  toThriftEnum 3 = ServiceHealthStatus_OVERLOADED
  toThriftEnum 4 = ServiceHealthStatus_UNHEALTHY
  toThriftEnum val = ServiceHealthStatus__UNKNOWN val
  fromThriftEnum ServiceHealthStatus_UNKNOWN = 0
  fromThriftEnum ServiceHealthStatus_UNDEFINED = 1
  fromThriftEnum ServiceHealthStatus_HEALTHY = 2
  fromThriftEnum ServiceHealthStatus_OVERLOADED = 3
  fromThriftEnum ServiceHealthStatus_UNHEALTHY = 4
  fromThriftEnum (ServiceHealthStatus__UNKNOWN val) = val
  allThriftEnumValues
    = [ServiceHealthStatus_UNKNOWN, ServiceHealthStatus_UNDEFINED,
       ServiceHealthStatus_HEALTHY, ServiceHealthStatus_OVERLOADED,
       ServiceHealthStatus_UNHEALTHY]
  toThriftEnumEither 0 = Prelude.Right ServiceHealthStatus_UNKNOWN
  toThriftEnumEither 1 = Prelude.Right ServiceHealthStatus_UNDEFINED
  toThriftEnumEither 2 = Prelude.Right ServiceHealthStatus_HEALTHY
  toThriftEnumEither 3 = Prelude.Right ServiceHealthStatus_OVERLOADED
  toThriftEnumEither 4 = Prelude.Right ServiceHealthStatus_UNHEALTHY
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum ServiceHealthStatus: "
           ++ Prelude.show val)

data NodeState = NodeState{nodeState_node_index ::
                           Common.NodeIndex,
                           nodeState_daemon_state :: ServiceState,
                           nodeState_sequencer_state :: Prelude.Maybe SequencerState,
                           nodeState_shard_states :: Prelude.Maybe [ShardState],
                           nodeState_config :: NodeConfig,
                           nodeState_daemon_health_status :: ServiceHealthStatus}
                 deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON NodeState where
  toJSON
    (NodeState __field__node_index __field__daemon_state
       __field__sequencer_state __field__shard_states __field__config
       __field__daemon_health_status)
    = Aeson.object
        ("node_index" .= __field__node_index :
           "daemon_state" .= __field__daemon_state :
             Prelude.maybe Prelude.id ((:) . ("sequencer_state" .=))
               __field__sequencer_state
               (Prelude.maybe Prelude.id ((:) . ("shard_states" .=))
                  __field__shard_states
                  ("config" .= __field__config :
                     "daemon_health_status" .= __field__daemon_health_status :
                       Prelude.mempty)))

instance Thrift.ThriftStruct NodeState where
  buildStruct _proxy
    (NodeState __field__node_index __field__daemon_state
       __field__sequencer_state __field__shard_states __field__config
       __field__daemon_health_status)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "node_index" (Thrift.getI16Type _proxy) 1 0
           (Thrift.genI16 _proxy __field__node_index)
           :
           Thrift.genField _proxy "daemon_state" (Thrift.getI32Type _proxy) 2
             1
             ((Thrift.genI32 _proxy . Prelude.fromIntegral .
                 Thrift.fromThriftEnum)
                __field__daemon_state)
             :
             let (__cereal__sequencer_state, __id__sequencer_state)
                   = case __field__sequencer_state of
                       Prelude.Just _val -> ((:)
                                               (Thrift.genField _proxy "sequencer_state"
                                                  (Thrift.getStructType _proxy)
                                                  3
                                                  2
                                                  (Thrift.buildStruct _proxy _val)),
                                             3)
                       Prelude.Nothing -> (Prelude.id, 2)
               in
               __cereal__sequencer_state
                 (let (__cereal__shard_states, __id__shard_states)
                        = case __field__shard_states of
                            Prelude.Just _val -> ((:)
                                                    (Thrift.genField _proxy "shard_states"
                                                       (Thrift.getListType _proxy)
                                                       4
                                                       __id__sequencer_state
                                                       (Thrift.genList _proxy
                                                          (Thrift.getStructType _proxy)
                                                          (Thrift.buildStruct _proxy)
                                                          _val)),
                                                  4)
                            Prelude.Nothing -> (Prelude.id, __id__sequencer_state)
                    in
                    __cereal__shard_states
                      (Thrift.genField _proxy "config" (Thrift.getStructType _proxy) 5
                         __id__shard_states
                         (Thrift.buildStruct _proxy __field__config)
                         :
                         Thrift.genField _proxy "daemon_health_status"
                           (Thrift.getI32Type _proxy)
                           6
                           5
                           ((Thrift.genI32 _proxy . Prelude.fromIntegral .
                               Thrift.fromThriftEnum)
                              __field__daemon_health_status)
                           : [])))
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__node_index <- ST.newSTRef Default.def
            __field__daemon_state <- ST.newSTRef ServiceState_UNKNOWN
            __field__sequencer_state <- ST.newSTRef Prelude.Nothing
            __field__shard_states <- ST.newSTRef Prelude.Nothing
            __field__config <- ST.newSTRef Default.def
            __field__daemon_health_status <- ST.newSTRef
                                               ServiceHealthStatus_UNKNOWN
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI16Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI16
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__node_index
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "ServiceState")
                                                                        ST.writeSTRef
                                                                          __field__daemon_state
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__sequencer_state
                                                                          (Prelude.Just _val)
                                                                 4 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__shard_states
                                                                          (Prelude.Just _val)
                                                                 5 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__config
                                                                          _val
                                                                 6 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "ServiceHealthStatus")
                                                                        ST.writeSTRef
                                                                          __field__daemon_health_status
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__node_index <- ST.readSTRef
                                                                     __field__node_index
                                             !__val__daemon_state <- ST.readSTRef
                                                                       __field__daemon_state
                                             !__val__sequencer_state <- ST.readSTRef
                                                                          __field__sequencer_state
                                             !__val__shard_states <- ST.readSTRef
                                                                       __field__shard_states
                                             !__val__config <- ST.readSTRef __field__config
                                             !__val__daemon_health_status <- ST.readSTRef
                                                                               __field__daemon_health_status
                                             Prelude.pure
                                               (NodeState __val__node_index __val__daemon_state
                                                  __val__sequencer_state
                                                  __val__shard_states
                                                  __val__config
                                                  __val__daemon_health_status)
              _idMap
                = HashMap.fromList
                    [("node_index", 1), ("daemon_state", 2), ("sequencer_state", 3),
                     ("shard_states", 4), ("config", 5), ("daemon_health_status", 6)]
            _parse 0)

instance DeepSeq.NFData NodeState where
  rnf
    (NodeState __field__node_index __field__daemon_state
       __field__sequencer_state __field__shard_states __field__config
       __field__daemon_health_status)
    = DeepSeq.rnf __field__node_index `Prelude.seq`
        DeepSeq.rnf __field__daemon_state `Prelude.seq`
          DeepSeq.rnf __field__sequencer_state `Prelude.seq`
            DeepSeq.rnf __field__shard_states `Prelude.seq`
              DeepSeq.rnf __field__config `Prelude.seq`
                DeepSeq.rnf __field__daemon_health_status `Prelude.seq` ()

instance Default.Default NodeState where
  def
    = NodeState Default.def ServiceState_UNKNOWN Prelude.Nothing
        Prelude.Nothing
        Default.def
        ServiceHealthStatus_UNKNOWN

instance Hashable.Hashable NodeState where
  hashWithSalt __salt
    (NodeState _node_index _daemon_state _sequencer_state _shard_states
       _config _daemon_health_status)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt
           (Hashable.hashWithSalt
              (Hashable.hashWithSalt
                 (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _node_index)
                    _daemon_state)
                 _sequencer_state)
              _shard_states)
           _config)
        _daemon_health_status

type NodesConfig = [NodeConfig]

type NodesState = [NodeState]

data NodesFilter = NodesFilter{nodesFilter_node ::
                               Prelude.Maybe Common.NodeID,
                               nodesFilter_role :: Prelude.Maybe Common.Role,
                               nodesFilter_location :: Prelude.Maybe Text.Text}
                   deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON NodesFilter where
  toJSON (NodesFilter __field__node __field__role __field__location)
    = Aeson.object
        (Prelude.maybe Prelude.id ((:) . ("node" .=)) __field__node
           (Prelude.maybe Prelude.id ((:) . ("role" .=)) __field__role
              (Prelude.maybe Prelude.id ((:) . ("location" .=)) __field__location
                 Prelude.mempty)))

instance Thrift.ThriftStruct NodesFilter where
  buildStruct _proxy
    (NodesFilter __field__node __field__role __field__location)
    = Thrift.genStruct _proxy
        (let (__cereal__node, __id__node)
               = case __field__node of
                   Prelude.Just _val -> ((:)
                                           (Thrift.genField _proxy "node"
                                              (Thrift.getStructType _proxy)
                                              1
                                              0
                                              (Thrift.buildStruct _proxy _val)),
                                         1)
                   Prelude.Nothing -> (Prelude.id, 0)
           in
           __cereal__node
             (let (__cereal__role, __id__role)
                    = case __field__role of
                        Prelude.Just _val -> ((:)
                                                (Thrift.genField _proxy "role"
                                                   (Thrift.getI32Type _proxy)
                                                   2
                                                   __id__node
                                                   ((Thrift.genI32 _proxy . Prelude.fromIntegral .
                                                       Thrift.fromThriftEnum)
                                                      _val)),
                                              2)
                        Prelude.Nothing -> (Prelude.id, __id__node)
                in
                __cereal__role
                  (case __field__location of
                     Prelude.Just _val -> Thrift.genField _proxy "location"
                                            (Thrift.getStringType _proxy)
                                            3
                                            __id__role
                                            (Thrift.genText _proxy _val)
                                            : []
                     Prelude.Nothing -> [])))
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__node <- ST.newSTRef Prelude.Nothing
            __field__role <- ST.newSTRef Prelude.Nothing
            __field__location <- ST.newSTRef Prelude.Nothing
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__node
                                                                          (Prelude.Just _val)
                                                                 2 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "Role")
                                                                        ST.writeSTRef __field__role
                                                                          (Prelude.Just _val)
                                                                 3 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__location
                                                                          (Prelude.Just _val)
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__node <- ST.readSTRef __field__node
                                             !__val__role <- ST.readSTRef __field__role
                                             !__val__location <- ST.readSTRef __field__location
                                             Prelude.pure
                                               (NodesFilter __val__node __val__role __val__location)
              _idMap
                = HashMap.fromList [("node", 1), ("role", 2), ("location", 3)]
            _parse 0)

instance DeepSeq.NFData NodesFilter where
  rnf (NodesFilter __field__node __field__role __field__location)
    = DeepSeq.rnf __field__node `Prelude.seq`
        DeepSeq.rnf __field__role `Prelude.seq`
          DeepSeq.rnf __field__location `Prelude.seq` ()

instance Default.Default NodesFilter where
  def = NodesFilter Prelude.Nothing Prelude.Nothing Prelude.Nothing

instance Hashable.Hashable NodesFilter where
  hashWithSalt __salt (NodesFilter _node _role _location)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _node) _role)
        _location

data NodesConfigResponse = NodesConfigResponse{nodesConfigResponse_nodes
                                               :: NodesConfig,
                                               nodesConfigResponse_version :: Common.Unsigned64}
                           deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON NodesConfigResponse where
  toJSON (NodesConfigResponse __field__nodes __field__version)
    = Aeson.object
        ("nodes" .= __field__nodes :
           "version" .= __field__version : Prelude.mempty)

instance Thrift.ThriftStruct NodesConfigResponse where
  buildStruct _proxy
    (NodesConfigResponse __field__nodes __field__version)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "nodes" (Thrift.getListType _proxy) 1 0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__nodes)
           :
           Thrift.genField _proxy "version" (Thrift.getI64Type _proxy) 2 1
             (Thrift.genI64 _proxy __field__version)
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__nodes <- ST.newSTRef Default.def
            __field__version <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef __field__nodes
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__version
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__nodes <- ST.readSTRef __field__nodes
                                             !__val__version <- ST.readSTRef __field__version
                                             Prelude.pure
                                               (NodesConfigResponse __val__nodes __val__version)
              _idMap = HashMap.fromList [("nodes", 1), ("version", 2)]
            _parse 0)

instance DeepSeq.NFData NodesConfigResponse where
  rnf (NodesConfigResponse __field__nodes __field__version)
    = DeepSeq.rnf __field__nodes `Prelude.seq`
        DeepSeq.rnf __field__version `Prelude.seq` ()

instance Default.Default NodesConfigResponse where
  def = NodesConfigResponse Default.def Default.def

instance Hashable.Hashable NodesConfigResponse where
  hashWithSalt __salt (NodesConfigResponse _nodes _version)
    = Hashable.hashWithSalt (Hashable.hashWithSalt __salt _nodes)
        _version

data NodesStateResponse = NodesStateResponse{nodesStateResponse_states
                                             :: NodesState,
                                             nodesStateResponse_version :: Common.Unsigned64}
                          deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON NodesStateResponse where
  toJSON (NodesStateResponse __field__states __field__version)
    = Aeson.object
        ("states" .= __field__states :
           "version" .= __field__version : Prelude.mempty)

instance Thrift.ThriftStruct NodesStateResponse where
  buildStruct _proxy
    (NodesStateResponse __field__states __field__version)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "states" (Thrift.getListType _proxy) 1 0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__states)
           :
           Thrift.genField _proxy "version" (Thrift.getI64Type _proxy) 2 1
             (Thrift.genI64 _proxy __field__version)
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__states <- ST.newSTRef Default.def
            __field__version <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__states
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__version
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__states <- ST.readSTRef
                                                                 __field__states
                                             !__val__version <- ST.readSTRef __field__version
                                             Prelude.pure
                                               (NodesStateResponse __val__states __val__version)
              _idMap = HashMap.fromList [("states", 1), ("version", 2)]
            _parse 0)

instance DeepSeq.NFData NodesStateResponse where
  rnf (NodesStateResponse __field__states __field__version)
    = DeepSeq.rnf __field__states `Prelude.seq`
        DeepSeq.rnf __field__version `Prelude.seq` ()

instance Default.Default NodesStateResponse where
  def = NodesStateResponse Default.def Default.def

instance Hashable.Hashable NodesStateResponse where
  hashWithSalt __salt (NodesStateResponse _states _version)
    = Hashable.hashWithSalt (Hashable.hashWithSalt __salt _states)
        _version

data NodesStateRequest = NodesStateRequest{nodesStateRequest_filter
                                           :: Prelude.Maybe NodesFilter,
                                           nodesStateRequest_force :: Prelude.Maybe Prelude.Bool}
                         deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON NodesStateRequest where
  toJSON (NodesStateRequest __field__filter __field__force)
    = Aeson.object
        (Prelude.maybe Prelude.id ((:) . ("filter" .=)) __field__filter
           (Prelude.maybe Prelude.id ((:) . ("force" .=)) __field__force
              Prelude.mempty))

instance Thrift.ThriftStruct NodesStateRequest where
  buildStruct _proxy
    (NodesStateRequest __field__filter __field__force)
    = Thrift.genStruct _proxy
        (let (__cereal__filter, __id__filter)
               = case __field__filter of
                   Prelude.Just _val -> ((:)
                                           (Thrift.genField _proxy "filter"
                                              (Thrift.getStructType _proxy)
                                              1
                                              0
                                              (Thrift.buildStruct _proxy _val)),
                                         1)
                   Prelude.Nothing -> (Prelude.id, 0)
           in
           __cereal__filter
             (case __field__force of
                Prelude.Just _val -> Thrift.genFieldBool _proxy "force" 2
                                       __id__filter
                                       _val
                                       : []
                Prelude.Nothing -> []))
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__filter <- ST.newSTRef Prelude.Nothing
            __field__force <- ST.newSTRef Prelude.Nothing
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__filter
                                                                          (Prelude.Just _val)
                                                                 2 | _type ==
                                                                       Thrift.getBoolType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseBoolF
                                                                                      _proxy
                                                                                      _bool)
                                                                        ST.writeSTRef __field__force
                                                                          (Prelude.Just _val)
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__filter <- ST.readSTRef
                                                                 __field__filter
                                             !__val__force <- ST.readSTRef __field__force
                                             Prelude.pure
                                               (NodesStateRequest __val__filter __val__force)
              _idMap = HashMap.fromList [("filter", 1), ("force", 2)]
            _parse 0)

instance DeepSeq.NFData NodesStateRequest where
  rnf (NodesStateRequest __field__filter __field__force)
    = DeepSeq.rnf __field__filter `Prelude.seq`
        DeepSeq.rnf __field__force `Prelude.seq` ()

instance Default.Default NodesStateRequest where
  def = NodesStateRequest Prelude.Nothing Prelude.Nothing

instance Hashable.Hashable NodesStateRequest where
  hashWithSalt __salt (NodesStateRequest _filter _force)
    = Hashable.hashWithSalt (Hashable.hashWithSalt __salt _filter)
        _force
