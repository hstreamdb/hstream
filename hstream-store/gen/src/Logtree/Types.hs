-----------------------------------------------------------------
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
--  @generated
-----------------------------------------------------------------
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE BangPatterns #-}
{-# OPTIONS_GHC -fno-warn-unused-imports#-}
{-# OPTIONS_GHC -fno-warn-overlapping-patterns#-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns#-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
module Logtree.Types
       (LogTreeInfo(LogTreeInfo, logTreeInfo_version,
                    logTreeInfo_num_logs, logTreeInfo_max_backlog_seconds,
                    logTreeInfo_is_fully_loaded),
        TolerableFailureDomain(TolerableFailureDomain,
                               tolerableFailureDomain_domain_legacy, tolerableFailureDomain_count,
                               tolerableFailureDomain_domain),
        ReplicationInfo(ReplicationInfo, replicationInfo_version,
                        replicationInfo_narrowest_replication_legacy,
                        replicationInfo_smallest_replication_factor,
                        replicationInfo_tolerable_failure_domains,
                        replicationInfo_narrowest_replication),
        LogGroupOperation(LogGroupOperation_APPENDS,
                          LogGroupOperation_READS, LogGroupOperation_APPENDS_OUT,
                          LogGroupOperation__UNKNOWN),
        LogGroupCustomCountersRequest(LogGroupCustomCountersRequest,
                                      logGroupCustomCountersRequest_time_period,
                                      logGroupCustomCountersRequest_keys,
                                      logGroupCustomCountersRequest_log_group_path),
        LogGroupCustomCounter(LogGroupCustomCounter,
                              logGroupCustomCounter_key, logGroupCustomCounter_val),
        LogGroupCustomCountersResponse(LogGroupCustomCountersResponse,
                                       logGroupCustomCountersResponse_counters),
        LogGroupThroughput(LogGroupThroughput,
                           logGroupThroughput_operation, logGroupThroughput_results),
        LogGroupThroughputRequest(LogGroupThroughputRequest,
                                  logGroupThroughputRequest_operation,
                                  logGroupThroughputRequest_time_period,
                                  logGroupThroughputRequest_log_group_name),
        LogGroupThroughputResponse(LogGroupThroughputResponse,
                                   logGroupThroughputResponse_throughput))
       where
import qualified Common.Types as Common
import qualified Control.DeepSeq as DeepSeq
import qualified Control.Exception as Exception
import qualified Control.Monad as Monad
import qualified Control.Monad.ST.Trans as ST
import qualified Control.Monad.Trans.Class as Trans
import qualified Data.Aeson as Aeson
import qualified Data.Aeson.Types as Aeson
import qualified Data.Default as Default
import qualified Data.Function as Function
import qualified Data.HashMap.Strict as HashMap
import qualified Data.Hashable as Hashable
import qualified Data.Int as Int
import qualified Data.List as List
import qualified Data.Map.Strict as Map
import qualified Data.Ord as Ord
import qualified Data.Text as Text
import qualified Data.Text.Encoding as Text
import qualified Prelude as Prelude
import qualified Thrift.Binary.Parser as Parser
import qualified Thrift.CodegenTypesOnly as Thrift
import Control.Applicative ((<|>), (*>), (<*))
import Data.Aeson ((.:), (.:?), (.=), (.!=))
import Data.Monoid ((<>))
import Prelude ((.), (++), (>), (==))
import Prelude ((.), (<$>), (<*>), (>>=), (==), (/=), (<), (++))

data LogTreeInfo = LogTreeInfo{logTreeInfo_version :: Text.Text,
                               logTreeInfo_num_logs :: Int.Int64,
                               logTreeInfo_max_backlog_seconds :: Int.Int64,
                               logTreeInfo_is_fully_loaded :: Prelude.Bool}
                   deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON LogTreeInfo where
  toJSON
    (LogTreeInfo __field__version __field__num_logs
       __field__max_backlog_seconds __field__is_fully_loaded)
    = Aeson.object
        ("version" .= __field__version :
           "num_logs" .= __field__num_logs :
             "max_backlog_seconds" .= __field__max_backlog_seconds :
               "is_fully_loaded" .= __field__is_fully_loaded : Prelude.mempty)

instance Thrift.ThriftStruct LogTreeInfo where
  buildStruct _proxy
    (LogTreeInfo __field__version __field__num_logs
       __field__max_backlog_seconds __field__is_fully_loaded)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "version" (Thrift.getStringType _proxy) 1 0
           (Thrift.genText _proxy __field__version)
           :
           Thrift.genFieldPrim _proxy "num_logs" (Thrift.getI64Type _proxy) 2
             1
             (Thrift.genI64Prim _proxy)
             __field__num_logs
             :
             Thrift.genFieldPrim _proxy "max_backlog_seconds"
               (Thrift.getI64Type _proxy)
               3
               2
               (Thrift.genI64Prim _proxy)
               __field__max_backlog_seconds
               :
               Thrift.genFieldBool _proxy "is_fully_loaded" 4 3
                 __field__is_fully_loaded
                 : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__version <- ST.newSTRef ""
            __field__num_logs <- ST.newSTRef Default.def
            __field__max_backlog_seconds <- ST.newSTRef Default.def
            __field__is_fully_loaded <- ST.newSTRef Prelude.False
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__version
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__num_logs
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__max_backlog_seconds
                                                                          _val
                                                                 4 | _type ==
                                                                       Thrift.getBoolType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseBoolF
                                                                                      _proxy
                                                                                      _bool)
                                                                        ST.writeSTRef
                                                                          __field__is_fully_loaded
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__version <- ST.readSTRef
                                                                  __field__version
                                             !__val__num_logs <- ST.readSTRef __field__num_logs
                                             !__val__max_backlog_seconds <- ST.readSTRef
                                                                              __field__max_backlog_seconds
                                             !__val__is_fully_loaded <- ST.readSTRef
                                                                          __field__is_fully_loaded
                                             Prelude.pure
                                               (LogTreeInfo __val__version __val__num_logs
                                                  __val__max_backlog_seconds
                                                  __val__is_fully_loaded)
              _idMap
                = HashMap.fromList
                    [("version", 1), ("num_logs", 2), ("max_backlog_seconds", 3),
                     ("is_fully_loaded", 4)]
            _parse 0)

instance DeepSeq.NFData LogTreeInfo where
  rnf
    (LogTreeInfo __field__version __field__num_logs
       __field__max_backlog_seconds __field__is_fully_loaded)
    = DeepSeq.rnf __field__version `Prelude.seq`
        DeepSeq.rnf __field__num_logs `Prelude.seq`
          DeepSeq.rnf __field__max_backlog_seconds `Prelude.seq`
            DeepSeq.rnf __field__is_fully_loaded `Prelude.seq` ()

instance Default.Default LogTreeInfo where
  def = LogTreeInfo "" Default.def Default.def Prelude.False

instance Hashable.Hashable LogTreeInfo where
  hashWithSalt __salt
    (LogTreeInfo _version _num_logs _max_backlog_seconds
       _is_fully_loaded)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt
           (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _version)
              _num_logs)
           _max_backlog_seconds)
        _is_fully_loaded

data TolerableFailureDomain = TolerableFailureDomain{tolerableFailureDomain_domain_legacy
                                                     :: Text.Text,
                                                     tolerableFailureDomain_count :: Int.Int32,
                                                     tolerableFailureDomain_domain ::
                                                     Common.LocationScope}
                              deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON TolerableFailureDomain where
  toJSON
    (TolerableFailureDomain __field__domain_legacy __field__count
       __field__domain)
    = Aeson.object
        ("domain_legacy" .= __field__domain_legacy :
           "count" .= __field__count :
             "domain" .= __field__domain : Prelude.mempty)

instance Thrift.ThriftStruct TolerableFailureDomain where
  buildStruct _proxy
    (TolerableFailureDomain __field__domain_legacy __field__count
       __field__domain)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "domain_legacy"
           (Thrift.getStringType _proxy)
           1
           0
           (Thrift.genText _proxy __field__domain_legacy)
           :
           Thrift.genFieldPrim _proxy "count" (Thrift.getI32Type _proxy) 2 1
             (Thrift.genI32Prim _proxy)
             __field__count
             :
             Thrift.genField _proxy "domain" (Thrift.getI32Type _proxy) 3 2
               ((Thrift.genI32 _proxy . Prelude.fromIntegral .
                   Thrift.fromThriftEnum)
                  __field__domain)
               : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__domain_legacy <- ST.newSTRef ""
            __field__count <- ST.newSTRef Default.def
            __field__domain <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__domain_legacy
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI32
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__count
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "LocationScope")
                                                                        ST.writeSTRef
                                                                          __field__domain
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__domain_legacy <- ST.readSTRef
                                                                        __field__domain_legacy
                                             !__val__count <- ST.readSTRef __field__count
                                             !__val__domain <- ST.readSTRef __field__domain
                                             Prelude.pure
                                               (TolerableFailureDomain __val__domain_legacy
                                                  __val__count
                                                  __val__domain)
              _idMap
                = HashMap.fromList
                    [("domain_legacy", 1), ("count", 2), ("domain", 3)]
            _parse 0)

instance DeepSeq.NFData TolerableFailureDomain where
  rnf
    (TolerableFailureDomain __field__domain_legacy __field__count
       __field__domain)
    = DeepSeq.rnf __field__domain_legacy `Prelude.seq`
        DeepSeq.rnf __field__count `Prelude.seq`
          DeepSeq.rnf __field__domain `Prelude.seq` ()

instance Default.Default TolerableFailureDomain where
  def = TolerableFailureDomain "" Default.def Default.def

instance Hashable.Hashable TolerableFailureDomain where
  hashWithSalt __salt
    (TolerableFailureDomain _domain_legacy _count _domain)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt
           (Hashable.hashWithSalt __salt _domain_legacy)
           _count)
        _domain

data ReplicationInfo = ReplicationInfo{replicationInfo_version ::
                                       Text.Text,
                                       replicationInfo_narrowest_replication_legacy ::
                                       Map.Map Text.Text Int.Int32,
                                       replicationInfo_smallest_replication_factor :: Int.Int32,
                                       replicationInfo_tolerable_failure_domains ::
                                       TolerableFailureDomain,
                                       replicationInfo_narrowest_replication ::
                                       Map.Map Common.LocationScope Int.Int32}
                       deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON ReplicationInfo where
  toJSON
    (ReplicationInfo __field__version
       __field__narrowest_replication_legacy
       __field__smallest_replication_factor
       __field__tolerable_failure_domains __field__narrowest_replication)
    = Aeson.object
        ("version" .= __field__version :
           "narrowest_replication_legacy" .=
             __field__narrowest_replication_legacy
             :
             "smallest_replication_factor" .=
               __field__smallest_replication_factor
               :
               "tolerable_failure_domains" .= __field__tolerable_failure_domains :
                 "narrowest_replication" .=
                   Map.mapKeys Thrift.keyToStr __field__narrowest_replication
                   : Prelude.mempty)

instance Thrift.ThriftStruct ReplicationInfo where
  buildStruct _proxy
    (ReplicationInfo __field__version
       __field__narrowest_replication_legacy
       __field__smallest_replication_factor
       __field__tolerable_failure_domains __field__narrowest_replication)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "version" (Thrift.getStringType _proxy) 1 0
           (Thrift.genText _proxy __field__version)
           :
           Thrift.genField _proxy "narrowest_replication_legacy"
             (Thrift.getMapType _proxy)
             2
             1
             ((Thrift.genMap _proxy (Thrift.getStringType _proxy)
                 (Thrift.getI32Type _proxy)
                 Prelude.True
                 (Thrift.genText _proxy)
                 (Thrift.genI32 _proxy)
                 . Map.toList)
                __field__narrowest_replication_legacy)
             :
             Thrift.genFieldPrim _proxy "smallest_replication_factor"
               (Thrift.getI32Type _proxy)
               3
               2
               (Thrift.genI32Prim _proxy)
               __field__smallest_replication_factor
               :
               Thrift.genField _proxy "tolerable_failure_domains"
                 (Thrift.getStructType _proxy)
                 4
                 3
                 (Thrift.buildStruct _proxy __field__tolerable_failure_domains)
                 :
                 Thrift.genField _proxy "narrowest_replication"
                   (Thrift.getMapType _proxy)
                   5
                   4
                   ((Thrift.genMap _proxy (Thrift.getI32Type _proxy)
                       (Thrift.getI32Type _proxy)
                       Prelude.False
                       (Thrift.genI32 _proxy . Prelude.fromIntegral .
                          Thrift.fromThriftEnum)
                       (Thrift.genI32 _proxy)
                       . Map.toList)
                      __field__narrowest_replication)
                   : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__version <- ST.newSTRef ""
            __field__narrowest_replication_legacy <- ST.newSTRef Default.def
            __field__smallest_replication_factor <- ST.newSTRef Default.def
            __field__tolerable_failure_domains <- ST.newSTRef Default.def
            __field__narrowest_replication <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__version
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Map.fromList <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        (Thrift.parseI32
                                                                                           _proxy)
                                                                                        Prelude.True)
                                                                        ST.writeSTRef
                                                                          __field__narrowest_replication_legacy
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI32
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__smallest_replication_factor
                                                                          _val
                                                                 4 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__tolerable_failure_domains
                                                                          _val
                                                                 5 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Map.fromList <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseEnum
                                                                                           _proxy
                                                                                           "LocationScope")
                                                                                        (Thrift.parseI32
                                                                                           _proxy)
                                                                                        Prelude.False)
                                                                        ST.writeSTRef
                                                                          __field__narrowest_replication
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__version <- ST.readSTRef
                                                                  __field__version
                                             !__val__narrowest_replication_legacy <- ST.readSTRef
                                                                                       __field__narrowest_replication_legacy
                                             !__val__smallest_replication_factor <- ST.readSTRef
                                                                                      __field__smallest_replication_factor
                                             !__val__tolerable_failure_domains <- ST.readSTRef
                                                                                    __field__tolerable_failure_domains
                                             !__val__narrowest_replication <- ST.readSTRef
                                                                                __field__narrowest_replication
                                             Prelude.pure
                                               (ReplicationInfo __val__version
                                                  __val__narrowest_replication_legacy
                                                  __val__smallest_replication_factor
                                                  __val__tolerable_failure_domains
                                                  __val__narrowest_replication)
              _idMap
                = HashMap.fromList
                    [("version", 1), ("narrowest_replication_legacy", 2),
                     ("smallest_replication_factor", 3),
                     ("tolerable_failure_domains", 4), ("narrowest_replication", 5)]
            _parse 0)

instance DeepSeq.NFData ReplicationInfo where
  rnf
    (ReplicationInfo __field__version
       __field__narrowest_replication_legacy
       __field__smallest_replication_factor
       __field__tolerable_failure_domains __field__narrowest_replication)
    = DeepSeq.rnf __field__version `Prelude.seq`
        DeepSeq.rnf __field__narrowest_replication_legacy `Prelude.seq`
          DeepSeq.rnf __field__smallest_replication_factor `Prelude.seq`
            DeepSeq.rnf __field__tolerable_failure_domains `Prelude.seq`
              DeepSeq.rnf __field__narrowest_replication `Prelude.seq` ()

instance Default.Default ReplicationInfo where
  def
    = ReplicationInfo "" Default.def Default.def Default.def
        Default.def

instance Hashable.Hashable ReplicationInfo where
  hashWithSalt __salt
    (ReplicationInfo _version _narrowest_replication_legacy
       _smallest_replication_factor _tolerable_failure_domains
       _narrowest_replication)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt
           (Hashable.hashWithSalt
              (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _version)
                 ((Prelude.map (\ (_k, _v) -> (_k, _v)) . Map.toAscList)
                    _narrowest_replication_legacy))
              _smallest_replication_factor)
           _tolerable_failure_domains)
        ((Prelude.map (\ (_k, _v) -> (_k, _v)) . Map.toAscList)
           _narrowest_replication)

data LogGroupOperation = LogGroupOperation_APPENDS
                       | LogGroupOperation_READS
                       | LogGroupOperation_APPENDS_OUT
                       | LogGroupOperation__UNKNOWN Prelude.Int
                         deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON LogGroupOperation where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData LogGroupOperation where
  rnf __LogGroupOperation = Prelude.seq __LogGroupOperation ()

instance Default.Default LogGroupOperation where
  def = LogGroupOperation_APPENDS

instance Hashable.Hashable LogGroupOperation where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum LogGroupOperation where
  toThriftEnum 0 = LogGroupOperation_APPENDS
  toThriftEnum 1 = LogGroupOperation_READS
  toThriftEnum 2 = LogGroupOperation_APPENDS_OUT
  toThriftEnum val = LogGroupOperation__UNKNOWN val
  fromThriftEnum LogGroupOperation_APPENDS = 0
  fromThriftEnum LogGroupOperation_READS = 1
  fromThriftEnum LogGroupOperation_APPENDS_OUT = 2
  fromThriftEnum (LogGroupOperation__UNKNOWN val) = val
  allThriftEnumValues
    = [LogGroupOperation_APPENDS, LogGroupOperation_READS,
       LogGroupOperation_APPENDS_OUT]
  toThriftEnumEither 0 = Prelude.Right LogGroupOperation_APPENDS
  toThriftEnumEither 1 = Prelude.Right LogGroupOperation_READS
  toThriftEnumEither 2 = Prelude.Right LogGroupOperation_APPENDS_OUT
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum LogGroupOperation: "
           ++ Prelude.show val)

data LogGroupCustomCountersRequest = LogGroupCustomCountersRequest{logGroupCustomCountersRequest_time_period
                                                                   :: Int.Int32,
                                                                   logGroupCustomCountersRequest_keys
                                                                   :: [Int.Int16],
                                                                   logGroupCustomCountersRequest_log_group_path
                                                                   :: Text.Text}
                                     deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON LogGroupCustomCountersRequest where
  toJSON
    (LogGroupCustomCountersRequest __field__time_period __field__keys
       __field__log_group_path)
    = Aeson.object
        ("time_period" .= __field__time_period :
           "keys" .= __field__keys :
             "log_group_path" .= __field__log_group_path : Prelude.mempty)

instance Thrift.ThriftStruct LogGroupCustomCountersRequest where
  buildStruct _proxy
    (LogGroupCustomCountersRequest __field__time_period __field__keys
       __field__log_group_path)
    = Thrift.genStruct _proxy
        (Thrift.genFieldPrim _proxy "time_period"
           (Thrift.getI32Type _proxy)
           1
           0
           (Thrift.genI32Prim _proxy)
           __field__time_period
           :
           Thrift.genField _proxy "keys" (Thrift.getListType _proxy) 2 1
             (Thrift.genListPrim _proxy (Thrift.getI16Type _proxy)
                (Thrift.genI16Prim _proxy)
                __field__keys)
             :
             Thrift.genField _proxy "log_group_path"
               (Thrift.getStringType _proxy)
               3
               2
               (Thrift.genText _proxy __field__log_group_path)
               : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__time_period <- ST.newSTRef Default.def
            __field__keys <- ST.newSTRef Default.def
            __field__log_group_path <- ST.newSTRef ""
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI32
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__time_period
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseI16
                                                                                           _proxy))
                                                                        ST.writeSTRef __field__keys
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__log_group_path
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__time_period <- ST.readSTRef
                                                                      __field__time_period
                                             !__val__keys <- ST.readSTRef __field__keys
                                             !__val__log_group_path <- ST.readSTRef
                                                                         __field__log_group_path
                                             Prelude.pure
                                               (LogGroupCustomCountersRequest __val__time_period
                                                  __val__keys
                                                  __val__log_group_path)
              _idMap
                = HashMap.fromList
                    [("time_period", 1), ("keys", 2), ("log_group_path", 3)]
            _parse 0)

instance DeepSeq.NFData LogGroupCustomCountersRequest where
  rnf
    (LogGroupCustomCountersRequest __field__time_period __field__keys
       __field__log_group_path)
    = DeepSeq.rnf __field__time_period `Prelude.seq`
        DeepSeq.rnf __field__keys `Prelude.seq`
          DeepSeq.rnf __field__log_group_path `Prelude.seq` ()

instance Default.Default LogGroupCustomCountersRequest where
  def = LogGroupCustomCountersRequest Default.def Default.def ""

instance Hashable.Hashable LogGroupCustomCountersRequest where
  hashWithSalt __salt
    (LogGroupCustomCountersRequest _time_period _keys _log_group_path)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _time_period)
           _keys)
        _log_group_path

data LogGroupCustomCounter = LogGroupCustomCounter{logGroupCustomCounter_key
                                                   :: Int.Int16,
                                                   logGroupCustomCounter_val :: Int.Int64}
                             deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON LogGroupCustomCounter where
  toJSON (LogGroupCustomCounter __field__key __field__val)
    = Aeson.object
        ("key" .= __field__key : "val" .= __field__val : Prelude.mempty)

instance Thrift.ThriftStruct LogGroupCustomCounter where
  buildStruct _proxy
    (LogGroupCustomCounter __field__key __field__val)
    = Thrift.genStruct _proxy
        (Thrift.genFieldPrim _proxy "key" (Thrift.getI16Type _proxy) 1 0
           (Thrift.genI16Prim _proxy)
           __field__key
           :
           Thrift.genFieldPrim _proxy "val" (Thrift.getI64Type _proxy) 2 1
             (Thrift.genI64Prim _proxy)
             __field__val
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__key <- ST.newSTRef Default.def
            __field__val <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI16Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI16
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__key
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__val
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__key <- ST.readSTRef __field__key
                                             !__val__val <- ST.readSTRef __field__val
                                             Prelude.pure
                                               (LogGroupCustomCounter __val__key __val__val)
              _idMap = HashMap.fromList [("key", 1), ("val", 2)]
            _parse 0)

instance DeepSeq.NFData LogGroupCustomCounter where
  rnf (LogGroupCustomCounter __field__key __field__val)
    = DeepSeq.rnf __field__key `Prelude.seq`
        DeepSeq.rnf __field__val `Prelude.seq` ()

instance Default.Default LogGroupCustomCounter where
  def = LogGroupCustomCounter Default.def Default.def

instance Hashable.Hashable LogGroupCustomCounter where
  hashWithSalt __salt (LogGroupCustomCounter _key _val)
    = Hashable.hashWithSalt (Hashable.hashWithSalt __salt _key) _val

newtype LogGroupCustomCountersResponse = LogGroupCustomCountersResponse{logGroupCustomCountersResponse_counters
                                                                        ::
                                                                        Map.Map Text.Text
                                                                          [LogGroupCustomCounter]}
                                         deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON LogGroupCustomCountersResponse where
  toJSON (LogGroupCustomCountersResponse __field__counters)
    = Aeson.object ("counters" .= __field__counters : Prelude.mempty)

instance Thrift.ThriftStruct LogGroupCustomCountersResponse where
  buildStruct _proxy
    (LogGroupCustomCountersResponse __field__counters)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "counters" (Thrift.getMapType _proxy) 1 0
           ((Thrift.genMap _proxy (Thrift.getStringType _proxy)
               (Thrift.getListType _proxy)
               Prelude.True
               (Thrift.genText _proxy)
               (Thrift.genList _proxy (Thrift.getStructType _proxy)
                  (Thrift.buildStruct _proxy))
               . Map.toList)
              __field__counters)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__counters <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Map.fromList <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        (Prelude.snd
                                                                                           <$>
                                                                                           Thrift.parseList
                                                                                             _proxy
                                                                                             (Thrift.parseStruct
                                                                                                _proxy))
                                                                                        Prelude.True)
                                                                        ST.writeSTRef
                                                                          __field__counters
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__counters <- ST.readSTRef
                                                                   __field__counters
                                             Prelude.pure
                                               (LogGroupCustomCountersResponse __val__counters)
              _idMap = HashMap.fromList [("counters", 1)]
            _parse 0)

instance DeepSeq.NFData LogGroupCustomCountersResponse where
  rnf (LogGroupCustomCountersResponse __field__counters)
    = DeepSeq.rnf __field__counters `Prelude.seq` ()

instance Default.Default LogGroupCustomCountersResponse where
  def = LogGroupCustomCountersResponse Default.def

instance Hashable.Hashable LogGroupCustomCountersResponse where
  hashWithSalt __salt (LogGroupCustomCountersResponse _counters)
    = Hashable.hashWithSalt __salt
        ((Prelude.map (\ (_k, _v) -> (_k, _v)) . Map.toAscList) _counters)

data LogGroupThroughput = LogGroupThroughput{logGroupThroughput_operation
                                             :: LogGroupOperation,
                                             logGroupThroughput_results :: [Int.Int64]}
                          deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON LogGroupThroughput where
  toJSON (LogGroupThroughput __field__operation __field__results)
    = Aeson.object
        ("operation" .= __field__operation :
           "results" .= __field__results : Prelude.mempty)

instance Thrift.ThriftStruct LogGroupThroughput where
  buildStruct _proxy
    (LogGroupThroughput __field__operation __field__results)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "operation" (Thrift.getI32Type _proxy) 1 0
           ((Thrift.genI32 _proxy . Prelude.fromIntegral .
               Thrift.fromThriftEnum)
              __field__operation)
           :
           Thrift.genField _proxy "results" (Thrift.getListType _proxy) 2 1
             (Thrift.genListPrim _proxy (Thrift.getI64Type _proxy)
                (Thrift.genI64Prim _proxy)
                __field__results)
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__operation <- ST.newSTRef Default.def
            __field__results <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "LogGroupOperation")
                                                                        ST.writeSTRef
                                                                          __field__operation
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseI64
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__results
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__operation <- ST.readSTRef
                                                                    __field__operation
                                             !__val__results <- ST.readSTRef __field__results
                                             Prelude.pure
                                               (LogGroupThroughput __val__operation __val__results)
              _idMap = HashMap.fromList [("operation", 1), ("results", 2)]
            _parse 0)

instance DeepSeq.NFData LogGroupThroughput where
  rnf (LogGroupThroughput __field__operation __field__results)
    = DeepSeq.rnf __field__operation `Prelude.seq`
        DeepSeq.rnf __field__results `Prelude.seq` ()

instance Default.Default LogGroupThroughput where
  def = LogGroupThroughput Default.def Default.def

instance Hashable.Hashable LogGroupThroughput where
  hashWithSalt __salt (LogGroupThroughput _operation _results)
    = Hashable.hashWithSalt (Hashable.hashWithSalt __salt _operation)
        _results

data LogGroupThroughputRequest = LogGroupThroughputRequest{logGroupThroughputRequest_operation
                                                           :: Prelude.Maybe LogGroupOperation,
                                                           logGroupThroughputRequest_time_period ::
                                                           Prelude.Maybe [Int.Int32],
                                                           logGroupThroughputRequest_log_group_name
                                                           :: Prelude.Maybe Text.Text}
                                 deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON LogGroupThroughputRequest where
  toJSON
    (LogGroupThroughputRequest __field__operation __field__time_period
       __field__log_group_name)
    = Aeson.object
        (Prelude.maybe Prelude.id ((:) . ("operation" .=))
           __field__operation
           (Prelude.maybe Prelude.id ((:) . ("time_period" .=))
              __field__time_period
              (Prelude.maybe Prelude.id ((:) . ("log_group_name" .=))
                 __field__log_group_name
                 Prelude.mempty)))

instance Thrift.ThriftStruct LogGroupThroughputRequest where
  buildStruct _proxy
    (LogGroupThroughputRequest __field__operation __field__time_period
       __field__log_group_name)
    = Thrift.genStruct _proxy
        (let (__cereal__operation, __id__operation)
               = case __field__operation of
                   Prelude.Just _val -> ((:)
                                           (Thrift.genField _proxy "operation"
                                              (Thrift.getI32Type _proxy)
                                              1
                                              0
                                              ((Thrift.genI32 _proxy . Prelude.fromIntegral .
                                                  Thrift.fromThriftEnum)
                                                 _val)),
                                         1)
                   Prelude.Nothing -> (Prelude.id, 0)
           in
           __cereal__operation
             (let (__cereal__time_period, __id__time_period)
                    = case __field__time_period of
                        Prelude.Just _val -> ((:)
                                                (Thrift.genField _proxy "time_period"
                                                   (Thrift.getListType _proxy)
                                                   2
                                                   __id__operation
                                                   (Thrift.genListPrim _proxy
                                                      (Thrift.getI32Type _proxy)
                                                      (Thrift.genI32Prim _proxy)
                                                      _val)),
                                              2)
                        Prelude.Nothing -> (Prelude.id, __id__operation)
                in
                __cereal__time_period
                  (case __field__log_group_name of
                     Prelude.Just _val -> Thrift.genField _proxy "log_group_name"
                                            (Thrift.getStringType _proxy)
                                            3
                                            __id__time_period
                                            (Thrift.genText _proxy _val)
                                            : []
                     Prelude.Nothing -> [])))
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__operation <- ST.newSTRef Prelude.Nothing
            __field__time_period <- ST.newSTRef Prelude.Nothing
            __field__log_group_name <- ST.newSTRef Prelude.Nothing
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "LogGroupOperation")
                                                                        ST.writeSTRef
                                                                          __field__operation
                                                                          (Prelude.Just _val)
                                                                 2 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseI32
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__time_period
                                                                          (Prelude.Just _val)
                                                                 3 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__log_group_name
                                                                          (Prelude.Just _val)
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__operation <- ST.readSTRef
                                                                    __field__operation
                                             !__val__time_period <- ST.readSTRef
                                                                      __field__time_period
                                             !__val__log_group_name <- ST.readSTRef
                                                                         __field__log_group_name
                                             Prelude.pure
                                               (LogGroupThroughputRequest __val__operation
                                                  __val__time_period
                                                  __val__log_group_name)
              _idMap
                = HashMap.fromList
                    [("operation", 1), ("time_period", 2), ("log_group_name", 3)]
            _parse 0)

instance DeepSeq.NFData LogGroupThroughputRequest where
  rnf
    (LogGroupThroughputRequest __field__operation __field__time_period
       __field__log_group_name)
    = DeepSeq.rnf __field__operation `Prelude.seq`
        DeepSeq.rnf __field__time_period `Prelude.seq`
          DeepSeq.rnf __field__log_group_name `Prelude.seq` ()

instance Default.Default LogGroupThroughputRequest where
  def
    = LogGroupThroughputRequest Prelude.Nothing Prelude.Nothing
        Prelude.Nothing

instance Hashable.Hashable LogGroupThroughputRequest where
  hashWithSalt __salt
    (LogGroupThroughputRequest _operation _time_period _log_group_name)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _operation)
           _time_period)
        _log_group_name

newtype LogGroupThroughputResponse = LogGroupThroughputResponse{logGroupThroughputResponse_throughput
                                                                ::
                                                                Map.Map Text.Text
                                                                  LogGroupThroughput}
                                     deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON LogGroupThroughputResponse where
  toJSON (LogGroupThroughputResponse __field__throughput)
    = Aeson.object
        ("throughput" .= __field__throughput : Prelude.mempty)

instance Thrift.ThriftStruct LogGroupThroughputResponse where
  buildStruct _proxy (LogGroupThroughputResponse __field__throughput)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "throughput" (Thrift.getMapType _proxy) 1 0
           ((Thrift.genMap _proxy (Thrift.getStringType _proxy)
               (Thrift.getStructType _proxy)
               Prelude.True
               (Thrift.genText _proxy)
               (Thrift.buildStruct _proxy)
               . Map.toList)
              __field__throughput)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__throughput <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Map.fromList <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        (Thrift.parseStruct
                                                                                           _proxy)
                                                                                        Prelude.True)
                                                                        ST.writeSTRef
                                                                          __field__throughput
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__throughput <- ST.readSTRef
                                                                     __field__throughput
                                             Prelude.pure
                                               (LogGroupThroughputResponse __val__throughput)
              _idMap = HashMap.fromList [("throughput", 1)]
            _parse 0)

instance DeepSeq.NFData LogGroupThroughputResponse where
  rnf (LogGroupThroughputResponse __field__throughput)
    = DeepSeq.rnf __field__throughput `Prelude.seq` ()

instance Default.Default LogGroupThroughputResponse where
  def = LogGroupThroughputResponse Default.def

instance Hashable.Hashable LogGroupThroughputResponse where
  hashWithSalt __salt (LogGroupThroughputResponse _throughput)
    = Hashable.hashWithSalt __salt
        ((Prelude.map (\ (_k, _v) -> (_k, _v)) . Map.toAscList)
           _throughput)
