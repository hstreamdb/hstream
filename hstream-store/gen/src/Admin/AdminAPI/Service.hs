-----------------------------------------------------------------
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
--  @generated
-----------------------------------------------------------------
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE BangPatterns #-}
{-# OPTIONS_GHC -fno-warn-unused-imports#-}
{-# OPTIONS_GHC -fno-warn-overlapping-patterns#-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns#-}
{-# LANGUAGE GADTs #-}
module Admin.AdminAPI.Service
       (AdminAPICommand(..), reqName', reqParser', respWriter',
        onewayFunctions')
       where
import qualified Admin.Types as Types
import qualified AdminCommands.Types as AdminCommands
import qualified ClusterMembership.Types as ClusterMembership
import qualified Common.Types as Common
import qualified Control.Exception as Exception
import qualified Control.Monad.ST.Trans as ST
import qualified Control.Monad.Trans.Class as Trans
import qualified Data.ByteString.Builder as Builder
import qualified Data.Default as Default
import qualified Data.HashMap.Strict as HashMap
import qualified Data.Int as Int
import qualified Data.Proxy as Proxy
import qualified Data.Text as Text
import qualified Data.Text.Encoding as Text
import qualified Exceptions.Types as Exceptions
import qualified Fb303.FacebookService.Service as FacebookService
import qualified Fb303.Types as Fb303
import qualified Logtree.Types as Logtree
import qualified Maintenance.Types as Maintenance
import qualified Nodes.Types as Nodes
import qualified Prelude as Prelude
import qualified Safety.Types as Safety
import qualified Settings.Types as Settings
import qualified Thrift.Binary.Parser as Parser
import qualified Thrift.Codegen as Thrift
import qualified Thrift.Processor as Thrift
import qualified Thrift.Protocol.ApplicationException.Types
       as Thrift
import Control.Applicative ((<*), (*>))
import Data.Monoid ((<>))
import Prelude ((<$>), (<*>), (++), (.), (==))

data AdminAPICommand a where
  GetNodesConfig ::
    Nodes.NodesFilter -> AdminAPICommand Nodes.NodesConfigResponse
  GetNodesState ::
    Nodes.NodesStateRequest -> AdminAPICommand Nodes.NodesStateResponse
  AddNodes ::
    ClusterMembership.AddNodesRequest ->
      AdminAPICommand ClusterMembership.AddNodesResponse
  UpdateNodes ::
    ClusterMembership.UpdateNodesRequest ->
      AdminAPICommand ClusterMembership.UpdateNodesResponse
  RemoveNodes ::
    ClusterMembership.RemoveNodesRequest ->
      AdminAPICommand ClusterMembership.RemoveNodesResponse
  MarkShardsAsProvisioned ::
    ClusterMembership.MarkShardsAsProvisionedRequest ->
      AdminAPICommand ClusterMembership.MarkShardsAsProvisionedResponse
  BumpNodeGeneration ::
    ClusterMembership.BumpGenerationRequest ->
      AdminAPICommand ClusterMembership.BumpGenerationResponse
  BootstrapCluster ::
    ClusterMembership.BootstrapClusterRequest ->
      AdminAPICommand ClusterMembership.BootstrapClusterResponse
  GetMaintenances ::
    Maintenance.MaintenancesFilter ->
      AdminAPICommand Maintenance.MaintenanceDefinitionResponse
  ApplyMaintenance ::
    Maintenance.MaintenanceDefinition ->
      AdminAPICommand Maintenance.MaintenanceDefinitionResponse
  RemoveMaintenances ::
    Maintenance.RemoveMaintenancesRequest ->
      AdminAPICommand Maintenance.RemoveMaintenancesResponse
  MarkAllShardsUnrecoverable ::
    Maintenance.MarkAllShardsUnrecoverableRequest ->
      AdminAPICommand Maintenance.MarkAllShardsUnrecoverableResponse
  CheckImpact ::
    Safety.CheckImpactRequest ->
      AdminAPICommand Safety.CheckImpactResponse
  GetLogTreeInfo :: AdminAPICommand Logtree.LogTreeInfo
  GetReplicationInfo :: AdminAPICommand Logtree.ReplicationInfo
  GetSettings ::
    Settings.SettingsRequest ->
      AdminAPICommand Settings.SettingsResponse
  ApplySettingOverride ::
    Settings.ApplySettingOverrideRequest -> AdminAPICommand ()
  RemoveSettingOverride ::
    Settings.RemoveSettingOverrideRequest -> AdminAPICommand ()
  TakeLogTreeSnapshot :: Common.Unsigned64 -> AdminAPICommand ()
  TakeMaintenanceLogSnapshot ::
    Common.Unsigned64 -> AdminAPICommand ()
  GetLogGroupThroughput ::
    Logtree.LogGroupThroughputRequest ->
      AdminAPICommand Logtree.LogGroupThroughputResponse
  GetLogGroupCustomCounters ::
    Logtree.LogGroupCustomCountersRequest ->
      AdminAPICommand Logtree.LogGroupCustomCountersResponse
  ExecuteAdminCommand ::
    AdminCommands.AdminCommandRequest ->
      AdminAPICommand AdminCommands.AdminCommandResponse
  GetClusterName :: AdminAPICommand Text.Text
  DumpServerConfigJson :: AdminAPICommand Text.Text
  SuperFacebookService ::
    FacebookService.FacebookServiceCommand a -> AdminAPICommand a

instance Thrift.Processor AdminAPICommand where
  reqName = reqName'
  reqParser = reqParser'
  respWriter = respWriter'
  onewayFns _ = onewayFunctions'

reqName' :: AdminAPICommand a -> Text.Text
reqName' (GetNodesConfig __field__filter) = "getNodesConfig"
reqName' (GetNodesState __field__request) = "getNodesState"
reqName' (AddNodes __field__request) = "addNodes"
reqName' (UpdateNodes __field__request) = "updateNodes"
reqName' (RemoveNodes __field__request) = "removeNodes"
reqName' (MarkShardsAsProvisioned __field__request)
  = "markShardsAsProvisioned"
reqName' (BumpNodeGeneration __field__request)
  = "bumpNodeGeneration"
reqName' (BootstrapCluster __field__request) = "bootstrapCluster"
reqName' (GetMaintenances __field__filter) = "getMaintenances"
reqName' (ApplyMaintenance __field__request) = "applyMaintenance"
reqName' (RemoveMaintenances __field__filter)
  = "removeMaintenances"
reqName' (MarkAllShardsUnrecoverable __field__request)
  = "markAllShardsUnrecoverable"
reqName' (CheckImpact __field__request) = "checkImpact"
reqName' GetLogTreeInfo = "getLogTreeInfo"
reqName' GetReplicationInfo = "getReplicationInfo"
reqName' (GetSettings __field__request) = "getSettings"
reqName' (ApplySettingOverride __field__request)
  = "applySettingOverride"
reqName' (RemoveSettingOverride __field__request)
  = "removeSettingOverride"
reqName' (TakeLogTreeSnapshot __field__min_version)
  = "takeLogTreeSnapshot"
reqName' (TakeMaintenanceLogSnapshot __field__min_version)
  = "takeMaintenanceLogSnapshot"
reqName' (GetLogGroupThroughput __field__request)
  = "getLogGroupThroughput"
reqName' (GetLogGroupCustomCounters __field__request)
  = "getLogGroupCustomCounters"
reqName' (ExecuteAdminCommand __field__request)
  = "executeAdminCommand"
reqName' GetClusterName = "getClusterName"
reqName' DumpServerConfigJson = "dumpServerConfigJson"
reqName' (SuperFacebookService x) = FacebookService.reqName' x

reqParser' ::
             Thrift.Protocol p =>
             Proxy.Proxy p ->
               Text.Text -> Parser.Parser (Thrift.Some AdminAPICommand)
reqParser' _proxy "getNodesConfig"
  = ST.runSTT
      (do Prelude.return ()
          __field__filter <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__filter
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__filter <- ST.readSTRef
                                                               __field__filter
                                           Prelude.pure (Thrift.Some (GetNodesConfig __val__filter))
            _idMap = HashMap.fromList [("filter", 1)]
          _parse 0)
reqParser' _proxy "getNodesState"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure (Thrift.Some (GetNodesState __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "addNodes"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure (Thrift.Some (AddNodes __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "updateNodes"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure (Thrift.Some (UpdateNodes __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "removeNodes"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure (Thrift.Some (RemoveNodes __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "markShardsAsProvisioned"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure
                                             (Thrift.Some (MarkShardsAsProvisioned __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "bumpNodeGeneration"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure
                                             (Thrift.Some (BumpNodeGeneration __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "bootstrapCluster"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure
                                             (Thrift.Some (BootstrapCluster __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "getMaintenances"
  = ST.runSTT
      (do Prelude.return ()
          __field__filter <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__filter
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__filter <- ST.readSTRef
                                                               __field__filter
                                           Prelude.pure
                                             (Thrift.Some (GetMaintenances __val__filter))
            _idMap = HashMap.fromList [("filter", 1)]
          _parse 0)
reqParser' _proxy "applyMaintenance"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure
                                             (Thrift.Some (ApplyMaintenance __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "removeMaintenances"
  = ST.runSTT
      (do Prelude.return ()
          __field__filter <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__filter
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__filter <- ST.readSTRef
                                                               __field__filter
                                           Prelude.pure
                                             (Thrift.Some (RemoveMaintenances __val__filter))
            _idMap = HashMap.fromList [("filter", 1)]
          _parse 0)
reqParser' _proxy "markAllShardsUnrecoverable"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure
                                             (Thrift.Some
                                                (MarkAllShardsUnrecoverable __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "checkImpact"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure (Thrift.Some (CheckImpact __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "getLogTreeInfo"
  = ST.runSTT
      (do Prelude.return ()
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do Prelude.pure (Thrift.Some GetLogTreeInfo)
            _idMap = HashMap.fromList []
          _parse 0)
reqParser' _proxy "getReplicationInfo"
  = ST.runSTT
      (do Prelude.return ()
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do Prelude.pure (Thrift.Some GetReplicationInfo)
            _idMap = HashMap.fromList []
          _parse 0)
reqParser' _proxy "getSettings"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure (Thrift.Some (GetSettings __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "applySettingOverride"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure
                                             (Thrift.Some (ApplySettingOverride __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "removeSettingOverride"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure
                                             (Thrift.Some (RemoveSettingOverride __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "takeLogTreeSnapshot"
  = ST.runSTT
      (do Prelude.return ()
          __field__min_version <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type == Thrift.getI64Type _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseI64
                                                                                    _proxy)
                                                                      ST.writeSTRef
                                                                        __field__min_version
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__min_version <- ST.readSTRef
                                                                    __field__min_version
                                           Prelude.pure
                                             (Thrift.Some (TakeLogTreeSnapshot __val__min_version))
            _idMap = HashMap.fromList [("min_version", 1)]
          _parse 0)
reqParser' _proxy "takeMaintenanceLogSnapshot"
  = ST.runSTT
      (do Prelude.return ()
          __field__min_version <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type == Thrift.getI64Type _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseI64
                                                                                    _proxy)
                                                                      ST.writeSTRef
                                                                        __field__min_version
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__min_version <- ST.readSTRef
                                                                    __field__min_version
                                           Prelude.pure
                                             (Thrift.Some
                                                (TakeMaintenanceLogSnapshot __val__min_version))
            _idMap = HashMap.fromList [("min_version", 1)]
          _parse 0)
reqParser' _proxy "getLogGroupThroughput"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure
                                             (Thrift.Some (GetLogGroupThroughput __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "getLogGroupCustomCounters"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure
                                             (Thrift.Some
                                                (GetLogGroupCustomCounters __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "executeAdminCommand"
  = ST.runSTT
      (do Prelude.return ()
          __field__request <- ST.newSTRef Default.def
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               1 | _type ==
                                                                     Thrift.getStructType _proxy
                                                                   ->
                                                                   do !_val <- Trans.lift
                                                                                 (Thrift.parseStruct
                                                                                    _proxy)
                                                                      ST.writeSTRef __field__request
                                                                        _val
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do !__val__request <- ST.readSTRef
                                                                __field__request
                                           Prelude.pure
                                             (Thrift.Some (ExecuteAdminCommand __val__request))
            _idMap = HashMap.fromList [("request", 1)]
          _parse 0)
reqParser' _proxy "getClusterName"
  = ST.runSTT
      (do Prelude.return ()
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do Prelude.pure (Thrift.Some GetClusterName)
            _idMap = HashMap.fromList []
          _parse 0)
reqParser' _proxy "dumpServerConfigJson"
  = ST.runSTT
      (do Prelude.return ()
          let
            _parse _lastId
              = do _fieldBegin <- Trans.lift
                                    (Thrift.parseFieldBegin _proxy _lastId _idMap)
                   case _fieldBegin of
                     Thrift.FieldBegin _type _id _bool -> do case _id of
                                                               _ -> Trans.lift
                                                                      (Thrift.parseSkip _proxy _type
                                                                         (Prelude.Just _bool))
                                                             _parse _id
                     Thrift.FieldEnd -> do Prelude.pure
                                             (Thrift.Some DumpServerConfigJson)
            _idMap = HashMap.fromList []
          _parse 0)
reqParser' _proxy funName
  = do Thrift.Some x <- FacebookService.reqParser' _proxy funName
       Prelude.return (Thrift.Some (SuperFacebookService x))

respWriter' ::
              Thrift.Protocol p =>
              Proxy.Proxy p ->
                Int.Int32 ->
                  AdminAPICommand a ->
                    Prelude.Either Exception.SomeException a ->
                      (Builder.Builder,
                       Prelude.Maybe (Exception.SomeException, Thrift.Blame))
respWriter' _proxy _seqNum GetNodesConfig{} _r
  = (Thrift.genMsgBegin _proxy "getNodesConfig" _msgType _seqNum <>
       _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.NodeNotReady{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notready" (Thrift.getStructType _proxy) 1
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum GetNodesState{} _r
  = (Thrift.genMsgBegin _proxy "getNodesState" _msgType _seqNum <>
       _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.NodeNotReady{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notready" (Thrift.getStructType _proxy) 1
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum AddNodes{} _r
  = (Thrift.genMsgBegin _proxy "addNodes" _msgType _seqNum <>
       _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.NodeNotReady{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notready" (Thrift.getStructType _proxy) 1
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@ClusterMembership.ClusterMembershipOperationFailed{} <- Exception.fromException
                                                                                            _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "failed_op" (Thrift.getStructType _proxy) 2
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NodesConfigurationManagerError{} <- Exception.fromException
                                                                                   _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "ncm_error" (Thrift.getStructType _proxy) 3
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NotSupported{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "not_supported"
                                   (Thrift.getStructType _proxy)
                                   4
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum UpdateNodes{} _r
  = (Thrift.genMsgBegin _proxy "updateNodes" _msgType _seqNum <>
       _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.NodeNotReady{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notready" (Thrift.getStructType _proxy) 1
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@ClusterMembership.ClusterMembershipOperationFailed{} <- Exception.fromException
                                                                                            _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "failed_op" (Thrift.getStructType _proxy) 2
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NodesConfigurationManagerError{} <- Exception.fromException
                                                                                   _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "ncm_error" (Thrift.getStructType _proxy) 3
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NotSupported{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "not_supported"
                                   (Thrift.getStructType _proxy)
                                   4
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum RemoveNodes{} _r
  = (Thrift.genMsgBegin _proxy "removeNodes" _msgType _seqNum <>
       _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.NodeNotReady{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notready" (Thrift.getStructType _proxy) 1
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@ClusterMembership.ClusterMembershipOperationFailed{} <- Exception.fromException
                                                                                            _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "failed_op" (Thrift.getStructType _proxy) 2
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NodesConfigurationManagerError{} <- Exception.fromException
                                                                                   _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "ncm_error" (Thrift.getStructType _proxy) 3
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NotSupported{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "not_supported"
                                   (Thrift.getStructType _proxy)
                                   4
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum MarkShardsAsProvisioned{} _r
  = (Thrift.genMsgBegin _proxy "markShardsAsProvisioned" _msgType
       _seqNum
       <> _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.NodeNotReady{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notready" (Thrift.getStructType _proxy) 1
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.InvalidRequest{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "invalid_request"
                                   (Thrift.getStructType _proxy)
                                   2
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NodesConfigurationManagerError{} <- Exception.fromException
                                                                                   _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "ncm_error" (Thrift.getStructType _proxy) 3
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NotSupported{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "not_supported"
                                   (Thrift.getStructType _proxy)
                                   4
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum BumpNodeGeneration{} _r
  = (Thrift.genMsgBegin _proxy "bumpNodeGeneration" _msgType _seqNum
       <> _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.NodeNotReady{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notready" (Thrift.getStructType _proxy) 1
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.InvalidRequest{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "invalid_request"
                                   (Thrift.getStructType _proxy)
                                   2
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NodesConfigurationManagerError{} <- Exception.fromException
                                                                                   _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "ncm_error" (Thrift.getStructType _proxy) 3
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NotSupported{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "not_supported"
                                   (Thrift.getStructType _proxy)
                                   4
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum BootstrapCluster{} _r
  = (Thrift.genMsgBegin _proxy "bootstrapCluster" _msgType _seqNum <>
       _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.OperationError{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "error" (Thrift.getStructType _proxy) 1 0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NodesConfigurationManagerError{} <- Exception.fromException
                                                                                   _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "ncm_error" (Thrift.getStructType _proxy) 2
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum GetMaintenances{} _r
  = (Thrift.genMsgBegin _proxy "getMaintenances" _msgType _seqNum <>
       _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.NodeNotReady{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notready" (Thrift.getStructType _proxy) 1
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.InvalidRequest{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "invalid_request"
                                   (Thrift.getStructType _proxy)
                                   3
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.OperationError{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "error" (Thrift.getStructType _proxy) 4 0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NotSupported{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "not_supported"
                                   (Thrift.getStructType _proxy)
                                   5
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum ApplyMaintenance{} _r
  = (Thrift.genMsgBegin _proxy "applyMaintenance" _msgType _seqNum <>
       _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.NodeNotReady{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notready" (Thrift.getStructType _proxy) 1
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.InvalidRequest{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "invalid_request"
                                   (Thrift.getStructType _proxy)
                                   2
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.MaintenanceClash{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "clash" (Thrift.getStructType _proxy) 3 0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.OperationError{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "operation_error"
                                   (Thrift.getStructType _proxy)
                                   4
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NotSupported{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "not_supported"
                                   (Thrift.getStructType _proxy)
                                   5
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum RemoveMaintenances{} _r
  = (Thrift.genMsgBegin _proxy "removeMaintenances" _msgType _seqNum
       <> _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.NodeNotReady{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notready" (Thrift.getStructType _proxy) 1
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.InvalidRequest{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "invalid_request"
                                   (Thrift.getStructType _proxy)
                                   2
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.OperationError{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "operation_error"
                                   (Thrift.getStructType _proxy)
                                   3
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NotSupported{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "not_supported"
                                   (Thrift.getStructType _proxy)
                                   4
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.MaintenanceMatchError{} <- Exception.fromException
                                                                          _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "not_found" (Thrift.getStructType _proxy) 5
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum MarkAllShardsUnrecoverable{} _r
  = (Thrift.genMsgBegin _proxy "markAllShardsUnrecoverable" _msgType
       _seqNum
       <> _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.NodeNotReady{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notready" (Thrift.getStructType _proxy) 1
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.InvalidRequest{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "invalid_request"
                                   (Thrift.getStructType _proxy)
                                   2
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.OperationError{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "operation_error"
                                   (Thrift.getStructType _proxy)
                                   3
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NotSupported{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "not_supported"
                                   (Thrift.getStructType _proxy)
                                   4
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum CheckImpact{} _r
  = (Thrift.genMsgBegin _proxy "checkImpact" _msgType _seqNum <>
       _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.NodeNotReady{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notready" (Thrift.getStructType _proxy) 1
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.OperationError{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "error" (Thrift.getStructType _proxy) 2 0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.InvalidRequest{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "invalid_request"
                                   (Thrift.getStructType _proxy)
                                   3
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NotSupported{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notsupported"
                                   (Thrift.getStructType _proxy)
                                   4
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum GetLogTreeInfo{} _r
  = (Thrift.genMsgBegin _proxy "getLogTreeInfo" _msgType _seqNum <>
       _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum GetReplicationInfo{} _r
  = (Thrift.genMsgBegin _proxy "getReplicationInfo" _msgType _seqNum
       <> _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum GetSettings{} _r
  = (Thrift.genMsgBegin _proxy "getSettings" _msgType _seqNum <>
       _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum ApplySettingOverride{} _r
  = (Thrift.genMsgBegin _proxy "applySettingOverride" _msgType
       _seqNum
       <> _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.InvalidRequest{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "invalid_request"
                                   (Thrift.getStructType _proxy)
                                   1
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.OperationError{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "operation_error"
                                   (Thrift.getStructType _proxy)
                                   2
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2, Thrift.genStruct _proxy [],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum RemoveSettingOverride{} _r
  = (Thrift.genMsgBegin _proxy "removeSettingOverride" _msgType
       _seqNum
       <> _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2, Thrift.genStruct _proxy [],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum TakeLogTreeSnapshot{} _r
  = (Thrift.genMsgBegin _proxy "takeLogTreeSnapshot" _msgType _seqNum
       <> _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.StaleVersion{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "stale" (Thrift.getStructType _proxy) 1 0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NodeNotReady{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notready" (Thrift.getStructType _proxy) 2
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NotSupported{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notsupported"
                                   (Thrift.getStructType _proxy)
                                   3
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2, Thrift.genStruct _proxy [],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum TakeMaintenanceLogSnapshot{} _r
  = (Thrift.genMsgBegin _proxy "takeMaintenanceLogSnapshot" _msgType
       _seqNum
       <> _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.StaleVersion{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "stale" (Thrift.getStructType _proxy) 1 0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NodeNotReady{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notready" (Thrift.getStructType _proxy) 2
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.NotSupported{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notsupported"
                                   (Thrift.getStructType _proxy)
                                   3
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2, Thrift.genStruct _proxy [],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum GetLogGroupThroughput{} _r
  = (Thrift.genMsgBegin _proxy "getLogGroupThroughput" _msgType
       _seqNum
       <> _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum GetLogGroupCustomCounters{} _r
  = (Thrift.genMsgBegin _proxy "getLogGroupCustomCounters" _msgType
       _seqNum
       <> _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.NotSupported{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notsupported"
                                   (Thrift.getStructType _proxy)
                                   1
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.Just
                               _e@Exceptions.InvalidRequest{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "invalid_request"
                                   (Thrift.getStructType _proxy)
                                   2
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum ExecuteAdminCommand{} _r
  = (Thrift.genMsgBegin _proxy "executeAdminCommand" _msgType _seqNum
       <> _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.Just
                               _e@Exceptions.NotSupported{} <- Exception.fromException _ex
                             ->
                             (2,
                              Thrift.genStruct _proxy
                                [Thrift.genField _proxy "notsupported"
                                   (Thrift.getStructType _proxy)
                                   1
                                   0
                                   (Thrift.buildStruct _proxy _e)],
                              Prelude.Just (_ex, Thrift.ClientError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStructType _proxy) 0 0
                                         (Thrift.buildStruct _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum GetClusterName{} _r
  = (Thrift.genMsgBegin _proxy "getClusterName" _msgType _seqNum <>
       _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStringType _proxy) 0 0
                                         (Thrift.genText _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum DumpServerConfigJson{} _r
  = (Thrift.genMsgBegin _proxy "dumpServerConfigJson" _msgType
       _seqNum
       <> _msgBody
       <> Thrift.genMsgEnd _proxy,
     _msgException)
  where
    (_msgType, _msgBody, _msgException)
      = case _r of
          Prelude.Left _ex | Prelude.Just
                               _e@Thrift.ApplicationException{} <- Exception.fromException _ex
                             ->
                             (3, Thrift.buildStruct _proxy _e,
                              Prelude.Just (_ex, Thrift.ServerError))
                           | Prelude.otherwise ->
                             let _e
                                   = Thrift.ApplicationException (Text.pack (Prelude.show _ex))
                                       Thrift.ApplicationExceptionType_InternalError
                               in
                               (3, Thrift.buildStruct _proxy _e,
                                Prelude.Just (Exception.toException _e, Thrift.ServerError))
          Prelude.Right _result -> (2,
                                    Thrift.genStruct _proxy
                                      [Thrift.genField _proxy "" (Thrift.getStringType _proxy) 0 0
                                         (Thrift.genText _proxy _result)],
                                    Prelude.Nothing)
respWriter' _proxy _seqNum (SuperFacebookService _x) _r
  = FacebookService.respWriter' _proxy _seqNum _x _r

onewayFunctions' :: [Text.Text]
onewayFunctions' = [] ++ FacebookService.onewayFunctions'
