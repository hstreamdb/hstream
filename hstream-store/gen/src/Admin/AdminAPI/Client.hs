-----------------------------------------------------------------
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
--  @generated
-----------------------------------------------------------------
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE BangPatterns #-}
{-# OPTIONS_GHC -fno-warn-unused-imports#-}
{-# OPTIONS_GHC -fno-warn-overlapping-patterns#-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns#-}
{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE TypeOperators #-}
module Admin.AdminAPI.Client
       (AdminAPI, getNodesConfig, getNodesConfigIO, send_getNodesConfig,
        _build_getNodesConfig, recv_getNodesConfig, _parse_getNodesConfig,
        getNodesState, getNodesStateIO, send_getNodesState,
        _build_getNodesState, recv_getNodesState, _parse_getNodesState,
        addNodes, addNodesIO, send_addNodes, _build_addNodes,
        recv_addNodes, _parse_addNodes, updateNodes, updateNodesIO,
        send_updateNodes, _build_updateNodes, recv_updateNodes,
        _parse_updateNodes, removeNodes, removeNodesIO, send_removeNodes,
        _build_removeNodes, recv_removeNodes, _parse_removeNodes,
        markShardsAsProvisioned, markShardsAsProvisionedIO,
        send_markShardsAsProvisioned, _build_markShardsAsProvisioned,
        recv_markShardsAsProvisioned, _parse_markShardsAsProvisioned,
        bumpNodeGeneration, bumpNodeGenerationIO, send_bumpNodeGeneration,
        _build_bumpNodeGeneration, recv_bumpNodeGeneration,
        _parse_bumpNodeGeneration, bootstrapCluster, bootstrapClusterIO,
        send_bootstrapCluster, _build_bootstrapCluster,
        recv_bootstrapCluster, _parse_bootstrapCluster, getMaintenances,
        getMaintenancesIO, send_getMaintenances, _build_getMaintenances,
        recv_getMaintenances, _parse_getMaintenances, applyMaintenance,
        applyMaintenanceIO, send_applyMaintenance, _build_applyMaintenance,
        recv_applyMaintenance, _parse_applyMaintenance, removeMaintenances,
        removeMaintenancesIO, send_removeMaintenances,
        _build_removeMaintenances, recv_removeMaintenances,
        _parse_removeMaintenances, markAllShardsUnrecoverable,
        markAllShardsUnrecoverableIO, send_markAllShardsUnrecoverable,
        _build_markAllShardsUnrecoverable, recv_markAllShardsUnrecoverable,
        _parse_markAllShardsUnrecoverable, checkImpact, checkImpactIO,
        send_checkImpact, _build_checkImpact, recv_checkImpact,
        _parse_checkImpact, getLogTreeInfo, getLogTreeInfoIO,
        send_getLogTreeInfo, _build_getLogTreeInfo, recv_getLogTreeInfo,
        _parse_getLogTreeInfo, getReplicationInfo, getReplicationInfoIO,
        send_getReplicationInfo, _build_getReplicationInfo,
        recv_getReplicationInfo, _parse_getReplicationInfo, getSettings,
        getSettingsIO, send_getSettings, _build_getSettings,
        recv_getSettings, _parse_getSettings, applySettingOverride,
        applySettingOverrideIO, send_applySettingOverride,
        _build_applySettingOverride, recv_applySettingOverride,
        _parse_applySettingOverride, removeSettingOverride,
        removeSettingOverrideIO, send_removeSettingOverride,
        _build_removeSettingOverride, recv_removeSettingOverride,
        _parse_removeSettingOverride, takeLogTreeSnapshot,
        takeLogTreeSnapshotIO, send_takeLogTreeSnapshot,
        _build_takeLogTreeSnapshot, recv_takeLogTreeSnapshot,
        _parse_takeLogTreeSnapshot, takeMaintenanceLogSnapshot,
        takeMaintenanceLogSnapshotIO, send_takeMaintenanceLogSnapshot,
        _build_takeMaintenanceLogSnapshot, recv_takeMaintenanceLogSnapshot,
        _parse_takeMaintenanceLogSnapshot, getLogGroupThroughput,
        getLogGroupThroughputIO, send_getLogGroupThroughput,
        _build_getLogGroupThroughput, recv_getLogGroupThroughput,
        _parse_getLogGroupThroughput, getLogGroupCustomCounters,
        getLogGroupCustomCountersIO, send_getLogGroupCustomCounters,
        _build_getLogGroupCustomCounters, recv_getLogGroupCustomCounters,
        _parse_getLogGroupCustomCounters, executeAdminCommand,
        executeAdminCommandIO, send_executeAdminCommand,
        _build_executeAdminCommand, recv_executeAdminCommand,
        _parse_executeAdminCommand, getClusterName, getClusterNameIO,
        send_getClusterName, _build_getClusterName, recv_getClusterName,
        _parse_getClusterName, dumpServerConfigJson,
        dumpServerConfigJsonIO, send_dumpServerConfigJson,
        _build_dumpServerConfigJson, recv_dumpServerConfigJson,
        _parse_dumpServerConfigJson)
       where
import qualified AdminCommands.Types as AdminCommands
import qualified ClusterMembership.Types as ClusterMembership
import qualified Common.Types as Common
import qualified Control.Arrow as Arrow
import qualified Control.Concurrent as Concurrent
import qualified Control.Exception as Exception
import qualified Control.Monad as Monad
import qualified Control.Monad.Trans.Class as Trans
import qualified Control.Monad.Trans.Reader as Reader
import qualified Data.ByteString.Builder as ByteString
import qualified Data.ByteString.Lazy as LBS
import qualified Data.HashMap.Strict as HashMap
import qualified Data.Int as Int
import qualified Data.List as List
import qualified Data.Proxy as Proxy
import qualified Data.Text as Text
import qualified Data.Text.Encoding as Text
import qualified Exceptions.Types as Exceptions
import qualified Fb303.FacebookService.Client as FacebookService
import qualified Fb303.Types as Fb303
import qualified Logtree.Types as Logtree
import qualified Maintenance.Types as Maintenance
import qualified Nodes.Types as Nodes
import qualified Prelude as Prelude
import qualified Safety.Types as Safety
import qualified Settings.Types as Settings
import qualified Thrift.Binary.Parser as Parser
import qualified Thrift.Codegen as Thrift
import qualified Thrift.Protocol.ApplicationException.Types
       as Thrift
import Data.Monoid ((<>))
import Prelude ((==), (=<<), (>>=), (<$>), (.))
import Admin.Types

data AdminAPI

type instance Thrift.Super AdminAPI =
     FacebookService.FacebookService

getNodesConfig ::
                 (Thrift.Protocol p, Thrift.ClientChannel c,
                  (Thrift.<:) s AdminAPI) =>
                 Nodes.NodesFilter -> Thrift.ThriftM p c s Nodes.NodesConfigResponse
getNodesConfig __field__filter
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (getNodesConfigIO _proxy _channel _counter _opts __field__filter)

getNodesConfigIO ::
                   (Thrift.Protocol p, Thrift.ClientChannel c,
                    (Thrift.<:) s AdminAPI) =>
                   Proxy.Proxy p ->
                     c s ->
                       Thrift.Counter ->
                         Thrift.RpcOptions ->
                           Nodes.NodesFilter -> Prelude.IO Nodes.NodesConfigResponse
getNodesConfigIO _proxy _channel _counter _opts __field__filter
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_getNodesConfig _proxy)
       send_getNodesConfig _proxy _channel _counter _sendCob _recvCob
         _opts
         __field__filter
       Thrift.wait _handle

send_getNodesConfig ::
                      (Thrift.Protocol p, Thrift.ClientChannel c,
                       (Thrift.<:) s AdminAPI) =>
                      Proxy.Proxy p ->
                        c s ->
                          Thrift.Counter ->
                            Thrift.SendCallback ->
                              Thrift.RecvCallback ->
                                Thrift.RpcOptions -> Nodes.NodesFilter -> Prelude.IO ()
send_getNodesConfig _proxy _channel _counter _sendCob _recvCob
  _rpcOpts __field__filter
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_getNodesConfig _proxy _seqNum __field__filter))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_getNodesConfig ::
                      (Thrift.Protocol p) =>
                      Proxy.Proxy p ->
                        Thrift.Response ->
                          Prelude.Either Exception.SomeException Nodes.NodesConfigResponse
recv_getNodesConfig _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_getNodesConfig _proxy) _response))

_build_getNodesConfig ::
                        Thrift.Protocol p =>
                        Proxy.Proxy p ->
                          Int.Int32 -> Nodes.NodesFilter -> ByteString.Builder
_build_getNodesConfig _proxy _seqNum __field__filter
  = Thrift.genMsgBegin _proxy "getNodesConfig" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "filter" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__filter)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_getNodesConfig ::
                        Thrift.Protocol p =>
                        Proxy.Proxy p ->
                          Parser.Parser
                            (Prelude.Either Exception.SomeException Nodes.NodesConfigResponse)
_parse_getNodesConfig _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "getNodesConfig: expected reply but got function call"
                    2 | _name == "getNodesConfig" ->
                        do let
                             _idMap
                               = HashMap.fromList [("getNodesConfig_success", 0), ("notready", 1)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodeNotReady)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "getNodesConfig: expected reply but got oneway function call"
                    _ -> Prelude.fail "getNodesConfig: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

getNodesState ::
                (Thrift.Protocol p, Thrift.ClientChannel c,
                 (Thrift.<:) s AdminAPI) =>
                Nodes.NodesStateRequest ->
                  Thrift.ThriftM p c s Nodes.NodesStateResponse
getNodesState __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (getNodesStateIO _proxy _channel _counter _opts __field__request)

getNodesStateIO ::
                  (Thrift.Protocol p, Thrift.ClientChannel c,
                   (Thrift.<:) s AdminAPI) =>
                  Proxy.Proxy p ->
                    c s ->
                      Thrift.Counter ->
                        Thrift.RpcOptions ->
                          Nodes.NodesStateRequest -> Prelude.IO Nodes.NodesStateResponse
getNodesStateIO _proxy _channel _counter _opts __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_getNodesState _proxy)
       send_getNodesState _proxy _channel _counter _sendCob _recvCob _opts
         __field__request
       Thrift.wait _handle

send_getNodesState ::
                     (Thrift.Protocol p, Thrift.ClientChannel c,
                      (Thrift.<:) s AdminAPI) =>
                     Proxy.Proxy p ->
                       c s ->
                         Thrift.Counter ->
                           Thrift.SendCallback ->
                             Thrift.RecvCallback ->
                               Thrift.RpcOptions -> Nodes.NodesStateRequest -> Prelude.IO ()
send_getNodesState _proxy _channel _counter _sendCob _recvCob
  _rpcOpts __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_getNodesState _proxy _seqNum __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_getNodesState ::
                     (Thrift.Protocol p) =>
                     Proxy.Proxy p ->
                       Thrift.Response ->
                         Prelude.Either Exception.SomeException Nodes.NodesStateResponse
recv_getNodesState _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_getNodesState _proxy) _response))

_build_getNodesState ::
                       Thrift.Protocol p =>
                       Proxy.Proxy p ->
                         Int.Int32 -> Nodes.NodesStateRequest -> ByteString.Builder
_build_getNodesState _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "getNodesState" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_getNodesState ::
                       Thrift.Protocol p =>
                       Proxy.Proxy p ->
                         Parser.Parser
                           (Prelude.Either Exception.SomeException Nodes.NodesStateResponse)
_parse_getNodesState _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "getNodesState: expected reply but got function call"
                    2 | _name == "getNodesState" ->
                        do let
                             _idMap
                               = HashMap.fromList [("getNodesState_success", 0), ("notready", 1)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodeNotReady)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "getNodesState: expected reply but got oneway function call"
                    _ -> Prelude.fail "getNodesState: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

addNodes ::
           (Thrift.Protocol p, Thrift.ClientChannel c,
            (Thrift.<:) s AdminAPI) =>
           ClusterMembership.AddNodesRequest ->
             Thrift.ThriftM p c s ClusterMembership.AddNodesResponse
addNodes __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (addNodesIO _proxy _channel _counter _opts __field__request)

addNodesIO ::
             (Thrift.Protocol p, Thrift.ClientChannel c,
              (Thrift.<:) s AdminAPI) =>
             Proxy.Proxy p ->
               c s ->
                 Thrift.Counter ->
                   Thrift.RpcOptions ->
                     ClusterMembership.AddNodesRequest ->
                       Prelude.IO ClusterMembership.AddNodesResponse
addNodesIO _proxy _channel _counter _opts __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_addNodes _proxy)
       send_addNodes _proxy _channel _counter _sendCob _recvCob _opts
         __field__request
       Thrift.wait _handle

send_addNodes ::
                (Thrift.Protocol p, Thrift.ClientChannel c,
                 (Thrift.<:) s AdminAPI) =>
                Proxy.Proxy p ->
                  c s ->
                    Thrift.Counter ->
                      Thrift.SendCallback ->
                        Thrift.RecvCallback ->
                          Thrift.RpcOptions ->
                            ClusterMembership.AddNodesRequest -> Prelude.IO ()
send_addNodes _proxy _channel _counter _sendCob _recvCob _rpcOpts
  __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_addNodes _proxy _seqNum __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_addNodes ::
                (Thrift.Protocol p) =>
                Proxy.Proxy p ->
                  Thrift.Response ->
                    Prelude.Either Exception.SomeException
                      ClusterMembership.AddNodesResponse
recv_addNodes _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_addNodes _proxy) _response))

_build_addNodes ::
                  Thrift.Protocol p =>
                  Proxy.Proxy p ->
                    Int.Int32 ->
                      ClusterMembership.AddNodesRequest -> ByteString.Builder
_build_addNodes _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "addNodes" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_addNodes ::
                  Thrift.Protocol p =>
                  Proxy.Proxy p ->
                    Parser.Parser
                      (Prelude.Either Exception.SomeException
                         ClusterMembership.AddNodesResponse)
_parse_addNodes _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail "addNodes: expected reply but got function call"
                    2 | _name == "addNodes" ->
                        do let
                             _idMap
                               = HashMap.fromList
                                   [("addNodes_success", 0), ("notready", 1), ("failed_op", 2),
                                    ("ncm_error", 3), ("not_supported", 4)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodeNotReady)
                                                                       2 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  ClusterMembership.ClusterMembershipOperationFailed)
                                                                       3 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodesConfigurationManagerError)
                                                                       4 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NotSupported)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "addNodes: expected reply but got oneway function call"
                    _ -> Prelude.fail "addNodes: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

updateNodes ::
              (Thrift.Protocol p, Thrift.ClientChannel c,
               (Thrift.<:) s AdminAPI) =>
              ClusterMembership.UpdateNodesRequest ->
                Thrift.ThriftM p c s ClusterMembership.UpdateNodesResponse
updateNodes __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (updateNodesIO _proxy _channel _counter _opts __field__request)

updateNodesIO ::
                (Thrift.Protocol p, Thrift.ClientChannel c,
                 (Thrift.<:) s AdminAPI) =>
                Proxy.Proxy p ->
                  c s ->
                    Thrift.Counter ->
                      Thrift.RpcOptions ->
                        ClusterMembership.UpdateNodesRequest ->
                          Prelude.IO ClusterMembership.UpdateNodesResponse
updateNodesIO _proxy _channel _counter _opts __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_updateNodes _proxy)
       send_updateNodes _proxy _channel _counter _sendCob _recvCob _opts
         __field__request
       Thrift.wait _handle

send_updateNodes ::
                   (Thrift.Protocol p, Thrift.ClientChannel c,
                    (Thrift.<:) s AdminAPI) =>
                   Proxy.Proxy p ->
                     c s ->
                       Thrift.Counter ->
                         Thrift.SendCallback ->
                           Thrift.RecvCallback ->
                             Thrift.RpcOptions ->
                               ClusterMembership.UpdateNodesRequest -> Prelude.IO ()
send_updateNodes _proxy _channel _counter _sendCob _recvCob
  _rpcOpts __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_updateNodes _proxy _seqNum __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_updateNodes ::
                   (Thrift.Protocol p) =>
                   Proxy.Proxy p ->
                     Thrift.Response ->
                       Prelude.Either Exception.SomeException
                         ClusterMembership.UpdateNodesResponse
recv_updateNodes _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_updateNodes _proxy) _response))

_build_updateNodes ::
                     Thrift.Protocol p =>
                     Proxy.Proxy p ->
                       Int.Int32 ->
                         ClusterMembership.UpdateNodesRequest -> ByteString.Builder
_build_updateNodes _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "updateNodes" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_updateNodes ::
                     Thrift.Protocol p =>
                     Proxy.Proxy p ->
                       Parser.Parser
                         (Prelude.Either Exception.SomeException
                            ClusterMembership.UpdateNodesResponse)
_parse_updateNodes _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "updateNodes: expected reply but got function call"
                    2 | _name == "updateNodes" ->
                        do let
                             _idMap
                               = HashMap.fromList
                                   [("updateNodes_success", 0), ("notready", 1), ("failed_op", 2),
                                    ("ncm_error", 3), ("not_supported", 4)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodeNotReady)
                                                                       2 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  ClusterMembership.ClusterMembershipOperationFailed)
                                                                       3 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodesConfigurationManagerError)
                                                                       4 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NotSupported)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "updateNodes: expected reply but got oneway function call"
                    _ -> Prelude.fail "updateNodes: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

removeNodes ::
              (Thrift.Protocol p, Thrift.ClientChannel c,
               (Thrift.<:) s AdminAPI) =>
              ClusterMembership.RemoveNodesRequest ->
                Thrift.ThriftM p c s ClusterMembership.RemoveNodesResponse
removeNodes __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (removeNodesIO _proxy _channel _counter _opts __field__request)

removeNodesIO ::
                (Thrift.Protocol p, Thrift.ClientChannel c,
                 (Thrift.<:) s AdminAPI) =>
                Proxy.Proxy p ->
                  c s ->
                    Thrift.Counter ->
                      Thrift.RpcOptions ->
                        ClusterMembership.RemoveNodesRequest ->
                          Prelude.IO ClusterMembership.RemoveNodesResponse
removeNodesIO _proxy _channel _counter _opts __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_removeNodes _proxy)
       send_removeNodes _proxy _channel _counter _sendCob _recvCob _opts
         __field__request
       Thrift.wait _handle

send_removeNodes ::
                   (Thrift.Protocol p, Thrift.ClientChannel c,
                    (Thrift.<:) s AdminAPI) =>
                   Proxy.Proxy p ->
                     c s ->
                       Thrift.Counter ->
                         Thrift.SendCallback ->
                           Thrift.RecvCallback ->
                             Thrift.RpcOptions ->
                               ClusterMembership.RemoveNodesRequest -> Prelude.IO ()
send_removeNodes _proxy _channel _counter _sendCob _recvCob
  _rpcOpts __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_removeNodes _proxy _seqNum __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_removeNodes ::
                   (Thrift.Protocol p) =>
                   Proxy.Proxy p ->
                     Thrift.Response ->
                       Prelude.Either Exception.SomeException
                         ClusterMembership.RemoveNodesResponse
recv_removeNodes _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_removeNodes _proxy) _response))

_build_removeNodes ::
                     Thrift.Protocol p =>
                     Proxy.Proxy p ->
                       Int.Int32 ->
                         ClusterMembership.RemoveNodesRequest -> ByteString.Builder
_build_removeNodes _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "removeNodes" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_removeNodes ::
                     Thrift.Protocol p =>
                     Proxy.Proxy p ->
                       Parser.Parser
                         (Prelude.Either Exception.SomeException
                            ClusterMembership.RemoveNodesResponse)
_parse_removeNodes _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "removeNodes: expected reply but got function call"
                    2 | _name == "removeNodes" ->
                        do let
                             _idMap
                               = HashMap.fromList
                                   [("removeNodes_success", 0), ("notready", 1), ("failed_op", 2),
                                    ("ncm_error", 3), ("not_supported", 4)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodeNotReady)
                                                                       2 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  ClusterMembership.ClusterMembershipOperationFailed)
                                                                       3 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodesConfigurationManagerError)
                                                                       4 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NotSupported)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "removeNodes: expected reply but got oneway function call"
                    _ -> Prelude.fail "removeNodes: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

markShardsAsProvisioned ::
                          (Thrift.Protocol p, Thrift.ClientChannel c,
                           (Thrift.<:) s AdminAPI) =>
                          ClusterMembership.MarkShardsAsProvisionedRequest ->
                            Thrift.ThriftM p c s
                              ClusterMembership.MarkShardsAsProvisionedResponse
markShardsAsProvisioned __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (markShardsAsProvisionedIO _proxy _channel _counter _opts
            __field__request)

markShardsAsProvisionedIO ::
                            (Thrift.Protocol p, Thrift.ClientChannel c,
                             (Thrift.<:) s AdminAPI) =>
                            Proxy.Proxy p ->
                              c s ->
                                Thrift.Counter ->
                                  Thrift.RpcOptions ->
                                    ClusterMembership.MarkShardsAsProvisionedRequest ->
                                      Prelude.IO ClusterMembership.MarkShardsAsProvisionedResponse
markShardsAsProvisionedIO _proxy _channel _counter _opts
  __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_markShardsAsProvisioned _proxy)
       send_markShardsAsProvisioned _proxy _channel _counter _sendCob
         _recvCob
         _opts
         __field__request
       Thrift.wait _handle

send_markShardsAsProvisioned ::
                               (Thrift.Protocol p, Thrift.ClientChannel c,
                                (Thrift.<:) s AdminAPI) =>
                               Proxy.Proxy p ->
                                 c s ->
                                   Thrift.Counter ->
                                     Thrift.SendCallback ->
                                       Thrift.RecvCallback ->
                                         Thrift.RpcOptions ->
                                           ClusterMembership.MarkShardsAsProvisionedRequest ->
                                             Prelude.IO ()
send_markShardsAsProvisioned _proxy _channel _counter _sendCob
  _recvCob _rpcOpts __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_markShardsAsProvisioned _proxy _seqNum __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_markShardsAsProvisioned ::
                               (Thrift.Protocol p) =>
                               Proxy.Proxy p ->
                                 Thrift.Response ->
                                   Prelude.Either Exception.SomeException
                                     ClusterMembership.MarkShardsAsProvisionedResponse
recv_markShardsAsProvisioned _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_markShardsAsProvisioned _proxy) _response))

_build_markShardsAsProvisioned ::
                                 Thrift.Protocol p =>
                                 Proxy.Proxy p ->
                                   Int.Int32 ->
                                     ClusterMembership.MarkShardsAsProvisionedRequest ->
                                       ByteString.Builder
_build_markShardsAsProvisioned _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "markShardsAsProvisioned" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_markShardsAsProvisioned ::
                                 Thrift.Protocol p =>
                                 Proxy.Proxy p ->
                                   Parser.Parser
                                     (Prelude.Either Exception.SomeException
                                        ClusterMembership.MarkShardsAsProvisionedResponse)
_parse_markShardsAsProvisioned _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "markShardsAsProvisioned: expected reply but got function call"
                    2 | _name == "markShardsAsProvisioned" ->
                        do let
                             _idMap
                               = HashMap.fromList
                                   [("markShardsAsProvisioned_success", 0), ("notready", 1),
                                    ("invalid_request", 2), ("ncm_error", 3), ("not_supported", 4)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodeNotReady)
                                                                       2 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.InvalidRequest)
                                                                       3 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodesConfigurationManagerError)
                                                                       4 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NotSupported)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "markShardsAsProvisioned: expected reply but got oneway function call"
                    _ -> Prelude.fail "markShardsAsProvisioned: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

bumpNodeGeneration ::
                     (Thrift.Protocol p, Thrift.ClientChannel c,
                      (Thrift.<:) s AdminAPI) =>
                     ClusterMembership.BumpGenerationRequest ->
                       Thrift.ThriftM p c s ClusterMembership.BumpGenerationResponse
bumpNodeGeneration __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (bumpNodeGenerationIO _proxy _channel _counter _opts
            __field__request)

bumpNodeGenerationIO ::
                       (Thrift.Protocol p, Thrift.ClientChannel c,
                        (Thrift.<:) s AdminAPI) =>
                       Proxy.Proxy p ->
                         c s ->
                           Thrift.Counter ->
                             Thrift.RpcOptions ->
                               ClusterMembership.BumpGenerationRequest ->
                                 Prelude.IO ClusterMembership.BumpGenerationResponse
bumpNodeGenerationIO _proxy _channel _counter _opts
  __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_bumpNodeGeneration _proxy)
       send_bumpNodeGeneration _proxy _channel _counter _sendCob _recvCob
         _opts
         __field__request
       Thrift.wait _handle

send_bumpNodeGeneration ::
                          (Thrift.Protocol p, Thrift.ClientChannel c,
                           (Thrift.<:) s AdminAPI) =>
                          Proxy.Proxy p ->
                            c s ->
                              Thrift.Counter ->
                                Thrift.SendCallback ->
                                  Thrift.RecvCallback ->
                                    Thrift.RpcOptions ->
                                      ClusterMembership.BumpGenerationRequest -> Prelude.IO ()
send_bumpNodeGeneration _proxy _channel _counter _sendCob _recvCob
  _rpcOpts __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_bumpNodeGeneration _proxy _seqNum __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_bumpNodeGeneration ::
                          (Thrift.Protocol p) =>
                          Proxy.Proxy p ->
                            Thrift.Response ->
                              Prelude.Either Exception.SomeException
                                ClusterMembership.BumpGenerationResponse
recv_bumpNodeGeneration _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_bumpNodeGeneration _proxy) _response))

_build_bumpNodeGeneration ::
                            Thrift.Protocol p =>
                            Proxy.Proxy p ->
                              Int.Int32 ->
                                ClusterMembership.BumpGenerationRequest -> ByteString.Builder
_build_bumpNodeGeneration _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "bumpNodeGeneration" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_bumpNodeGeneration ::
                            Thrift.Protocol p =>
                            Proxy.Proxy p ->
                              Parser.Parser
                                (Prelude.Either Exception.SomeException
                                   ClusterMembership.BumpGenerationResponse)
_parse_bumpNodeGeneration _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "bumpNodeGeneration: expected reply but got function call"
                    2 | _name == "bumpNodeGeneration" ->
                        do let
                             _idMap
                               = HashMap.fromList
                                   [("bumpNodeGeneration_success", 0), ("notready", 1),
                                    ("invalid_request", 2), ("ncm_error", 3), ("not_supported", 4)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodeNotReady)
                                                                       2 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.InvalidRequest)
                                                                       3 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodesConfigurationManagerError)
                                                                       4 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NotSupported)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "bumpNodeGeneration: expected reply but got oneway function call"
                    _ -> Prelude.fail "bumpNodeGeneration: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

bootstrapCluster ::
                   (Thrift.Protocol p, Thrift.ClientChannel c,
                    (Thrift.<:) s AdminAPI) =>
                   ClusterMembership.BootstrapClusterRequest ->
                     Thrift.ThriftM p c s ClusterMembership.BootstrapClusterResponse
bootstrapCluster __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (bootstrapClusterIO _proxy _channel _counter _opts
            __field__request)

bootstrapClusterIO ::
                     (Thrift.Protocol p, Thrift.ClientChannel c,
                      (Thrift.<:) s AdminAPI) =>
                     Proxy.Proxy p ->
                       c s ->
                         Thrift.Counter ->
                           Thrift.RpcOptions ->
                             ClusterMembership.BootstrapClusterRequest ->
                               Prelude.IO ClusterMembership.BootstrapClusterResponse
bootstrapClusterIO _proxy _channel _counter _opts __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_bootstrapCluster _proxy)
       send_bootstrapCluster _proxy _channel _counter _sendCob _recvCob
         _opts
         __field__request
       Thrift.wait _handle

send_bootstrapCluster ::
                        (Thrift.Protocol p, Thrift.ClientChannel c,
                         (Thrift.<:) s AdminAPI) =>
                        Proxy.Proxy p ->
                          c s ->
                            Thrift.Counter ->
                              Thrift.SendCallback ->
                                Thrift.RecvCallback ->
                                  Thrift.RpcOptions ->
                                    ClusterMembership.BootstrapClusterRequest -> Prelude.IO ()
send_bootstrapCluster _proxy _channel _counter _sendCob _recvCob
  _rpcOpts __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_bootstrapCluster _proxy _seqNum __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_bootstrapCluster ::
                        (Thrift.Protocol p) =>
                        Proxy.Proxy p ->
                          Thrift.Response ->
                            Prelude.Either Exception.SomeException
                              ClusterMembership.BootstrapClusterResponse
recv_bootstrapCluster _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_bootstrapCluster _proxy) _response))

_build_bootstrapCluster ::
                          Thrift.Protocol p =>
                          Proxy.Proxy p ->
                            Int.Int32 ->
                              ClusterMembership.BootstrapClusterRequest -> ByteString.Builder
_build_bootstrapCluster _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "bootstrapCluster" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_bootstrapCluster ::
                          Thrift.Protocol p =>
                          Proxy.Proxy p ->
                            Parser.Parser
                              (Prelude.Either Exception.SomeException
                                 ClusterMembership.BootstrapClusterResponse)
_parse_bootstrapCluster _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "bootstrapCluster: expected reply but got function call"
                    2 | _name == "bootstrapCluster" ->
                        do let
                             _idMap
                               = HashMap.fromList
                                   [("bootstrapCluster_success", 0), ("error", 1), ("ncm_error", 2)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.OperationError)
                                                                       2 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodesConfigurationManagerError)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "bootstrapCluster: expected reply but got oneway function call"
                    _ -> Prelude.fail "bootstrapCluster: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

getMaintenances ::
                  (Thrift.Protocol p, Thrift.ClientChannel c,
                   (Thrift.<:) s AdminAPI) =>
                  Maintenance.MaintenancesFilter ->
                    Thrift.ThriftM p c s Maintenance.MaintenanceDefinitionResponse
getMaintenances __field__filter
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (getMaintenancesIO _proxy _channel _counter _opts __field__filter)

getMaintenancesIO ::
                    (Thrift.Protocol p, Thrift.ClientChannel c,
                     (Thrift.<:) s AdminAPI) =>
                    Proxy.Proxy p ->
                      c s ->
                        Thrift.Counter ->
                          Thrift.RpcOptions ->
                            Maintenance.MaintenancesFilter ->
                              Prelude.IO Maintenance.MaintenanceDefinitionResponse
getMaintenancesIO _proxy _channel _counter _opts __field__filter
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_getMaintenances _proxy)
       send_getMaintenances _proxy _channel _counter _sendCob _recvCob
         _opts
         __field__filter
       Thrift.wait _handle

send_getMaintenances ::
                       (Thrift.Protocol p, Thrift.ClientChannel c,
                        (Thrift.<:) s AdminAPI) =>
                       Proxy.Proxy p ->
                         c s ->
                           Thrift.Counter ->
                             Thrift.SendCallback ->
                               Thrift.RecvCallback ->
                                 Thrift.RpcOptions ->
                                   Maintenance.MaintenancesFilter -> Prelude.IO ()
send_getMaintenances _proxy _channel _counter _sendCob _recvCob
  _rpcOpts __field__filter
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_getMaintenances _proxy _seqNum __field__filter))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_getMaintenances ::
                       (Thrift.Protocol p) =>
                       Proxy.Proxy p ->
                         Thrift.Response ->
                           Prelude.Either Exception.SomeException
                             Maintenance.MaintenanceDefinitionResponse
recv_getMaintenances _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_getMaintenances _proxy) _response))

_build_getMaintenances ::
                         Thrift.Protocol p =>
                         Proxy.Proxy p ->
                           Int.Int32 -> Maintenance.MaintenancesFilter -> ByteString.Builder
_build_getMaintenances _proxy _seqNum __field__filter
  = Thrift.genMsgBegin _proxy "getMaintenances" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "filter" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__filter)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_getMaintenances ::
                         Thrift.Protocol p =>
                         Proxy.Proxy p ->
                           Parser.Parser
                             (Prelude.Either Exception.SomeException
                                Maintenance.MaintenanceDefinitionResponse)
_parse_getMaintenances _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "getMaintenances: expected reply but got function call"
                    2 | _name == "getMaintenances" ->
                        do let
                             _idMap
                               = HashMap.fromList
                                   [("getMaintenances_success", 0), ("notready", 1),
                                    ("invalid_request", 3), ("error", 4), ("not_supported", 5)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodeNotReady)
                                                                       3 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.InvalidRequest)
                                                                       4 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.OperationError)
                                                                       5 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NotSupported)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "getMaintenances: expected reply but got oneway function call"
                    _ -> Prelude.fail "getMaintenances: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

applyMaintenance ::
                   (Thrift.Protocol p, Thrift.ClientChannel c,
                    (Thrift.<:) s AdminAPI) =>
                   Maintenance.MaintenanceDefinition ->
                     Thrift.ThriftM p c s Maintenance.MaintenanceDefinitionResponse
applyMaintenance __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (applyMaintenanceIO _proxy _channel _counter _opts
            __field__request)

applyMaintenanceIO ::
                     (Thrift.Protocol p, Thrift.ClientChannel c,
                      (Thrift.<:) s AdminAPI) =>
                     Proxy.Proxy p ->
                       c s ->
                         Thrift.Counter ->
                           Thrift.RpcOptions ->
                             Maintenance.MaintenanceDefinition ->
                               Prelude.IO Maintenance.MaintenanceDefinitionResponse
applyMaintenanceIO _proxy _channel _counter _opts __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_applyMaintenance _proxy)
       send_applyMaintenance _proxy _channel _counter _sendCob _recvCob
         _opts
         __field__request
       Thrift.wait _handle

send_applyMaintenance ::
                        (Thrift.Protocol p, Thrift.ClientChannel c,
                         (Thrift.<:) s AdminAPI) =>
                        Proxy.Proxy p ->
                          c s ->
                            Thrift.Counter ->
                              Thrift.SendCallback ->
                                Thrift.RecvCallback ->
                                  Thrift.RpcOptions ->
                                    Maintenance.MaintenanceDefinition -> Prelude.IO ()
send_applyMaintenance _proxy _channel _counter _sendCob _recvCob
  _rpcOpts __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_applyMaintenance _proxy _seqNum __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_applyMaintenance ::
                        (Thrift.Protocol p) =>
                        Proxy.Proxy p ->
                          Thrift.Response ->
                            Prelude.Either Exception.SomeException
                              Maintenance.MaintenanceDefinitionResponse
recv_applyMaintenance _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_applyMaintenance _proxy) _response))

_build_applyMaintenance ::
                          Thrift.Protocol p =>
                          Proxy.Proxy p ->
                            Int.Int32 ->
                              Maintenance.MaintenanceDefinition -> ByteString.Builder
_build_applyMaintenance _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "applyMaintenance" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_applyMaintenance ::
                          Thrift.Protocol p =>
                          Proxy.Proxy p ->
                            Parser.Parser
                              (Prelude.Either Exception.SomeException
                                 Maintenance.MaintenanceDefinitionResponse)
_parse_applyMaintenance _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "applyMaintenance: expected reply but got function call"
                    2 | _name == "applyMaintenance" ->
                        do let
                             _idMap
                               = HashMap.fromList
                                   [("applyMaintenance_success", 0), ("notready", 1),
                                    ("invalid_request", 2), ("clash", 3), ("operation_error", 4),
                                    ("not_supported", 5)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodeNotReady)
                                                                       2 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.InvalidRequest)
                                                                       3 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.MaintenanceClash)
                                                                       4 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.OperationError)
                                                                       5 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NotSupported)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "applyMaintenance: expected reply but got oneway function call"
                    _ -> Prelude.fail "applyMaintenance: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

removeMaintenances ::
                     (Thrift.Protocol p, Thrift.ClientChannel c,
                      (Thrift.<:) s AdminAPI) =>
                     Maintenance.RemoveMaintenancesRequest ->
                       Thrift.ThriftM p c s Maintenance.RemoveMaintenancesResponse
removeMaintenances __field__filter
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (removeMaintenancesIO _proxy _channel _counter _opts
            __field__filter)

removeMaintenancesIO ::
                       (Thrift.Protocol p, Thrift.ClientChannel c,
                        (Thrift.<:) s AdminAPI) =>
                       Proxy.Proxy p ->
                         c s ->
                           Thrift.Counter ->
                             Thrift.RpcOptions ->
                               Maintenance.RemoveMaintenancesRequest ->
                                 Prelude.IO Maintenance.RemoveMaintenancesResponse
removeMaintenancesIO _proxy _channel _counter _opts __field__filter
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_removeMaintenances _proxy)
       send_removeMaintenances _proxy _channel _counter _sendCob _recvCob
         _opts
         __field__filter
       Thrift.wait _handle

send_removeMaintenances ::
                          (Thrift.Protocol p, Thrift.ClientChannel c,
                           (Thrift.<:) s AdminAPI) =>
                          Proxy.Proxy p ->
                            c s ->
                              Thrift.Counter ->
                                Thrift.SendCallback ->
                                  Thrift.RecvCallback ->
                                    Thrift.RpcOptions ->
                                      Maintenance.RemoveMaintenancesRequest -> Prelude.IO ()
send_removeMaintenances _proxy _channel _counter _sendCob _recvCob
  _rpcOpts __field__filter
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_removeMaintenances _proxy _seqNum __field__filter))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_removeMaintenances ::
                          (Thrift.Protocol p) =>
                          Proxy.Proxy p ->
                            Thrift.Response ->
                              Prelude.Either Exception.SomeException
                                Maintenance.RemoveMaintenancesResponse
recv_removeMaintenances _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_removeMaintenances _proxy) _response))

_build_removeMaintenances ::
                            Thrift.Protocol p =>
                            Proxy.Proxy p ->
                              Int.Int32 ->
                                Maintenance.RemoveMaintenancesRequest -> ByteString.Builder
_build_removeMaintenances _proxy _seqNum __field__filter
  = Thrift.genMsgBegin _proxy "removeMaintenances" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "filter" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__filter)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_removeMaintenances ::
                            Thrift.Protocol p =>
                            Proxy.Proxy p ->
                              Parser.Parser
                                (Prelude.Either Exception.SomeException
                                   Maintenance.RemoveMaintenancesResponse)
_parse_removeMaintenances _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "removeMaintenances: expected reply but got function call"
                    2 | _name == "removeMaintenances" ->
                        do let
                             _idMap
                               = HashMap.fromList
                                   [("removeMaintenances_success", 0), ("notready", 1),
                                    ("invalid_request", 2), ("operation_error", 3),
                                    ("not_supported", 4), ("not_found", 5)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodeNotReady)
                                                                       2 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.InvalidRequest)
                                                                       3 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.OperationError)
                                                                       4 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NotSupported)
                                                                       5 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.MaintenanceMatchError)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "removeMaintenances: expected reply but got oneway function call"
                    _ -> Prelude.fail "removeMaintenances: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

markAllShardsUnrecoverable ::
                             (Thrift.Protocol p, Thrift.ClientChannel c,
                              (Thrift.<:) s AdminAPI) =>
                             Maintenance.MarkAllShardsUnrecoverableRequest ->
                               Thrift.ThriftM p c s Maintenance.MarkAllShardsUnrecoverableResponse
markAllShardsUnrecoverable __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (markAllShardsUnrecoverableIO _proxy _channel _counter _opts
            __field__request)

markAllShardsUnrecoverableIO ::
                               (Thrift.Protocol p, Thrift.ClientChannel c,
                                (Thrift.<:) s AdminAPI) =>
                               Proxy.Proxy p ->
                                 c s ->
                                   Thrift.Counter ->
                                     Thrift.RpcOptions ->
                                       Maintenance.MarkAllShardsUnrecoverableRequest ->
                                         Prelude.IO Maintenance.MarkAllShardsUnrecoverableResponse
markAllShardsUnrecoverableIO _proxy _channel _counter _opts
  __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_markAllShardsUnrecoverable _proxy)
       send_markAllShardsUnrecoverable _proxy _channel _counter _sendCob
         _recvCob
         _opts
         __field__request
       Thrift.wait _handle

send_markAllShardsUnrecoverable ::
                                  (Thrift.Protocol p, Thrift.ClientChannel c,
                                   (Thrift.<:) s AdminAPI) =>
                                  Proxy.Proxy p ->
                                    c s ->
                                      Thrift.Counter ->
                                        Thrift.SendCallback ->
                                          Thrift.RecvCallback ->
                                            Thrift.RpcOptions ->
                                              Maintenance.MarkAllShardsUnrecoverableRequest ->
                                                Prelude.IO ()
send_markAllShardsUnrecoverable _proxy _channel _counter _sendCob
  _recvCob _rpcOpts __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_markAllShardsUnrecoverable _proxy _seqNum
                     __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_markAllShardsUnrecoverable ::
                                  (Thrift.Protocol p) =>
                                  Proxy.Proxy p ->
                                    Thrift.Response ->
                                      Prelude.Either Exception.SomeException
                                        Maintenance.MarkAllShardsUnrecoverableResponse
recv_markAllShardsUnrecoverable _proxy
  (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_markAllShardsUnrecoverable _proxy)
            _response))

_build_markAllShardsUnrecoverable ::
                                    Thrift.Protocol p =>
                                    Proxy.Proxy p ->
                                      Int.Int32 ->
                                        Maintenance.MarkAllShardsUnrecoverableRequest ->
                                          ByteString.Builder
_build_markAllShardsUnrecoverable _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "markAllShardsUnrecoverable" 1 _seqNum
      <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_markAllShardsUnrecoverable ::
                                    Thrift.Protocol p =>
                                    Proxy.Proxy p ->
                                      Parser.Parser
                                        (Prelude.Either Exception.SomeException
                                           Maintenance.MarkAllShardsUnrecoverableResponse)
_parse_markAllShardsUnrecoverable _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "markAllShardsUnrecoverable: expected reply but got function call"
                    2 | _name == "markAllShardsUnrecoverable" ->
                        do let
                             _idMap
                               = HashMap.fromList
                                   [("markAllShardsUnrecoverable_success", 0), ("notready", 1),
                                    ("invalid_request", 2), ("operation_error", 3),
                                    ("not_supported", 4)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodeNotReady)
                                                                       2 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.InvalidRequest)
                                                                       3 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.OperationError)
                                                                       4 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NotSupported)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "markAllShardsUnrecoverable: expected reply but got oneway function call"
                    _ -> Prelude.fail
                           "markAllShardsUnrecoverable: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

checkImpact ::
              (Thrift.Protocol p, Thrift.ClientChannel c,
               (Thrift.<:) s AdminAPI) =>
              Safety.CheckImpactRequest ->
                Thrift.ThriftM p c s Safety.CheckImpactResponse
checkImpact __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (checkImpactIO _proxy _channel _counter _opts __field__request)

checkImpactIO ::
                (Thrift.Protocol p, Thrift.ClientChannel c,
                 (Thrift.<:) s AdminAPI) =>
                Proxy.Proxy p ->
                  c s ->
                    Thrift.Counter ->
                      Thrift.RpcOptions ->
                        Safety.CheckImpactRequest -> Prelude.IO Safety.CheckImpactResponse
checkImpactIO _proxy _channel _counter _opts __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_checkImpact _proxy)
       send_checkImpact _proxy _channel _counter _sendCob _recvCob _opts
         __field__request
       Thrift.wait _handle

send_checkImpact ::
                   (Thrift.Protocol p, Thrift.ClientChannel c,
                    (Thrift.<:) s AdminAPI) =>
                   Proxy.Proxy p ->
                     c s ->
                       Thrift.Counter ->
                         Thrift.SendCallback ->
                           Thrift.RecvCallback ->
                             Thrift.RpcOptions -> Safety.CheckImpactRequest -> Prelude.IO ()
send_checkImpact _proxy _channel _counter _sendCob _recvCob
  _rpcOpts __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_checkImpact _proxy _seqNum __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_checkImpact ::
                   (Thrift.Protocol p) =>
                   Proxy.Proxy p ->
                     Thrift.Response ->
                       Prelude.Either Exception.SomeException Safety.CheckImpactResponse
recv_checkImpact _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_checkImpact _proxy) _response))

_build_checkImpact ::
                     Thrift.Protocol p =>
                     Proxy.Proxy p ->
                       Int.Int32 -> Safety.CheckImpactRequest -> ByteString.Builder
_build_checkImpact _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "checkImpact" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_checkImpact ::
                     Thrift.Protocol p =>
                     Proxy.Proxy p ->
                       Parser.Parser
                         (Prelude.Either Exception.SomeException Safety.CheckImpactResponse)
_parse_checkImpact _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "checkImpact: expected reply but got function call"
                    2 | _name == "checkImpact" ->
                        do let
                             _idMap
                               = HashMap.fromList
                                   [("checkImpact_success", 0), ("notready", 1), ("error", 2),
                                    ("invalid_request", 3), ("notsupported", 4)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodeNotReady)
                                                                       2 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.OperationError)
                                                                       3 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.InvalidRequest)
                                                                       4 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NotSupported)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "checkImpact: expected reply but got oneway function call"
                    _ -> Prelude.fail "checkImpact: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

getLogTreeInfo ::
                 (Thrift.Protocol p, Thrift.ClientChannel c,
                  (Thrift.<:) s AdminAPI) =>
                 Thrift.ThriftM p c s Logtree.LogTreeInfo
getLogTreeInfo
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift (getLogTreeInfoIO _proxy _channel _counter _opts)

getLogTreeInfoIO ::
                   (Thrift.Protocol p, Thrift.ClientChannel c,
                    (Thrift.<:) s AdminAPI) =>
                   Proxy.Proxy p ->
                     c s ->
                       Thrift.Counter ->
                         Thrift.RpcOptions -> Prelude.IO Logtree.LogTreeInfo
getLogTreeInfoIO _proxy _channel _counter _opts
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_getLogTreeInfo _proxy)
       send_getLogTreeInfo _proxy _channel _counter _sendCob _recvCob
         _opts
       Thrift.wait _handle

send_getLogTreeInfo ::
                      (Thrift.Protocol p, Thrift.ClientChannel c,
                       (Thrift.<:) s AdminAPI) =>
                      Proxy.Proxy p ->
                        c s ->
                          Thrift.Counter ->
                            Thrift.SendCallback ->
                              Thrift.RecvCallback -> Thrift.RpcOptions -> Prelude.IO ()
send_getLogTreeInfo _proxy _channel _counter _sendCob _recvCob
  _rpcOpts
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_getLogTreeInfo _proxy _seqNum))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_getLogTreeInfo ::
                      (Thrift.Protocol p) =>
                      Proxy.Proxy p ->
                        Thrift.Response ->
                          Prelude.Either Exception.SomeException Logtree.LogTreeInfo
recv_getLogTreeInfo _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_getLogTreeInfo _proxy) _response))

_build_getLogTreeInfo ::
                        Thrift.Protocol p =>
                        Proxy.Proxy p -> Int.Int32 -> ByteString.Builder
_build_getLogTreeInfo _proxy _seqNum
  = Thrift.genMsgBegin _proxy "getLogTreeInfo" 1 _seqNum <>
      Thrift.genStruct _proxy []
      <> Thrift.genMsgEnd _proxy

_parse_getLogTreeInfo ::
                        Thrift.Protocol p =>
                        Proxy.Proxy p ->
                          Parser.Parser
                            (Prelude.Either Exception.SomeException Logtree.LogTreeInfo)
_parse_getLogTreeInfo _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "getLogTreeInfo: expected reply but got function call"
                    2 | _name == "getLogTreeInfo" ->
                        do let
                             _idMap = HashMap.fromList [("getLogTreeInfo_success", 0)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "getLogTreeInfo: expected reply but got oneway function call"
                    _ -> Prelude.fail "getLogTreeInfo: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

getReplicationInfo ::
                     (Thrift.Protocol p, Thrift.ClientChannel c,
                      (Thrift.<:) s AdminAPI) =>
                     Thrift.ThriftM p c s Logtree.ReplicationInfo
getReplicationInfo
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift (getReplicationInfoIO _proxy _channel _counter _opts)

getReplicationInfoIO ::
                       (Thrift.Protocol p, Thrift.ClientChannel c,
                        (Thrift.<:) s AdminAPI) =>
                       Proxy.Proxy p ->
                         c s ->
                           Thrift.Counter ->
                             Thrift.RpcOptions -> Prelude.IO Logtree.ReplicationInfo
getReplicationInfoIO _proxy _channel _counter _opts
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_getReplicationInfo _proxy)
       send_getReplicationInfo _proxy _channel _counter _sendCob _recvCob
         _opts
       Thrift.wait _handle

send_getReplicationInfo ::
                          (Thrift.Protocol p, Thrift.ClientChannel c,
                           (Thrift.<:) s AdminAPI) =>
                          Proxy.Proxy p ->
                            c s ->
                              Thrift.Counter ->
                                Thrift.SendCallback ->
                                  Thrift.RecvCallback -> Thrift.RpcOptions -> Prelude.IO ()
send_getReplicationInfo _proxy _channel _counter _sendCob _recvCob
  _rpcOpts
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_getReplicationInfo _proxy _seqNum))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_getReplicationInfo ::
                          (Thrift.Protocol p) =>
                          Proxy.Proxy p ->
                            Thrift.Response ->
                              Prelude.Either Exception.SomeException Logtree.ReplicationInfo
recv_getReplicationInfo _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_getReplicationInfo _proxy) _response))

_build_getReplicationInfo ::
                            Thrift.Protocol p =>
                            Proxy.Proxy p -> Int.Int32 -> ByteString.Builder
_build_getReplicationInfo _proxy _seqNum
  = Thrift.genMsgBegin _proxy "getReplicationInfo" 1 _seqNum <>
      Thrift.genStruct _proxy []
      <> Thrift.genMsgEnd _proxy

_parse_getReplicationInfo ::
                            Thrift.Protocol p =>
                            Proxy.Proxy p ->
                              Parser.Parser
                                (Prelude.Either Exception.SomeException Logtree.ReplicationInfo)
_parse_getReplicationInfo _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "getReplicationInfo: expected reply but got function call"
                    2 | _name == "getReplicationInfo" ->
                        do let
                             _idMap = HashMap.fromList [("getReplicationInfo_success", 0)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "getReplicationInfo: expected reply but got oneway function call"
                    _ -> Prelude.fail "getReplicationInfo: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

getSettings ::
              (Thrift.Protocol p, Thrift.ClientChannel c,
               (Thrift.<:) s AdminAPI) =>
              Settings.SettingsRequest ->
                Thrift.ThriftM p c s Settings.SettingsResponse
getSettings __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (getSettingsIO _proxy _channel _counter _opts __field__request)

getSettingsIO ::
                (Thrift.Protocol p, Thrift.ClientChannel c,
                 (Thrift.<:) s AdminAPI) =>
                Proxy.Proxy p ->
                  c s ->
                    Thrift.Counter ->
                      Thrift.RpcOptions ->
                        Settings.SettingsRequest -> Prelude.IO Settings.SettingsResponse
getSettingsIO _proxy _channel _counter _opts __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_getSettings _proxy)
       send_getSettings _proxy _channel _counter _sendCob _recvCob _opts
         __field__request
       Thrift.wait _handle

send_getSettings ::
                   (Thrift.Protocol p, Thrift.ClientChannel c,
                    (Thrift.<:) s AdminAPI) =>
                   Proxy.Proxy p ->
                     c s ->
                       Thrift.Counter ->
                         Thrift.SendCallback ->
                           Thrift.RecvCallback ->
                             Thrift.RpcOptions -> Settings.SettingsRequest -> Prelude.IO ()
send_getSettings _proxy _channel _counter _sendCob _recvCob
  _rpcOpts __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_getSettings _proxy _seqNum __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_getSettings ::
                   (Thrift.Protocol p) =>
                   Proxy.Proxy p ->
                     Thrift.Response ->
                       Prelude.Either Exception.SomeException Settings.SettingsResponse
recv_getSettings _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_getSettings _proxy) _response))

_build_getSettings ::
                     Thrift.Protocol p =>
                     Proxy.Proxy p ->
                       Int.Int32 -> Settings.SettingsRequest -> ByteString.Builder
_build_getSettings _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "getSettings" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_getSettings ::
                     Thrift.Protocol p =>
                     Proxy.Proxy p ->
                       Parser.Parser
                         (Prelude.Either Exception.SomeException Settings.SettingsResponse)
_parse_getSettings _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "getSettings: expected reply but got function call"
                    2 | _name == "getSettings" ->
                        do let
                             _idMap = HashMap.fromList [("getSettings_success", 0)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "getSettings: expected reply but got oneway function call"
                    _ -> Prelude.fail "getSettings: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

applySettingOverride ::
                       (Thrift.Protocol p, Thrift.ClientChannel c,
                        (Thrift.<:) s AdminAPI) =>
                       Settings.ApplySettingOverrideRequest -> Thrift.ThriftM p c s ()
applySettingOverride __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (applySettingOverrideIO _proxy _channel _counter _opts
            __field__request)

applySettingOverrideIO ::
                         (Thrift.Protocol p, Thrift.ClientChannel c,
                          (Thrift.<:) s AdminAPI) =>
                         Proxy.Proxy p ->
                           c s ->
                             Thrift.Counter ->
                               Thrift.RpcOptions ->
                                 Settings.ApplySettingOverrideRequest -> Prelude.IO ()
applySettingOverrideIO _proxy _channel _counter _opts
  __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_applySettingOverride _proxy)
       send_applySettingOverride _proxy _channel _counter _sendCob
         _recvCob
         _opts
         __field__request
       Thrift.wait _handle

send_applySettingOverride ::
                            (Thrift.Protocol p, Thrift.ClientChannel c,
                             (Thrift.<:) s AdminAPI) =>
                            Proxy.Proxy p ->
                              c s ->
                                Thrift.Counter ->
                                  Thrift.SendCallback ->
                                    Thrift.RecvCallback ->
                                      Thrift.RpcOptions ->
                                        Settings.ApplySettingOverrideRequest -> Prelude.IO ()
send_applySettingOverride _proxy _channel _counter _sendCob
  _recvCob _rpcOpts __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_applySettingOverride _proxy _seqNum __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_applySettingOverride ::
                            (Thrift.Protocol p) =>
                            Proxy.Proxy p ->
                              Thrift.Response -> Prelude.Either Exception.SomeException ()
recv_applySettingOverride _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_applySettingOverride _proxy) _response))

_build_applySettingOverride ::
                              Thrift.Protocol p =>
                              Proxy.Proxy p ->
                                Int.Int32 ->
                                  Settings.ApplySettingOverrideRequest -> ByteString.Builder
_build_applySettingOverride _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "applySettingOverride" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_applySettingOverride ::
                              Thrift.Protocol p =>
                              Proxy.Proxy p ->
                                Parser.Parser (Prelude.Either Exception.SomeException ())
_parse_applySettingOverride _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "applySettingOverride: expected reply but got function call"
                    2 | _name == "applySettingOverride" ->
                        do let
                             _idMap
                               = HashMap.fromList [("invalid_request", 1), ("operation_error", 2)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.InvalidRequest)
                                                                       2 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.OperationError)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.return (Prelude.Right ())
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "applySettingOverride: expected reply but got oneway function call"
                    _ -> Prelude.fail "applySettingOverride: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

removeSettingOverride ::
                        (Thrift.Protocol p, Thrift.ClientChannel c,
                         (Thrift.<:) s AdminAPI) =>
                        Settings.RemoveSettingOverrideRequest -> Thrift.ThriftM p c s ()
removeSettingOverride __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (removeSettingOverrideIO _proxy _channel _counter _opts
            __field__request)

removeSettingOverrideIO ::
                          (Thrift.Protocol p, Thrift.ClientChannel c,
                           (Thrift.<:) s AdminAPI) =>
                          Proxy.Proxy p ->
                            c s ->
                              Thrift.Counter ->
                                Thrift.RpcOptions ->
                                  Settings.RemoveSettingOverrideRequest -> Prelude.IO ()
removeSettingOverrideIO _proxy _channel _counter _opts
  __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_removeSettingOverride _proxy)
       send_removeSettingOverride _proxy _channel _counter _sendCob
         _recvCob
         _opts
         __field__request
       Thrift.wait _handle

send_removeSettingOverride ::
                             (Thrift.Protocol p, Thrift.ClientChannel c,
                              (Thrift.<:) s AdminAPI) =>
                             Proxy.Proxy p ->
                               c s ->
                                 Thrift.Counter ->
                                   Thrift.SendCallback ->
                                     Thrift.RecvCallback ->
                                       Thrift.RpcOptions ->
                                         Settings.RemoveSettingOverrideRequest -> Prelude.IO ()
send_removeSettingOverride _proxy _channel _counter _sendCob
  _recvCob _rpcOpts __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_removeSettingOverride _proxy _seqNum __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_removeSettingOverride ::
                             (Thrift.Protocol p) =>
                             Proxy.Proxy p ->
                               Thrift.Response -> Prelude.Either Exception.SomeException ()
recv_removeSettingOverride _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_removeSettingOverride _proxy) _response))

_build_removeSettingOverride ::
                               Thrift.Protocol p =>
                               Proxy.Proxy p ->
                                 Int.Int32 ->
                                   Settings.RemoveSettingOverrideRequest -> ByteString.Builder
_build_removeSettingOverride _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "removeSettingOverride" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_removeSettingOverride ::
                               Thrift.Protocol p =>
                               Proxy.Proxy p ->
                                 Parser.Parser (Prelude.Either Exception.SomeException ())
_parse_removeSettingOverride _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "removeSettingOverride: expected reply but got function call"
                    2 | _name == "removeSettingOverride" ->
                        do let
                             _idMap = HashMap.fromList []
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.return (Prelude.Right ())
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "removeSettingOverride: expected reply but got oneway function call"
                    _ -> Prelude.fail "removeSettingOverride: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

takeLogTreeSnapshot ::
                      (Thrift.Protocol p, Thrift.ClientChannel c,
                       (Thrift.<:) s AdminAPI) =>
                      Common.Unsigned64 -> Thrift.ThriftM p c s ()
takeLogTreeSnapshot __field__min_version
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (takeLogTreeSnapshotIO _proxy _channel _counter _opts
            __field__min_version)

takeLogTreeSnapshotIO ::
                        (Thrift.Protocol p, Thrift.ClientChannel c,
                         (Thrift.<:) s AdminAPI) =>
                        Proxy.Proxy p ->
                          c s ->
                            Thrift.Counter ->
                              Thrift.RpcOptions -> Common.Unsigned64 -> Prelude.IO ()
takeLogTreeSnapshotIO _proxy _channel _counter _opts
  __field__min_version
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_takeLogTreeSnapshot _proxy)
       send_takeLogTreeSnapshot _proxy _channel _counter _sendCob _recvCob
         _opts
         __field__min_version
       Thrift.wait _handle

send_takeLogTreeSnapshot ::
                           (Thrift.Protocol p, Thrift.ClientChannel c,
                            (Thrift.<:) s AdminAPI) =>
                           Proxy.Proxy p ->
                             c s ->
                               Thrift.Counter ->
                                 Thrift.SendCallback ->
                                   Thrift.RecvCallback ->
                                     Thrift.RpcOptions -> Common.Unsigned64 -> Prelude.IO ()
send_takeLogTreeSnapshot _proxy _channel _counter _sendCob _recvCob
  _rpcOpts __field__min_version
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_takeLogTreeSnapshot _proxy _seqNum __field__min_version))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_takeLogTreeSnapshot ::
                           (Thrift.Protocol p) =>
                           Proxy.Proxy p ->
                             Thrift.Response -> Prelude.Either Exception.SomeException ()
recv_takeLogTreeSnapshot _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_takeLogTreeSnapshot _proxy) _response))

_build_takeLogTreeSnapshot ::
                             Thrift.Protocol p =>
                             Proxy.Proxy p ->
                               Int.Int32 -> Common.Unsigned64 -> ByteString.Builder
_build_takeLogTreeSnapshot _proxy _seqNum __field__min_version
  = Thrift.genMsgBegin _proxy "takeLogTreeSnapshot" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "min_version" (Thrift.getI64Type _proxy) 1
           0
           (Thrift.genI64 _proxy __field__min_version)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_takeLogTreeSnapshot ::
                             Thrift.Protocol p =>
                             Proxy.Proxy p ->
                               Parser.Parser (Prelude.Either Exception.SomeException ())
_parse_takeLogTreeSnapshot _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "takeLogTreeSnapshot: expected reply but got function call"
                    2 | _name == "takeLogTreeSnapshot" ->
                        do let
                             _idMap
                               = HashMap.fromList
                                   [("stale", 1), ("notready", 2), ("notsupported", 3)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.StaleVersion)
                                                                       2 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodeNotReady)
                                                                       3 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NotSupported)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.return (Prelude.Right ())
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "takeLogTreeSnapshot: expected reply but got oneway function call"
                    _ -> Prelude.fail "takeLogTreeSnapshot: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

takeMaintenanceLogSnapshot ::
                             (Thrift.Protocol p, Thrift.ClientChannel c,
                              (Thrift.<:) s AdminAPI) =>
                             Common.Unsigned64 -> Thrift.ThriftM p c s ()
takeMaintenanceLogSnapshot __field__min_version
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (takeMaintenanceLogSnapshotIO _proxy _channel _counter _opts
            __field__min_version)

takeMaintenanceLogSnapshotIO ::
                               (Thrift.Protocol p, Thrift.ClientChannel c,
                                (Thrift.<:) s AdminAPI) =>
                               Proxy.Proxy p ->
                                 c s ->
                                   Thrift.Counter ->
                                     Thrift.RpcOptions -> Common.Unsigned64 -> Prelude.IO ()
takeMaintenanceLogSnapshotIO _proxy _channel _counter _opts
  __field__min_version
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_takeMaintenanceLogSnapshot _proxy)
       send_takeMaintenanceLogSnapshot _proxy _channel _counter _sendCob
         _recvCob
         _opts
         __field__min_version
       Thrift.wait _handle

send_takeMaintenanceLogSnapshot ::
                                  (Thrift.Protocol p, Thrift.ClientChannel c,
                                   (Thrift.<:) s AdminAPI) =>
                                  Proxy.Proxy p ->
                                    c s ->
                                      Thrift.Counter ->
                                        Thrift.SendCallback ->
                                          Thrift.RecvCallback ->
                                            Thrift.RpcOptions -> Common.Unsigned64 -> Prelude.IO ()
send_takeMaintenanceLogSnapshot _proxy _channel _counter _sendCob
  _recvCob _rpcOpts __field__min_version
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_takeMaintenanceLogSnapshot _proxy _seqNum
                     __field__min_version))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_takeMaintenanceLogSnapshot ::
                                  (Thrift.Protocol p) =>
                                  Proxy.Proxy p ->
                                    Thrift.Response -> Prelude.Either Exception.SomeException ()
recv_takeMaintenanceLogSnapshot _proxy
  (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_takeMaintenanceLogSnapshot _proxy)
            _response))

_build_takeMaintenanceLogSnapshot ::
                                    Thrift.Protocol p =>
                                    Proxy.Proxy p ->
                                      Int.Int32 -> Common.Unsigned64 -> ByteString.Builder
_build_takeMaintenanceLogSnapshot _proxy _seqNum
  __field__min_version
  = Thrift.genMsgBegin _proxy "takeMaintenanceLogSnapshot" 1 _seqNum
      <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "min_version" (Thrift.getI64Type _proxy) 1
           0
           (Thrift.genI64 _proxy __field__min_version)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_takeMaintenanceLogSnapshot ::
                                    Thrift.Protocol p =>
                                    Proxy.Proxy p ->
                                      Parser.Parser (Prelude.Either Exception.SomeException ())
_parse_takeMaintenanceLogSnapshot _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "takeMaintenanceLogSnapshot: expected reply but got function call"
                    2 | _name == "takeMaintenanceLogSnapshot" ->
                        do let
                             _idMap
                               = HashMap.fromList
                                   [("stale", 1), ("notready", 2), ("notsupported", 3)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.StaleVersion)
                                                                       2 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NodeNotReady)
                                                                       3 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NotSupported)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.return (Prelude.Right ())
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "takeMaintenanceLogSnapshot: expected reply but got oneway function call"
                    _ -> Prelude.fail
                           "takeMaintenanceLogSnapshot: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

getLogGroupThroughput ::
                        (Thrift.Protocol p, Thrift.ClientChannel c,
                         (Thrift.<:) s AdminAPI) =>
                        Logtree.LogGroupThroughputRequest ->
                          Thrift.ThriftM p c s Logtree.LogGroupThroughputResponse
getLogGroupThroughput __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (getLogGroupThroughputIO _proxy _channel _counter _opts
            __field__request)

getLogGroupThroughputIO ::
                          (Thrift.Protocol p, Thrift.ClientChannel c,
                           (Thrift.<:) s AdminAPI) =>
                          Proxy.Proxy p ->
                            c s ->
                              Thrift.Counter ->
                                Thrift.RpcOptions ->
                                  Logtree.LogGroupThroughputRequest ->
                                    Prelude.IO Logtree.LogGroupThroughputResponse
getLogGroupThroughputIO _proxy _channel _counter _opts
  __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_getLogGroupThroughput _proxy)
       send_getLogGroupThroughput _proxy _channel _counter _sendCob
         _recvCob
         _opts
         __field__request
       Thrift.wait _handle

send_getLogGroupThroughput ::
                             (Thrift.Protocol p, Thrift.ClientChannel c,
                              (Thrift.<:) s AdminAPI) =>
                             Proxy.Proxy p ->
                               c s ->
                                 Thrift.Counter ->
                                   Thrift.SendCallback ->
                                     Thrift.RecvCallback ->
                                       Thrift.RpcOptions ->
                                         Logtree.LogGroupThroughputRequest -> Prelude.IO ()
send_getLogGroupThroughput _proxy _channel _counter _sendCob
  _recvCob _rpcOpts __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_getLogGroupThroughput _proxy _seqNum __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_getLogGroupThroughput ::
                             (Thrift.Protocol p) =>
                             Proxy.Proxy p ->
                               Thrift.Response ->
                                 Prelude.Either Exception.SomeException
                                   Logtree.LogGroupThroughputResponse
recv_getLogGroupThroughput _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_getLogGroupThroughput _proxy) _response))

_build_getLogGroupThroughput ::
                               Thrift.Protocol p =>
                               Proxy.Proxy p ->
                                 Int.Int32 ->
                                   Logtree.LogGroupThroughputRequest -> ByteString.Builder
_build_getLogGroupThroughput _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "getLogGroupThroughput" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_getLogGroupThroughput ::
                               Thrift.Protocol p =>
                               Proxy.Proxy p ->
                                 Parser.Parser
                                   (Prelude.Either Exception.SomeException
                                      Logtree.LogGroupThroughputResponse)
_parse_getLogGroupThroughput _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "getLogGroupThroughput: expected reply but got function call"
                    2 | _name == "getLogGroupThroughput" ->
                        do let
                             _idMap = HashMap.fromList [("getLogGroupThroughput_success", 0)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "getLogGroupThroughput: expected reply but got oneway function call"
                    _ -> Prelude.fail "getLogGroupThroughput: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

getLogGroupCustomCounters ::
                            (Thrift.Protocol p, Thrift.ClientChannel c,
                             (Thrift.<:) s AdminAPI) =>
                            Logtree.LogGroupCustomCountersRequest ->
                              Thrift.ThriftM p c s Logtree.LogGroupCustomCountersResponse
getLogGroupCustomCounters __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (getLogGroupCustomCountersIO _proxy _channel _counter _opts
            __field__request)

getLogGroupCustomCountersIO ::
                              (Thrift.Protocol p, Thrift.ClientChannel c,
                               (Thrift.<:) s AdminAPI) =>
                              Proxy.Proxy p ->
                                c s ->
                                  Thrift.Counter ->
                                    Thrift.RpcOptions ->
                                      Logtree.LogGroupCustomCountersRequest ->
                                        Prelude.IO Logtree.LogGroupCustomCountersResponse
getLogGroupCustomCountersIO _proxy _channel _counter _opts
  __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_getLogGroupCustomCounters _proxy)
       send_getLogGroupCustomCounters _proxy _channel _counter _sendCob
         _recvCob
         _opts
         __field__request
       Thrift.wait _handle

send_getLogGroupCustomCounters ::
                                 (Thrift.Protocol p, Thrift.ClientChannel c,
                                  (Thrift.<:) s AdminAPI) =>
                                 Proxy.Proxy p ->
                                   c s ->
                                     Thrift.Counter ->
                                       Thrift.SendCallback ->
                                         Thrift.RecvCallback ->
                                           Thrift.RpcOptions ->
                                             Logtree.LogGroupCustomCountersRequest -> Prelude.IO ()
send_getLogGroupCustomCounters _proxy _channel _counter _sendCob
  _recvCob _rpcOpts __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_getLogGroupCustomCounters _proxy _seqNum __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_getLogGroupCustomCounters ::
                                 (Thrift.Protocol p) =>
                                 Proxy.Proxy p ->
                                   Thrift.Response ->
                                     Prelude.Either Exception.SomeException
                                       Logtree.LogGroupCustomCountersResponse
recv_getLogGroupCustomCounters _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_getLogGroupCustomCounters _proxy) _response))

_build_getLogGroupCustomCounters ::
                                   Thrift.Protocol p =>
                                   Proxy.Proxy p ->
                                     Int.Int32 ->
                                       Logtree.LogGroupCustomCountersRequest -> ByteString.Builder
_build_getLogGroupCustomCounters _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "getLogGroupCustomCounters" 1 _seqNum
      <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_getLogGroupCustomCounters ::
                                   Thrift.Protocol p =>
                                   Proxy.Proxy p ->
                                     Parser.Parser
                                       (Prelude.Either Exception.SomeException
                                          Logtree.LogGroupCustomCountersResponse)
_parse_getLogGroupCustomCounters _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "getLogGroupCustomCounters: expected reply but got function call"
                    2 | _name == "getLogGroupCustomCounters" ->
                        do let
                             _idMap
                               = HashMap.fromList
                                   [("getLogGroupCustomCounters_success", 0), ("notsupported", 1),
                                    ("invalid_request", 2)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NotSupported)
                                                                       2 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.InvalidRequest)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "getLogGroupCustomCounters: expected reply but got oneway function call"
                    _ -> Prelude.fail "getLogGroupCustomCounters: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

executeAdminCommand ::
                      (Thrift.Protocol p, Thrift.ClientChannel c,
                       (Thrift.<:) s AdminAPI) =>
                      AdminCommands.AdminCommandRequest ->
                        Thrift.ThriftM p c s AdminCommands.AdminCommandResponse
executeAdminCommand __field__request
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift
         (executeAdminCommandIO _proxy _channel _counter _opts
            __field__request)

executeAdminCommandIO ::
                        (Thrift.Protocol p, Thrift.ClientChannel c,
                         (Thrift.<:) s AdminAPI) =>
                        Proxy.Proxy p ->
                          c s ->
                            Thrift.Counter ->
                              Thrift.RpcOptions ->
                                AdminCommands.AdminCommandRequest ->
                                  Prelude.IO AdminCommands.AdminCommandResponse
executeAdminCommandIO _proxy _channel _counter _opts
  __field__request
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_executeAdminCommand _proxy)
       send_executeAdminCommand _proxy _channel _counter _sendCob _recvCob
         _opts
         __field__request
       Thrift.wait _handle

send_executeAdminCommand ::
                           (Thrift.Protocol p, Thrift.ClientChannel c,
                            (Thrift.<:) s AdminAPI) =>
                           Proxy.Proxy p ->
                             c s ->
                               Thrift.Counter ->
                                 Thrift.SendCallback ->
                                   Thrift.RecvCallback ->
                                     Thrift.RpcOptions ->
                                       AdminCommands.AdminCommandRequest -> Prelude.IO ()
send_executeAdminCommand _proxy _channel _counter _sendCob _recvCob
  _rpcOpts __field__request
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_executeAdminCommand _proxy _seqNum __field__request))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_executeAdminCommand ::
                           (Thrift.Protocol p) =>
                           Proxy.Proxy p ->
                             Thrift.Response ->
                               Prelude.Either Exception.SomeException
                                 AdminCommands.AdminCommandResponse
recv_executeAdminCommand _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_executeAdminCommand _proxy) _response))

_build_executeAdminCommand ::
                             Thrift.Protocol p =>
                             Proxy.Proxy p ->
                               Int.Int32 ->
                                 AdminCommands.AdminCommandRequest -> ByteString.Builder
_build_executeAdminCommand _proxy _seqNum __field__request
  = Thrift.genMsgBegin _proxy "executeAdminCommand" 1 _seqNum <>
      Thrift.genStruct _proxy
        (Thrift.genField _proxy "request" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__request)
           : [])
      <> Thrift.genMsgEnd _proxy

_parse_executeAdminCommand ::
                             Thrift.Protocol p =>
                             Proxy.Proxy p ->
                               Parser.Parser
                                 (Prelude.Either Exception.SomeException
                                    AdminCommands.AdminCommandResponse)
_parse_executeAdminCommand _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "executeAdminCommand: expected reply but got function call"
                    2 | _name == "executeAdminCommand" ->
                        do let
                             _idMap
                               = HashMap.fromList
                                   [("executeAdminCommand_success", 0), ("notsupported", 1)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseStruct
                                                                                _proxy)
                                                                       1 | _type ==
                                                                             Thrift.getStructType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             (Prelude.Left .
                                                                                Exception.SomeException)
                                                                             (Thrift.parseStruct
                                                                                _proxy
                                                                                ::
                                                                                Parser.Parser
                                                                                  Exceptions.NotSupported)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "executeAdminCommand: expected reply but got oneway function call"
                    _ -> Prelude.fail "executeAdminCommand: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

getClusterName ::
                 (Thrift.Protocol p, Thrift.ClientChannel c,
                  (Thrift.<:) s AdminAPI) =>
                 Thrift.ThriftM p c s Text.Text
getClusterName
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift (getClusterNameIO _proxy _channel _counter _opts)

getClusterNameIO ::
                   (Thrift.Protocol p, Thrift.ClientChannel c,
                    (Thrift.<:) s AdminAPI) =>
                   Proxy.Proxy p ->
                     c s -> Thrift.Counter -> Thrift.RpcOptions -> Prelude.IO Text.Text
getClusterNameIO _proxy _channel _counter _opts
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_getClusterName _proxy)
       send_getClusterName _proxy _channel _counter _sendCob _recvCob
         _opts
       Thrift.wait _handle

send_getClusterName ::
                      (Thrift.Protocol p, Thrift.ClientChannel c,
                       (Thrift.<:) s AdminAPI) =>
                      Proxy.Proxy p ->
                        c s ->
                          Thrift.Counter ->
                            Thrift.SendCallback ->
                              Thrift.RecvCallback -> Thrift.RpcOptions -> Prelude.IO ()
send_getClusterName _proxy _channel _counter _sendCob _recvCob
  _rpcOpts
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_getClusterName _proxy _seqNum))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_getClusterName ::
                      (Thrift.Protocol p) =>
                      Proxy.Proxy p ->
                        Thrift.Response -> Prelude.Either Exception.SomeException Text.Text
recv_getClusterName _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_getClusterName _proxy) _response))

_build_getClusterName ::
                        Thrift.Protocol p =>
                        Proxy.Proxy p -> Int.Int32 -> ByteString.Builder
_build_getClusterName _proxy _seqNum
  = Thrift.genMsgBegin _proxy "getClusterName" 1 _seqNum <>
      Thrift.genStruct _proxy []
      <> Thrift.genMsgEnd _proxy

_parse_getClusterName ::
                        Thrift.Protocol p =>
                        Proxy.Proxy p ->
                          Parser.Parser (Prelude.Either Exception.SomeException Text.Text)
_parse_getClusterName _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "getClusterName: expected reply but got function call"
                    2 | _name == "getClusterName" ->
                        do let
                             _idMap = HashMap.fromList [("getClusterName_success", 0)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStringType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseText
                                                                                _proxy)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "getClusterName: expected reply but got oneway function call"
                    _ -> Prelude.fail "getClusterName: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result

dumpServerConfigJson ::
                       (Thrift.Protocol p, Thrift.ClientChannel c,
                        (Thrift.<:) s AdminAPI) =>
                       Thrift.ThriftM p c s Text.Text
dumpServerConfigJson
  = do Thrift.ThriftEnv _proxy _channel _opts _counter <- Reader.ask
       Trans.lift (dumpServerConfigJsonIO _proxy _channel _counter _opts)

dumpServerConfigJsonIO ::
                         (Thrift.Protocol p, Thrift.ClientChannel c,
                          (Thrift.<:) s AdminAPI) =>
                         Proxy.Proxy p ->
                           c s -> Thrift.Counter -> Thrift.RpcOptions -> Prelude.IO Text.Text
dumpServerConfigJsonIO _proxy _channel _counter _opts
  = do (_handle, _sendCob, _recvCob) <- Thrift.mkCallbacks
                                          (recv_dumpServerConfigJson _proxy)
       send_dumpServerConfigJson _proxy _channel _counter _sendCob
         _recvCob
         _opts
       Thrift.wait _handle

send_dumpServerConfigJson ::
                            (Thrift.Protocol p, Thrift.ClientChannel c,
                             (Thrift.<:) s AdminAPI) =>
                            Proxy.Proxy p ->
                              c s ->
                                Thrift.Counter ->
                                  Thrift.SendCallback ->
                                    Thrift.RecvCallback -> Thrift.RpcOptions -> Prelude.IO ()
send_dumpServerConfigJson _proxy _channel _counter _sendCob
  _recvCob _rpcOpts
  = do _seqNum <- _counter
       let
         _callMsg
           = LBS.toStrict
               (ByteString.toLazyByteString
                  (_build_dumpServerConfigJson _proxy _seqNum))
       Thrift.sendRequest _channel
         (Thrift.Request _callMsg
            (Thrift.setRpcPriority _rpcOpts Thrift.NormalPriority))
         _sendCob
         _recvCob

recv_dumpServerConfigJson ::
                            (Thrift.Protocol p) =>
                            Proxy.Proxy p ->
                              Thrift.Response -> Prelude.Either Exception.SomeException Text.Text
recv_dumpServerConfigJson _proxy (Thrift.Response _response _)
  = Monad.join
      (Arrow.left (Exception.SomeException . Thrift.ProtocolException)
         (Parser.parse (_parse_dumpServerConfigJson _proxy) _response))

_build_dumpServerConfigJson ::
                              Thrift.Protocol p =>
                              Proxy.Proxy p -> Int.Int32 -> ByteString.Builder
_build_dumpServerConfigJson _proxy _seqNum
  = Thrift.genMsgBegin _proxy "dumpServerConfigJson" 1 _seqNum <>
      Thrift.genStruct _proxy []
      <> Thrift.genMsgEnd _proxy

_parse_dumpServerConfigJson ::
                              Thrift.Protocol p =>
                              Proxy.Proxy p ->
                                Parser.Parser (Prelude.Either Exception.SomeException Text.Text)
_parse_dumpServerConfigJson _proxy
  = do Thrift.MsgBegin _name _msgTy _ <- Thrift.parseMsgBegin _proxy
       _result <- case _msgTy of
                    1 -> Prelude.fail
                           "dumpServerConfigJson: expected reply but got function call"
                    2 | _name == "dumpServerConfigJson" ->
                        do let
                             _idMap = HashMap.fromList [("dumpServerConfigJson_success", 0)]
                           _fieldBegin <- Thrift.parseFieldBegin _proxy 0 _idMap
                           case _fieldBegin of
                             Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                       0 | _type ==
                                                                             Thrift.getStringType
                                                                               _proxy
                                                                           ->
                                                                           Prelude.fmap
                                                                             Prelude.Right
                                                                             (Thrift.parseText
                                                                                _proxy)
                                                                       _ -> Prelude.fail
                                                                              (Prelude.unwords
                                                                                 ["unrecognized exception, type:",
                                                                                  Prelude.show
                                                                                    _type,
                                                                                  "field id:",
                                                                                  Prelude.show _id])
                             Thrift.FieldEnd -> Prelude.fail "no response"
                      | Prelude.otherwise -> Prelude.fail "reply function does not match"
                    3 -> Prelude.fmap (Prelude.Left . Exception.SomeException)
                           (Thrift.parseStruct _proxy ::
                              Parser.Parser Thrift.ApplicationException)
                    4 -> Prelude.fail
                           "dumpServerConfigJson: expected reply but got oneway function call"
                    _ -> Prelude.fail "dumpServerConfigJson: invalid message type"
       Thrift.parseMsgEnd _proxy
       Prelude.return _result
