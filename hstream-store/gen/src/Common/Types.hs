-----------------------------------------------------------------
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
--  @generated
-----------------------------------------------------------------
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE BangPatterns #-}
{-# OPTIONS_GHC -fno-warn-unused-imports#-}
{-# OPTIONS_GHC -fno-warn-overlapping-patterns#-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns#-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
module Common.Types
       (Unsigned64, MaintenanceGroupID,
        SocketAddressFamily(SocketAddressFamily_INET,
                            SocketAddressFamily_UNIX, SocketAddressFamily__UNKNOWN),
        ClientNetworkPriority(ClientNetworkPriority_LOW,
                              ClientNetworkPriority_MEDIUM, ClientNetworkPriority_HIGH,
                              ClientNetworkPriority__UNKNOWN),
        SocketAddress(SocketAddress, socketAddress_address_family,
                      socketAddress_address, socketAddress_port),
        Timestamp, NodeIndex, ShardIndex, aLL_SHARDS,
        NodeID(NodeID, nodeID_node_index, nodeID_address, nodeID_name),
        ShardID(ShardID, shardID_node, shardID_shard_index), StorageSet,
        ShardSet, Role(Role_STORAGE, Role_SEQUENCER, Role__UNKNOWN),
        Addresses(Addresses, addresses_gossip, addresses_ssl,
                  addresses_admin, addresses_server_to_server,
                  addresses_server_thrift_api, addresses_client_thrift_api,
                  addresses_addresses_per_priority),
        LocationScope(LocationScope_NODE, LocationScope_RACK,
                      LocationScope_ROW, LocationScope_CLUSTER,
                      LocationScope_DATA_CENTER, LocationScope_REGION,
                      LocationScope_ROOT, LocationScope__UNKNOWN),
        ReplicationProperty, Location)
       where
import qualified Control.DeepSeq as DeepSeq
import qualified Control.Exception as Exception
import qualified Control.Monad as Monad
import qualified Control.Monad.ST.Trans as ST
import qualified Control.Monad.Trans.Class as Trans
import qualified Data.Aeson as Aeson
import qualified Data.Aeson.Types as Aeson
import qualified Data.Default as Default
import qualified Data.Function as Function
import qualified Data.HashMap.Strict as HashMap
import qualified Data.Hashable as Hashable
import qualified Data.Int as Int
import qualified Data.List as List
import qualified Data.Map.Strict as Map
import qualified Data.Ord as Ord
import qualified Data.Text as Text
import qualified Data.Text.Encoding as Text
import qualified Prelude as Prelude
import qualified Thrift.Binary.Parser as Parser
import qualified Thrift.CodegenTypesOnly as Thrift
import Control.Applicative ((<|>), (*>), (<*))
import Data.Aeson ((.:), (.:?), (.=), (.!=))
import Data.Monoid ((<>))
import Prelude ((.), (++), (>), (==))
import Prelude ((.), (<$>), (<*>), (>>=), (==), (/=), (<), (++))

type Unsigned64 = Int.Int64

type MaintenanceGroupID = Text.Text

data SocketAddressFamily = SocketAddressFamily_INET
                         | SocketAddressFamily_UNIX
                         | SocketAddressFamily__UNKNOWN Prelude.Int
                           deriving (Prelude.Eq, Prelude.Show)

instance Aeson.ToJSON SocketAddressFamily where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData SocketAddressFamily where
  rnf __SocketAddressFamily = Prelude.seq __SocketAddressFamily ()

instance Default.Default SocketAddressFamily where
  def = SocketAddressFamily_INET

instance Hashable.Hashable SocketAddressFamily where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum SocketAddressFamily where
  toThriftEnum 1 = SocketAddressFamily_INET
  toThriftEnum 2 = SocketAddressFamily_UNIX
  toThriftEnum val = SocketAddressFamily__UNKNOWN val
  fromThriftEnum SocketAddressFamily_INET = 1
  fromThriftEnum SocketAddressFamily_UNIX = 2
  fromThriftEnum (SocketAddressFamily__UNKNOWN val) = val
  allThriftEnumValues
    = [SocketAddressFamily_INET, SocketAddressFamily_UNIX]
  toThriftEnumEither 1 = Prelude.Right SocketAddressFamily_INET
  toThriftEnumEither 2 = Prelude.Right SocketAddressFamily_UNIX
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum SocketAddressFamily: "
           ++ Prelude.show val)

instance Prelude.Ord SocketAddressFamily where
  compare = Function.on Prelude.compare Thrift.fromThriftEnum

data ClientNetworkPriority = ClientNetworkPriority_LOW
                           | ClientNetworkPriority_MEDIUM
                           | ClientNetworkPriority_HIGH
                           | ClientNetworkPriority__UNKNOWN Prelude.Int
                             deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON ClientNetworkPriority where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData ClientNetworkPriority where
  rnf __ClientNetworkPriority
    = Prelude.seq __ClientNetworkPriority ()

instance Default.Default ClientNetworkPriority where
  def = ClientNetworkPriority_LOW

instance Hashable.Hashable ClientNetworkPriority where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum ClientNetworkPriority where
  toThriftEnum 0 = ClientNetworkPriority_LOW
  toThriftEnum 1 = ClientNetworkPriority_MEDIUM
  toThriftEnum 2 = ClientNetworkPriority_HIGH
  toThriftEnum val = ClientNetworkPriority__UNKNOWN val
  fromThriftEnum ClientNetworkPriority_LOW = 0
  fromThriftEnum ClientNetworkPriority_MEDIUM = 1
  fromThriftEnum ClientNetworkPriority_HIGH = 2
  fromThriftEnum (ClientNetworkPriority__UNKNOWN val) = val
  allThriftEnumValues
    = [ClientNetworkPriority_LOW, ClientNetworkPriority_MEDIUM,
       ClientNetworkPriority_HIGH]
  toThriftEnumEither 0 = Prelude.Right ClientNetworkPriority_LOW
  toThriftEnumEither 1 = Prelude.Right ClientNetworkPriority_MEDIUM
  toThriftEnumEither 2 = Prelude.Right ClientNetworkPriority_HIGH
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum ClientNetworkPriority: "
           ++ Prelude.show val)

data SocketAddress = SocketAddress{socketAddress_address_family ::
                                   SocketAddressFamily,
                                   socketAddress_address :: Prelude.Maybe Text.Text,
                                   socketAddress_port :: Prelude.Maybe Int.Int32}
                     deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON SocketAddress where
  toJSON
    (SocketAddress __field__address_family __field__address
       __field__port)
    = Aeson.object
        ("address_family" .= __field__address_family :
           Prelude.maybe Prelude.id ((:) . ("address" .=)) __field__address
             (Prelude.maybe Prelude.id ((:) . ("port" .=)) __field__port
                Prelude.mempty))

instance Thrift.ThriftStruct SocketAddress where
  buildStruct _proxy
    (SocketAddress __field__address_family __field__address
       __field__port)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "address_family" (Thrift.getI32Type _proxy)
           1
           0
           ((Thrift.genI32 _proxy . Prelude.fromIntegral .
               Thrift.fromThriftEnum)
              __field__address_family)
           :
           let (__cereal__address, __id__address)
                 = case __field__address of
                     Prelude.Just _val -> ((:)
                                             (Thrift.genField _proxy "address"
                                                (Thrift.getStringType _proxy)
                                                2
                                                1
                                                (Thrift.genText _proxy _val)),
                                           2)
                     Prelude.Nothing -> (Prelude.id, 1)
             in
             __cereal__address
               (case __field__port of
                  Prelude.Just _val -> Thrift.genFieldPrim _proxy "port"
                                         (Thrift.getI32Type _proxy)
                                         3
                                         __id__address
                                         (Thrift.genI32Prim _proxy)
                                         _val
                                         : []
                  Prelude.Nothing -> []))
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__address_family <- ST.newSTRef SocketAddressFamily_INET
            __field__address <- ST.newSTRef Prelude.Nothing
            __field__port <- ST.newSTRef Prelude.Nothing
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "SocketAddressFamily")
                                                                        ST.writeSTRef
                                                                          __field__address_family
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__address
                                                                          (Prelude.Just _val)
                                                                 3 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI32
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__port
                                                                          (Prelude.Just _val)
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__address_family <- ST.readSTRef
                                                                         __field__address_family
                                             !__val__address <- ST.readSTRef __field__address
                                             !__val__port <- ST.readSTRef __field__port
                                             Prelude.pure
                                               (SocketAddress __val__address_family __val__address
                                                  __val__port)
              _idMap
                = HashMap.fromList
                    [("address_family", 1), ("address", 2), ("port", 3)]
            _parse 0)

instance DeepSeq.NFData SocketAddress where
  rnf
    (SocketAddress __field__address_family __field__address
       __field__port)
    = DeepSeq.rnf __field__address_family `Prelude.seq`
        DeepSeq.rnf __field__address `Prelude.seq`
          DeepSeq.rnf __field__port `Prelude.seq` ()

instance Default.Default SocketAddress where
  def
    = SocketAddress SocketAddressFamily_INET Prelude.Nothing
        Prelude.Nothing

instance Hashable.Hashable SocketAddress where
  hashWithSalt __salt (SocketAddress _address_family _address _port)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt
           (Hashable.hashWithSalt __salt _address_family)
           _address)
        _port

type Timestamp = Int.Int64

type NodeIndex = Int.Int16

type ShardIndex = Int.Int16

aLL_SHARDS :: ShardIndex
aLL_SHARDS = (-1)

data NodeID = NodeID{nodeID_node_index :: Prelude.Maybe NodeIndex,
                     nodeID_address :: Prelude.Maybe SocketAddress,
                     nodeID_name :: Prelude.Maybe Text.Text}
              deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON NodeID where
  toJSON (NodeID __field__node_index __field__address __field__name)
    = Aeson.object
        (Prelude.maybe Prelude.id ((:) . ("node_index" .=))
           __field__node_index
           (Prelude.maybe Prelude.id ((:) . ("address" .=)) __field__address
              (Prelude.maybe Prelude.id ((:) . ("name" .=)) __field__name
                 Prelude.mempty)))

instance Thrift.ThriftStruct NodeID where
  buildStruct _proxy
    (NodeID __field__node_index __field__address __field__name)
    = Thrift.genStruct _proxy
        (let (__cereal__node_index, __id__node_index)
               = case __field__node_index of
                   Prelude.Just _val -> ((:)
                                           (Thrift.genField _proxy "node_index"
                                              (Thrift.getI16Type _proxy)
                                              1
                                              0
                                              (Thrift.genI16 _proxy _val)),
                                         1)
                   Prelude.Nothing -> (Prelude.id, 0)
           in
           __cereal__node_index
             (let (__cereal__address, __id__address)
                    = case __field__address of
                        Prelude.Just _val -> ((:)
                                                (Thrift.genField _proxy "address"
                                                   (Thrift.getStructType _proxy)
                                                   2
                                                   __id__node_index
                                                   (Thrift.buildStruct _proxy _val)),
                                              2)
                        Prelude.Nothing -> (Prelude.id, __id__node_index)
                in
                __cereal__address
                  (case __field__name of
                     Prelude.Just _val -> Thrift.genField _proxy "name"
                                            (Thrift.getStringType _proxy)
                                            3
                                            __id__address
                                            (Thrift.genText _proxy _val)
                                            : []
                     Prelude.Nothing -> [])))
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__node_index <- ST.newSTRef Prelude.Nothing
            __field__address <- ST.newSTRef Prelude.Nothing
            __field__name <- ST.newSTRef Prelude.Nothing
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI16Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI16
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__node_index
                                                                          (Prelude.Just _val)
                                                                 2 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__address
                                                                          (Prelude.Just _val)
                                                                 3 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__name
                                                                          (Prelude.Just _val)
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__node_index <- ST.readSTRef
                                                                     __field__node_index
                                             !__val__address <- ST.readSTRef __field__address
                                             !__val__name <- ST.readSTRef __field__name
                                             Prelude.pure
                                               (NodeID __val__node_index __val__address __val__name)
              _idMap
                = HashMap.fromList [("node_index", 1), ("address", 2), ("name", 3)]
            _parse 0)

instance DeepSeq.NFData NodeID where
  rnf (NodeID __field__node_index __field__address __field__name)
    = DeepSeq.rnf __field__node_index `Prelude.seq`
        DeepSeq.rnf __field__address `Prelude.seq`
          DeepSeq.rnf __field__name `Prelude.seq` ()

instance Default.Default NodeID where
  def = NodeID Prelude.Nothing Prelude.Nothing Prelude.Nothing

instance Hashable.Hashable NodeID where
  hashWithSalt __salt (NodeID _node_index _address _name)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _node_index)
           _address)
        _name

data ShardID = ShardID{shardID_node :: NodeID,
                       shardID_shard_index :: ShardIndex}
               deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON ShardID where
  toJSON (ShardID __field__node __field__shard_index)
    = Aeson.object
        ("node" .= __field__node :
           "shard_index" .= __field__shard_index : Prelude.mempty)

instance Thrift.ThriftStruct ShardID where
  buildStruct _proxy (ShardID __field__node __field__shard_index)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "node" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__node)
           :
           Thrift.genField _proxy "shard_index" (Thrift.getI16Type _proxy) 2 1
             (Thrift.genI16 _proxy __field__shard_index)
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__node <- ST.newSTRef Default.def
            __field__shard_index <- ST.newSTRef aLL_SHARDS
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__node
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI16Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI16
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__shard_index
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__node <- ST.readSTRef __field__node
                                             !__val__shard_index <- ST.readSTRef
                                                                      __field__shard_index
                                             Prelude.pure (ShardID __val__node __val__shard_index)
              _idMap = HashMap.fromList [("node", 1), ("shard_index", 2)]
            _parse 0)

instance DeepSeq.NFData ShardID where
  rnf (ShardID __field__node __field__shard_index)
    = DeepSeq.rnf __field__node `Prelude.seq`
        DeepSeq.rnf __field__shard_index `Prelude.seq` ()

instance Default.Default ShardID where
  def = ShardID Default.def aLL_SHARDS

instance Hashable.Hashable ShardID where
  hashWithSalt __salt (ShardID _node _shard_index)
    = Hashable.hashWithSalt (Hashable.hashWithSalt __salt _node)
        _shard_index

type StorageSet = [ShardID]

type ShardSet = [ShardID]

data Role = Role_STORAGE
          | Role_SEQUENCER
          | Role__UNKNOWN Prelude.Int
            deriving (Prelude.Eq, Prelude.Show)

instance Aeson.ToJSON Role where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData Role where
  rnf __Role = Prelude.seq __Role ()

instance Default.Default Role where
  def = Role_STORAGE

instance Hashable.Hashable Role where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum Role where
  toThriftEnum 1 = Role_STORAGE
  toThriftEnum 2 = Role_SEQUENCER
  toThriftEnum val = Role__UNKNOWN val
  fromThriftEnum Role_STORAGE = 1
  fromThriftEnum Role_SEQUENCER = 2
  fromThriftEnum (Role__UNKNOWN val) = val
  allThriftEnumValues = [Role_STORAGE, Role_SEQUENCER]
  toThriftEnumEither 1 = Prelude.Right Role_STORAGE
  toThriftEnumEither 2 = Prelude.Right Role_SEQUENCER
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum Role: " ++
           Prelude.show val)

instance Prelude.Ord Role where
  compare = Function.on Prelude.compare Thrift.fromThriftEnum

data Addresses = Addresses{addresses_gossip ::
                           Prelude.Maybe SocketAddress,
                           addresses_ssl :: Prelude.Maybe SocketAddress,
                           addresses_admin :: Prelude.Maybe SocketAddress,
                           addresses_server_to_server :: Prelude.Maybe SocketAddress,
                           addresses_server_thrift_api :: Prelude.Maybe SocketAddress,
                           addresses_client_thrift_api :: Prelude.Maybe SocketAddress,
                           addresses_addresses_per_priority ::
                           Map.Map ClientNetworkPriority SocketAddress}
                 deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON Addresses where
  toJSON
    (Addresses __field__gossip __field__ssl __field__admin
       __field__server_to_server __field__server_thrift_api
       __field__client_thrift_api __field__addresses_per_priority)
    = Aeson.object
        (Prelude.maybe Prelude.id ((:) . ("gossip" .=)) __field__gossip
           (Prelude.maybe Prelude.id ((:) . ("ssl" .=)) __field__ssl
              (Prelude.maybe Prelude.id ((:) . ("admin" .=)) __field__admin
                 (Prelude.maybe Prelude.id ((:) . ("server_to_server" .=))
                    __field__server_to_server
                    (Prelude.maybe Prelude.id ((:) . ("server_thrift_api" .=))
                       __field__server_thrift_api
                       (Prelude.maybe Prelude.id ((:) . ("client_thrift_api" .=))
                          __field__client_thrift_api
                          ("addresses_per_priority" .=
                             Map.mapKeys Thrift.keyToStr __field__addresses_per_priority
                             : Prelude.mempty)))))))

instance Thrift.ThriftStruct Addresses where
  buildStruct _proxy
    (Addresses __field__gossip __field__ssl __field__admin
       __field__server_to_server __field__server_thrift_api
       __field__client_thrift_api __field__addresses_per_priority)
    = Thrift.genStruct _proxy
        (let (__cereal__gossip, __id__gossip)
               = case __field__gossip of
                   Prelude.Just _val -> ((:)
                                           (Thrift.genField _proxy "gossip"
                                              (Thrift.getStructType _proxy)
                                              1
                                              0
                                              (Thrift.buildStruct _proxy _val)),
                                         1)
                   Prelude.Nothing -> (Prelude.id, 0)
           in
           __cereal__gossip
             (let (__cereal__ssl, __id__ssl)
                    = case __field__ssl of
                        Prelude.Just _val -> ((:)
                                                (Thrift.genField _proxy "ssl"
                                                   (Thrift.getStructType _proxy)
                                                   2
                                                   __id__gossip
                                                   (Thrift.buildStruct _proxy _val)),
                                              2)
                        Prelude.Nothing -> (Prelude.id, __id__gossip)
                in
                __cereal__ssl
                  (let (__cereal__admin, __id__admin)
                         = case __field__admin of
                             Prelude.Just _val -> ((:)
                                                     (Thrift.genField _proxy "admin"
                                                        (Thrift.getStructType _proxy)
                                                        3
                                                        __id__ssl
                                                        (Thrift.buildStruct _proxy _val)),
                                                   3)
                             Prelude.Nothing -> (Prelude.id, __id__ssl)
                     in
                     __cereal__admin
                       (let (__cereal__server_to_server, __id__server_to_server)
                              = case __field__server_to_server of
                                  Prelude.Just _val -> ((:)
                                                          (Thrift.genField _proxy "server_to_server"
                                                             (Thrift.getStructType _proxy)
                                                             4
                                                             __id__admin
                                                             (Thrift.buildStruct _proxy _val)),
                                                        4)
                                  Prelude.Nothing -> (Prelude.id, __id__admin)
                          in
                          __cereal__server_to_server
                            (let (__cereal__server_thrift_api, __id__server_thrift_api)
                                   = case __field__server_thrift_api of
                                       Prelude.Just _val -> ((:)
                                                               (Thrift.genField _proxy
                                                                  "server_thrift_api"
                                                                  (Thrift.getStructType _proxy)
                                                                  5
                                                                  __id__server_to_server
                                                                  (Thrift.buildStruct _proxy _val)),
                                                             5)
                                       Prelude.Nothing -> (Prelude.id, __id__server_to_server)
                               in
                               __cereal__server_thrift_api
                                 (let (__cereal__client_thrift_api, __id__client_thrift_api)
                                        = case __field__client_thrift_api of
                                            Prelude.Just _val -> ((:)
                                                                    (Thrift.genField _proxy
                                                                       "client_thrift_api"
                                                                       (Thrift.getStructType _proxy)
                                                                       6
                                                                       __id__server_thrift_api
                                                                       (Thrift.buildStruct _proxy
                                                                          _val)),
                                                                  6)
                                            Prelude.Nothing -> (Prelude.id, __id__server_thrift_api)
                                    in
                                    __cereal__client_thrift_api
                                      (Thrift.genField _proxy "addresses_per_priority"
                                         (Thrift.getMapType _proxy)
                                         7
                                         __id__client_thrift_api
                                         ((Thrift.genMap _proxy (Thrift.getI32Type _proxy)
                                             (Thrift.getStructType _proxy)
                                             Prelude.False
                                             (Thrift.genI32 _proxy . Prelude.fromIntegral .
                                                Thrift.fromThriftEnum)
                                             (Thrift.buildStruct _proxy)
                                             . Map.toList)
                                            __field__addresses_per_priority)
                                         : [])))))))
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__gossip <- ST.newSTRef Prelude.Nothing
            __field__ssl <- ST.newSTRef Prelude.Nothing
            __field__admin <- ST.newSTRef Prelude.Nothing
            __field__server_to_server <- ST.newSTRef Prelude.Nothing
            __field__server_thrift_api <- ST.newSTRef Prelude.Nothing
            __field__client_thrift_api <- ST.newSTRef Prelude.Nothing
            __field__addresses_per_priority <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__gossip
                                                                          (Prelude.Just _val)
                                                                 2 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__ssl
                                                                          (Prelude.Just _val)
                                                                 3 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__admin
                                                                          (Prelude.Just _val)
                                                                 4 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__server_to_server
                                                                          (Prelude.Just _val)
                                                                 5 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__server_thrift_api
                                                                          (Prelude.Just _val)
                                                                 6 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__client_thrift_api
                                                                          (Prelude.Just _val)
                                                                 7 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Map.fromList <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseEnum
                                                                                           _proxy
                                                                                           "ClientNetworkPriority")
                                                                                        (Thrift.parseStruct
                                                                                           _proxy)
                                                                                        Prelude.False)
                                                                        ST.writeSTRef
                                                                          __field__addresses_per_priority
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__gossip <- ST.readSTRef
                                                                 __field__gossip
                                             !__val__ssl <- ST.readSTRef __field__ssl
                                             !__val__admin <- ST.readSTRef __field__admin
                                             !__val__server_to_server <- ST.readSTRef
                                                                           __field__server_to_server
                                             !__val__server_thrift_api <- ST.readSTRef
                                                                            __field__server_thrift_api
                                             !__val__client_thrift_api <- ST.readSTRef
                                                                            __field__client_thrift_api
                                             !__val__addresses_per_priority <- ST.readSTRef
                                                                                 __field__addresses_per_priority
                                             Prelude.pure
                                               (Addresses __val__gossip __val__ssl __val__admin
                                                  __val__server_to_server
                                                  __val__server_thrift_api
                                                  __val__client_thrift_api
                                                  __val__addresses_per_priority)
              _idMap
                = HashMap.fromList
                    [("gossip", 1), ("ssl", 2), ("admin", 3), ("server_to_server", 4),
                     ("server_thrift_api", 5), ("client_thrift_api", 6),
                     ("addresses_per_priority", 7)]
            _parse 0)

instance DeepSeq.NFData Addresses where
  rnf
    (Addresses __field__gossip __field__ssl __field__admin
       __field__server_to_server __field__server_thrift_api
       __field__client_thrift_api __field__addresses_per_priority)
    = DeepSeq.rnf __field__gossip `Prelude.seq`
        DeepSeq.rnf __field__ssl `Prelude.seq`
          DeepSeq.rnf __field__admin `Prelude.seq`
            DeepSeq.rnf __field__server_to_server `Prelude.seq`
              DeepSeq.rnf __field__server_thrift_api `Prelude.seq`
                DeepSeq.rnf __field__client_thrift_api `Prelude.seq`
                  DeepSeq.rnf __field__addresses_per_priority `Prelude.seq` ()

instance Default.Default Addresses where
  def
    = Addresses Prelude.Nothing Prelude.Nothing Prelude.Nothing
        Prelude.Nothing
        Prelude.Nothing
        Prelude.Nothing
        Default.def

instance Hashable.Hashable Addresses where
  hashWithSalt __salt
    (Addresses _gossip _ssl _admin _server_to_server _server_thrift_api
       _client_thrift_api _addresses_per_priority)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt
           (Hashable.hashWithSalt
              (Hashable.hashWithSalt
                 (Hashable.hashWithSalt
                    (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _gossip) _ssl)
                    _admin)
                 _server_to_server)
              _server_thrift_api)
           _client_thrift_api)
        ((Prelude.map (\ (_k, _v) -> (_k, _v)) . Map.toAscList)
           _addresses_per_priority)

data LocationScope = LocationScope_NODE
                   | LocationScope_RACK
                   | LocationScope_ROW
                   | LocationScope_CLUSTER
                   | LocationScope_DATA_CENTER
                   | LocationScope_REGION
                   | LocationScope_ROOT
                   | LocationScope__UNKNOWN Prelude.Int
                     deriving (Prelude.Eq, Prelude.Show)

instance Aeson.ToJSON LocationScope where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData LocationScope where
  rnf __LocationScope = Prelude.seq __LocationScope ()

instance Default.Default LocationScope where
  def = LocationScope_NODE

instance Hashable.Hashable LocationScope where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum LocationScope where
  toThriftEnum 1 = LocationScope_NODE
  toThriftEnum 2 = LocationScope_RACK
  toThriftEnum 3 = LocationScope_ROW
  toThriftEnum 4 = LocationScope_CLUSTER
  toThriftEnum 5 = LocationScope_DATA_CENTER
  toThriftEnum 6 = LocationScope_REGION
  toThriftEnum 99 = LocationScope_ROOT
  toThriftEnum val = LocationScope__UNKNOWN val
  fromThriftEnum LocationScope_NODE = 1
  fromThriftEnum LocationScope_RACK = 2
  fromThriftEnum LocationScope_ROW = 3
  fromThriftEnum LocationScope_CLUSTER = 4
  fromThriftEnum LocationScope_DATA_CENTER = 5
  fromThriftEnum LocationScope_REGION = 6
  fromThriftEnum LocationScope_ROOT = 99
  fromThriftEnum (LocationScope__UNKNOWN val) = val
  allThriftEnumValues
    = [LocationScope_NODE, LocationScope_RACK, LocationScope_ROW,
       LocationScope_CLUSTER, LocationScope_DATA_CENTER,
       LocationScope_REGION, LocationScope_ROOT]
  toThriftEnumEither 1 = Prelude.Right LocationScope_NODE
  toThriftEnumEither 2 = Prelude.Right LocationScope_RACK
  toThriftEnumEither 3 = Prelude.Right LocationScope_ROW
  toThriftEnumEither 4 = Prelude.Right LocationScope_CLUSTER
  toThriftEnumEither 5 = Prelude.Right LocationScope_DATA_CENTER
  toThriftEnumEither 6 = Prelude.Right LocationScope_REGION
  toThriftEnumEither 99 = Prelude.Right LocationScope_ROOT
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum LocationScope: "
           ++ Prelude.show val)

instance Prelude.Ord LocationScope where
  compare = Function.on Prelude.compare Thrift.fromThriftEnum

type ReplicationProperty = Map.Map LocationScope Int.Int32

type Location = Map.Map LocationScope Text.Text
