-----------------------------------------------------------------
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
--  @generated
-----------------------------------------------------------------
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE BangPatterns #-}
{-# OPTIONS_GHC -fno-warn-unused-imports#-}
{-# OPTIONS_GHC -fno-warn-overlapping-patterns#-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns#-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
module ClusterMembership.Types
       (ClusterMembershipFailureReason(ClusterMembershipFailureReason_UNKNOWN,
                                       ClusterMembershipFailureReason_NO_MATCH_IN_CONFIG,
                                       ClusterMembershipFailureReason_NOT_DEAD,
                                       ClusterMembershipFailureReason_NOT_DISABLED,
                                       ClusterMembershipFailureReason_ALREADY_EXISTS,
                                       ClusterMembershipFailureReason_INVALID_REQUEST_NODES_CONFIG,
                                       ClusterMembershipFailureReason__UNKNOWN),
        ClusterMembershipFailedNode(ClusterMembershipFailedNode,
                                    clusterMembershipFailedNode_node_id,
                                    clusterMembershipFailedNode_reason,
                                    clusterMembershipFailedNode_message),
        ClusterMembershipOperationFailed(ClusterMembershipOperationFailed,
                                         clusterMembershipOperationFailed_failed_nodes),
        aNY_NODE_IDX,
        AddSingleNodeRequest(AddSingleNodeRequest,
                             addSingleNodeRequest_new_config),
        AddNodesRequest(AddNodesRequest,
                        addNodesRequest_new_node_requests),
        AddNodesResponse(AddNodesResponse, addNodesResponse_added_nodes,
                         addNodesResponse_new_nodes_configuration_version),
        UpdateSingleNodeRequest(UpdateSingleNodeRequest,
                                updateSingleNodeRequest_node_to_be_updated,
                                updateSingleNodeRequest_new_config),
        UpdateNodesRequest(UpdateNodesRequest,
                           updateNodesRequest_node_requests),
        UpdateNodesResponse(UpdateNodesResponse,
                            updateNodesResponse_updated_nodes,
                            updateNodesResponse_new_nodes_configuration_version),
        RemoveNodesRequest(RemoveNodesRequest,
                           removeNodesRequest_node_filters),
        RemoveNodesResponse(RemoveNodesResponse,
                            removeNodesResponse_removed_nodes,
                            removeNodesResponse_new_nodes_configuration_version),
        MarkShardsAsProvisionedRequest(MarkShardsAsProvisionedRequest,
                                       markShardsAsProvisionedRequest_shards),
        MarkShardsAsProvisionedResponse(MarkShardsAsProvisionedResponse,
                                        markShardsAsProvisionedResponse_updated_shards,
                                        markShardsAsProvisionedResponse_new_nodes_configuration_version),
        BumpGenerationRequest(BumpGenerationRequest,
                              bumpGenerationRequest_node_filters),
        BumpGenerationResponse(BumpGenerationResponse,
                               bumpGenerationResponse_bumped_nodes,
                               bumpGenerationResponse_new_nodes_configuration_version),
        BootstrapClusterRequest(BootstrapClusterRequest,
                                bootstrapClusterRequest_metadata_replication_property),
        BootstrapClusterResponse(BootstrapClusterResponse,
                                 bootstrapClusterResponse_new_nodes_configuration_version))
       where
import qualified Common.Types as Common
import qualified Control.DeepSeq as DeepSeq
import qualified Control.Exception as Exception
import qualified Control.Monad as Monad
import qualified Control.Monad.ST.Trans as ST
import qualified Control.Monad.Trans.Class as Trans
import qualified Data.Aeson as Aeson
import qualified Data.Aeson.Types as Aeson
import qualified Data.Default as Default
import qualified Data.Function as Function
import qualified Data.HashMap.Strict as HashMap
import qualified Data.Hashable as Hashable
import qualified Data.Int as Int
import qualified Data.List as List
import qualified Data.Map.Strict as Map
import qualified Data.Ord as Ord
import qualified Data.Text as Text
import qualified Data.Text.Encoding as Text
import qualified Nodes.Types as Nodes
import qualified Prelude as Prelude
import qualified Thrift.Binary.Parser as Parser
import qualified Thrift.CodegenTypesOnly as Thrift
import Control.Applicative ((<|>), (*>), (<*))
import Data.Aeson ((.:), (.:?), (.=), (.!=))
import Data.Monoid ((<>))
import Prelude ((.), (++), (>), (==))
import Prelude ((.), (<$>), (<*>), (>>=), (==), (/=), (<), (++))

data ClusterMembershipFailureReason = ClusterMembershipFailureReason_UNKNOWN
                                    | ClusterMembershipFailureReason_NO_MATCH_IN_CONFIG
                                    | ClusterMembershipFailureReason_NOT_DEAD
                                    | ClusterMembershipFailureReason_NOT_DISABLED
                                    | ClusterMembershipFailureReason_ALREADY_EXISTS
                                    | ClusterMembershipFailureReason_INVALID_REQUEST_NODES_CONFIG
                                    | ClusterMembershipFailureReason__UNKNOWN Prelude.Int
                                      deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON ClusterMembershipFailureReason where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData ClusterMembershipFailureReason where
  rnf __ClusterMembershipFailureReason
    = Prelude.seq __ClusterMembershipFailureReason ()

instance Default.Default ClusterMembershipFailureReason where
  def = ClusterMembershipFailureReason_UNKNOWN

instance Hashable.Hashable ClusterMembershipFailureReason where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum ClusterMembershipFailureReason where
  toThriftEnum 0 = ClusterMembershipFailureReason_UNKNOWN
  toThriftEnum 1 = ClusterMembershipFailureReason_NO_MATCH_IN_CONFIG
  toThriftEnum 2 = ClusterMembershipFailureReason_NOT_DEAD
  toThriftEnum 3 = ClusterMembershipFailureReason_NOT_DISABLED
  toThriftEnum 4 = ClusterMembershipFailureReason_ALREADY_EXISTS
  toThriftEnum 5
    = ClusterMembershipFailureReason_INVALID_REQUEST_NODES_CONFIG
  toThriftEnum val = ClusterMembershipFailureReason__UNKNOWN val
  fromThriftEnum ClusterMembershipFailureReason_UNKNOWN = 0
  fromThriftEnum ClusterMembershipFailureReason_NO_MATCH_IN_CONFIG
    = 1
  fromThriftEnum ClusterMembershipFailureReason_NOT_DEAD = 2
  fromThriftEnum ClusterMembershipFailureReason_NOT_DISABLED = 3
  fromThriftEnum ClusterMembershipFailureReason_ALREADY_EXISTS = 4
  fromThriftEnum
    ClusterMembershipFailureReason_INVALID_REQUEST_NODES_CONFIG = 5
  fromThriftEnum (ClusterMembershipFailureReason__UNKNOWN val) = val
  allThriftEnumValues
    = [ClusterMembershipFailureReason_UNKNOWN,
       ClusterMembershipFailureReason_NO_MATCH_IN_CONFIG,
       ClusterMembershipFailureReason_NOT_DEAD,
       ClusterMembershipFailureReason_NOT_DISABLED,
       ClusterMembershipFailureReason_ALREADY_EXISTS,
       ClusterMembershipFailureReason_INVALID_REQUEST_NODES_CONFIG]
  toThriftEnumEither 0
    = Prelude.Right ClusterMembershipFailureReason_UNKNOWN
  toThriftEnumEither 1
    = Prelude.Right ClusterMembershipFailureReason_NO_MATCH_IN_CONFIG
  toThriftEnumEither 2
    = Prelude.Right ClusterMembershipFailureReason_NOT_DEAD
  toThriftEnumEither 3
    = Prelude.Right ClusterMembershipFailureReason_NOT_DISABLED
  toThriftEnumEither 4
    = Prelude.Right ClusterMembershipFailureReason_ALREADY_EXISTS
  toThriftEnumEither 5
    = Prelude.Right
        ClusterMembershipFailureReason_INVALID_REQUEST_NODES_CONFIG
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum ClusterMembershipFailureReason: "
           ++ Prelude.show val)

data ClusterMembershipFailedNode = ClusterMembershipFailedNode{clusterMembershipFailedNode_node_id
                                                               :: Common.NodeID,
                                                               clusterMembershipFailedNode_reason ::
                                                               ClusterMembershipFailureReason,
                                                               clusterMembershipFailedNode_message
                                                               :: Text.Text}
                                   deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON ClusterMembershipFailedNode where
  toJSON
    (ClusterMembershipFailedNode __field__node_id __field__reason
       __field__message)
    = Aeson.object
        ("node_id" .= __field__node_id :
           "reason" .= __field__reason :
             "message" .= __field__message : Prelude.mempty)

instance Thrift.ThriftStruct ClusterMembershipFailedNode where
  buildStruct _proxy
    (ClusterMembershipFailedNode __field__node_id __field__reason
       __field__message)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "node_id" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__node_id)
           :
           Thrift.genField _proxy "reason" (Thrift.getI32Type _proxy) 2 1
             ((Thrift.genI32 _proxy . Prelude.fromIntegral .
                 Thrift.fromThriftEnum)
                __field__reason)
             :
             Thrift.genField _proxy "message" (Thrift.getStringType _proxy) 3 2
               (Thrift.genText _proxy __field__message)
               : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__node_id <- ST.newSTRef Default.def
            __field__reason <- ST.newSTRef Default.def
            __field__message <- ST.newSTRef ""
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__node_id
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "ClusterMembershipFailureReason")
                                                                        ST.writeSTRef
                                                                          __field__reason
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__message
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__node_id <- ST.readSTRef
                                                                  __field__node_id
                                             !__val__reason <- ST.readSTRef __field__reason
                                             !__val__message <- ST.readSTRef __field__message
                                             Prelude.pure
                                               (ClusterMembershipFailedNode __val__node_id
                                                  __val__reason
                                                  __val__message)
              _idMap
                = HashMap.fromList [("node_id", 1), ("reason", 2), ("message", 3)]
            _parse 0)

instance DeepSeq.NFData ClusterMembershipFailedNode where
  rnf
    (ClusterMembershipFailedNode __field__node_id __field__reason
       __field__message)
    = DeepSeq.rnf __field__node_id `Prelude.seq`
        DeepSeq.rnf __field__reason `Prelude.seq`
          DeepSeq.rnf __field__message `Prelude.seq` ()

instance Default.Default ClusterMembershipFailedNode where
  def = ClusterMembershipFailedNode Default.def Default.def ""

instance Hashable.Hashable ClusterMembershipFailedNode where
  hashWithSalt __salt
    (ClusterMembershipFailedNode _node_id _reason _message)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _node_id)
           _reason)
        _message

newtype ClusterMembershipOperationFailed = ClusterMembershipOperationFailed{clusterMembershipOperationFailed_failed_nodes
                                                                            ::
                                                                            [ClusterMembershipFailedNode]}
                                           deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON ClusterMembershipOperationFailed where
  toJSON (ClusterMembershipOperationFailed __field__failed_nodes)
    = Aeson.object
        ("failed_nodes" .= __field__failed_nodes : Prelude.mempty)

instance Thrift.ThriftStruct ClusterMembershipOperationFailed where
  buildStruct _proxy
    (ClusterMembershipOperationFailed __field__failed_nodes)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "failed_nodes" (Thrift.getListType _proxy)
           1
           0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__failed_nodes)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__failed_nodes <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__failed_nodes
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__failed_nodes <- ST.readSTRef
                                                                       __field__failed_nodes
                                             Prelude.pure
                                               (ClusterMembershipOperationFailed
                                                  __val__failed_nodes)
              _idMap = HashMap.fromList [("failed_nodes", 1)]
            _parse 0)

instance DeepSeq.NFData ClusterMembershipOperationFailed where
  rnf (ClusterMembershipOperationFailed __field__failed_nodes)
    = DeepSeq.rnf __field__failed_nodes `Prelude.seq` ()

instance Default.Default ClusterMembershipOperationFailed where
  def = ClusterMembershipOperationFailed Default.def

instance Hashable.Hashable ClusterMembershipOperationFailed where
  hashWithSalt __salt
    (ClusterMembershipOperationFailed _failed_nodes)
    = Hashable.hashWithSalt __salt _failed_nodes

instance Exception.Exception ClusterMembershipOperationFailed

aNY_NODE_IDX :: Common.NodeIndex
aNY_NODE_IDX = (-1)

newtype AddSingleNodeRequest = AddSingleNodeRequest{addSingleNodeRequest_new_config
                                                    :: Nodes.NodeConfig}
                               deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON AddSingleNodeRequest where
  toJSON (AddSingleNodeRequest __field__new_config)
    = Aeson.object
        ("new_config" .= __field__new_config : Prelude.mempty)

instance Thrift.ThriftStruct AddSingleNodeRequest where
  buildStruct _proxy (AddSingleNodeRequest __field__new_config)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "new_config" (Thrift.getStructType _proxy)
           1
           0
           (Thrift.buildStruct _proxy __field__new_config)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__new_config <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__new_config
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__new_config <- ST.readSTRef
                                                                     __field__new_config
                                             Prelude.pure (AddSingleNodeRequest __val__new_config)
              _idMap = HashMap.fromList [("new_config", 1)]
            _parse 0)

instance DeepSeq.NFData AddSingleNodeRequest where
  rnf (AddSingleNodeRequest __field__new_config)
    = DeepSeq.rnf __field__new_config `Prelude.seq` ()

instance Default.Default AddSingleNodeRequest where
  def = AddSingleNodeRequest Default.def

instance Hashable.Hashable AddSingleNodeRequest where
  hashWithSalt __salt (AddSingleNodeRequest _new_config)
    = Hashable.hashWithSalt __salt _new_config

newtype AddNodesRequest = AddNodesRequest{addNodesRequest_new_node_requests
                                          :: [AddSingleNodeRequest]}
                          deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON AddNodesRequest where
  toJSON (AddNodesRequest __field__new_node_requests)
    = Aeson.object
        ("new_node_requests" .= __field__new_node_requests :
           Prelude.mempty)

instance Thrift.ThriftStruct AddNodesRequest where
  buildStruct _proxy (AddNodesRequest __field__new_node_requests)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "new_node_requests"
           (Thrift.getListType _proxy)
           1
           0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__new_node_requests)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__new_node_requests <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__new_node_requests
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__new_node_requests <- ST.readSTRef
                                                                            __field__new_node_requests
                                             Prelude.pure (AddNodesRequest __val__new_node_requests)
              _idMap = HashMap.fromList [("new_node_requests", 1)]
            _parse 0)

instance DeepSeq.NFData AddNodesRequest where
  rnf (AddNodesRequest __field__new_node_requests)
    = DeepSeq.rnf __field__new_node_requests `Prelude.seq` ()

instance Default.Default AddNodesRequest where
  def = AddNodesRequest Default.def

instance Hashable.Hashable AddNodesRequest where
  hashWithSalt __salt (AddNodesRequest _new_node_requests)
    = Hashable.hashWithSalt __salt _new_node_requests

data AddNodesResponse = AddNodesResponse{addNodesResponse_added_nodes
                                         :: [Nodes.NodeConfig],
                                         addNodesResponse_new_nodes_configuration_version ::
                                         Common.Unsigned64}
                        deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON AddNodesResponse where
  toJSON
    (AddNodesResponse __field__added_nodes
       __field__new_nodes_configuration_version)
    = Aeson.object
        ("added_nodes" .= __field__added_nodes :
           "new_nodes_configuration_version" .=
             __field__new_nodes_configuration_version
             : Prelude.mempty)

instance Thrift.ThriftStruct AddNodesResponse where
  buildStruct _proxy
    (AddNodesResponse __field__added_nodes
       __field__new_nodes_configuration_version)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "added_nodes" (Thrift.getListType _proxy) 1
           0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__added_nodes)
           :
           Thrift.genField _proxy "new_nodes_configuration_version"
             (Thrift.getI64Type _proxy)
             2
             1
             (Thrift.genI64 _proxy __field__new_nodes_configuration_version)
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__added_nodes <- ST.newSTRef Default.def
            __field__new_nodes_configuration_version <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__added_nodes
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__new_nodes_configuration_version
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__added_nodes <- ST.readSTRef
                                                                      __field__added_nodes
                                             !__val__new_nodes_configuration_version <- ST.readSTRef
                                                                                          __field__new_nodes_configuration_version
                                             Prelude.pure
                                               (AddNodesResponse __val__added_nodes
                                                  __val__new_nodes_configuration_version)
              _idMap
                = HashMap.fromList
                    [("added_nodes", 1), ("new_nodes_configuration_version", 2)]
            _parse 0)

instance DeepSeq.NFData AddNodesResponse where
  rnf
    (AddNodesResponse __field__added_nodes
       __field__new_nodes_configuration_version)
    = DeepSeq.rnf __field__added_nodes `Prelude.seq`
        DeepSeq.rnf __field__new_nodes_configuration_version `Prelude.seq`
          ()

instance Default.Default AddNodesResponse where
  def = AddNodesResponse Default.def Default.def

instance Hashable.Hashable AddNodesResponse where
  hashWithSalt __salt
    (AddNodesResponse _added_nodes _new_nodes_configuration_version)
    = Hashable.hashWithSalt (Hashable.hashWithSalt __salt _added_nodes)
        _new_nodes_configuration_version

data UpdateSingleNodeRequest = UpdateSingleNodeRequest{updateSingleNodeRequest_node_to_be_updated
                                                       :: Common.NodeID,
                                                       updateSingleNodeRequest_new_config ::
                                                       Nodes.NodeConfig}
                               deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON UpdateSingleNodeRequest where
  toJSON
    (UpdateSingleNodeRequest __field__node_to_be_updated
       __field__new_config)
    = Aeson.object
        ("node_to_be_updated" .= __field__node_to_be_updated :
           "new_config" .= __field__new_config : Prelude.mempty)

instance Thrift.ThriftStruct UpdateSingleNodeRequest where
  buildStruct _proxy
    (UpdateSingleNodeRequest __field__node_to_be_updated
       __field__new_config)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "node_to_be_updated"
           (Thrift.getStructType _proxy)
           1
           0
           (Thrift.buildStruct _proxy __field__node_to_be_updated)
           :
           Thrift.genField _proxy "new_config" (Thrift.getStructType _proxy) 2
             1
             (Thrift.buildStruct _proxy __field__new_config)
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__node_to_be_updated <- ST.newSTRef Default.def
            __field__new_config <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__node_to_be_updated
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__new_config
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__node_to_be_updated <- ST.readSTRef
                                                                             __field__node_to_be_updated
                                             !__val__new_config <- ST.readSTRef __field__new_config
                                             Prelude.pure
                                               (UpdateSingleNodeRequest __val__node_to_be_updated
                                                  __val__new_config)
              _idMap
                = HashMap.fromList [("node_to_be_updated", 1), ("new_config", 2)]
            _parse 0)

instance DeepSeq.NFData UpdateSingleNodeRequest where
  rnf
    (UpdateSingleNodeRequest __field__node_to_be_updated
       __field__new_config)
    = DeepSeq.rnf __field__node_to_be_updated `Prelude.seq`
        DeepSeq.rnf __field__new_config `Prelude.seq` ()

instance Default.Default UpdateSingleNodeRequest where
  def = UpdateSingleNodeRequest Default.def Default.def

instance Hashable.Hashable UpdateSingleNodeRequest where
  hashWithSalt __salt
    (UpdateSingleNodeRequest _node_to_be_updated _new_config)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt __salt _node_to_be_updated)
        _new_config

newtype UpdateNodesRequest = UpdateNodesRequest{updateNodesRequest_node_requests
                                                :: [UpdateSingleNodeRequest]}
                             deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON UpdateNodesRequest where
  toJSON (UpdateNodesRequest __field__node_requests)
    = Aeson.object
        ("node_requests" .= __field__node_requests : Prelude.mempty)

instance Thrift.ThriftStruct UpdateNodesRequest where
  buildStruct _proxy (UpdateNodesRequest __field__node_requests)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "node_requests" (Thrift.getListType _proxy)
           1
           0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__node_requests)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__node_requests <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__node_requests
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__node_requests <- ST.readSTRef
                                                                        __field__node_requests
                                             Prelude.pure (UpdateNodesRequest __val__node_requests)
              _idMap = HashMap.fromList [("node_requests", 1)]
            _parse 0)

instance DeepSeq.NFData UpdateNodesRequest where
  rnf (UpdateNodesRequest __field__node_requests)
    = DeepSeq.rnf __field__node_requests `Prelude.seq` ()

instance Default.Default UpdateNodesRequest where
  def = UpdateNodesRequest Default.def

instance Hashable.Hashable UpdateNodesRequest where
  hashWithSalt __salt (UpdateNodesRequest _node_requests)
    = Hashable.hashWithSalt __salt _node_requests

data UpdateNodesResponse = UpdateNodesResponse{updateNodesResponse_updated_nodes
                                               :: [Nodes.NodeConfig],
                                               updateNodesResponse_new_nodes_configuration_version
                                               :: Common.Unsigned64}
                           deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON UpdateNodesResponse where
  toJSON
    (UpdateNodesResponse __field__updated_nodes
       __field__new_nodes_configuration_version)
    = Aeson.object
        ("updated_nodes" .= __field__updated_nodes :
           "new_nodes_configuration_version" .=
             __field__new_nodes_configuration_version
             : Prelude.mempty)

instance Thrift.ThriftStruct UpdateNodesResponse where
  buildStruct _proxy
    (UpdateNodesResponse __field__updated_nodes
       __field__new_nodes_configuration_version)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "updated_nodes" (Thrift.getListType _proxy)
           1
           0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__updated_nodes)
           :
           Thrift.genField _proxy "new_nodes_configuration_version"
             (Thrift.getI64Type _proxy)
             2
             1
             (Thrift.genI64 _proxy __field__new_nodes_configuration_version)
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__updated_nodes <- ST.newSTRef Default.def
            __field__new_nodes_configuration_version <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__updated_nodes
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__new_nodes_configuration_version
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__updated_nodes <- ST.readSTRef
                                                                        __field__updated_nodes
                                             !__val__new_nodes_configuration_version <- ST.readSTRef
                                                                                          __field__new_nodes_configuration_version
                                             Prelude.pure
                                               (UpdateNodesResponse __val__updated_nodes
                                                  __val__new_nodes_configuration_version)
              _idMap
                = HashMap.fromList
                    [("updated_nodes", 1), ("new_nodes_configuration_version", 2)]
            _parse 0)

instance DeepSeq.NFData UpdateNodesResponse where
  rnf
    (UpdateNodesResponse __field__updated_nodes
       __field__new_nodes_configuration_version)
    = DeepSeq.rnf __field__updated_nodes `Prelude.seq`
        DeepSeq.rnf __field__new_nodes_configuration_version `Prelude.seq`
          ()

instance Default.Default UpdateNodesResponse where
  def = UpdateNodesResponse Default.def Default.def

instance Hashable.Hashable UpdateNodesResponse where
  hashWithSalt __salt
    (UpdateNodesResponse _updated_nodes
       _new_nodes_configuration_version)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt __salt _updated_nodes)
        _new_nodes_configuration_version

newtype RemoveNodesRequest = RemoveNodesRequest{removeNodesRequest_node_filters
                                                :: [Nodes.NodesFilter]}
                             deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON RemoveNodesRequest where
  toJSON (RemoveNodesRequest __field__node_filters)
    = Aeson.object
        ("node_filters" .= __field__node_filters : Prelude.mempty)

instance Thrift.ThriftStruct RemoveNodesRequest where
  buildStruct _proxy (RemoveNodesRequest __field__node_filters)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "node_filters" (Thrift.getListType _proxy)
           1
           0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__node_filters)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__node_filters <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__node_filters
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__node_filters <- ST.readSTRef
                                                                       __field__node_filters
                                             Prelude.pure (RemoveNodesRequest __val__node_filters)
              _idMap = HashMap.fromList [("node_filters", 1)]
            _parse 0)

instance DeepSeq.NFData RemoveNodesRequest where
  rnf (RemoveNodesRequest __field__node_filters)
    = DeepSeq.rnf __field__node_filters `Prelude.seq` ()

instance Default.Default RemoveNodesRequest where
  def = RemoveNodesRequest Default.def

instance Hashable.Hashable RemoveNodesRequest where
  hashWithSalt __salt (RemoveNodesRequest _node_filters)
    = Hashable.hashWithSalt __salt _node_filters

data RemoveNodesResponse = RemoveNodesResponse{removeNodesResponse_removed_nodes
                                               :: [Common.NodeID],
                                               removeNodesResponse_new_nodes_configuration_version
                                               :: Common.Unsigned64}
                           deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON RemoveNodesResponse where
  toJSON
    (RemoveNodesResponse __field__removed_nodes
       __field__new_nodes_configuration_version)
    = Aeson.object
        ("removed_nodes" .= __field__removed_nodes :
           "new_nodes_configuration_version" .=
             __field__new_nodes_configuration_version
             : Prelude.mempty)

instance Thrift.ThriftStruct RemoveNodesResponse where
  buildStruct _proxy
    (RemoveNodesResponse __field__removed_nodes
       __field__new_nodes_configuration_version)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "removed_nodes" (Thrift.getListType _proxy)
           1
           0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__removed_nodes)
           :
           Thrift.genField _proxy "new_nodes_configuration_version"
             (Thrift.getI64Type _proxy)
             2
             1
             (Thrift.genI64 _proxy __field__new_nodes_configuration_version)
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__removed_nodes <- ST.newSTRef Default.def
            __field__new_nodes_configuration_version <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__removed_nodes
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__new_nodes_configuration_version
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__removed_nodes <- ST.readSTRef
                                                                        __field__removed_nodes
                                             !__val__new_nodes_configuration_version <- ST.readSTRef
                                                                                          __field__new_nodes_configuration_version
                                             Prelude.pure
                                               (RemoveNodesResponse __val__removed_nodes
                                                  __val__new_nodes_configuration_version)
              _idMap
                = HashMap.fromList
                    [("removed_nodes", 1), ("new_nodes_configuration_version", 2)]
            _parse 0)

instance DeepSeq.NFData RemoveNodesResponse where
  rnf
    (RemoveNodesResponse __field__removed_nodes
       __field__new_nodes_configuration_version)
    = DeepSeq.rnf __field__removed_nodes `Prelude.seq`
        DeepSeq.rnf __field__new_nodes_configuration_version `Prelude.seq`
          ()

instance Default.Default RemoveNodesResponse where
  def = RemoveNodesResponse Default.def Default.def

instance Hashable.Hashable RemoveNodesResponse where
  hashWithSalt __salt
    (RemoveNodesResponse _removed_nodes
       _new_nodes_configuration_version)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt __salt _removed_nodes)
        _new_nodes_configuration_version

newtype MarkShardsAsProvisionedRequest = MarkShardsAsProvisionedRequest{markShardsAsProvisionedRequest_shards
                                                                        :: Common.ShardSet}
                                         deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON MarkShardsAsProvisionedRequest where
  toJSON (MarkShardsAsProvisionedRequest __field__shards)
    = Aeson.object ("shards" .= __field__shards : Prelude.mempty)

instance Thrift.ThriftStruct MarkShardsAsProvisionedRequest where
  buildStruct _proxy (MarkShardsAsProvisionedRequest __field__shards)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "shards" (Thrift.getListType _proxy) 1 0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__shards)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__shards <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__shards
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__shards <- ST.readSTRef
                                                                 __field__shards
                                             Prelude.pure
                                               (MarkShardsAsProvisionedRequest __val__shards)
              _idMap = HashMap.fromList [("shards", 1)]
            _parse 0)

instance DeepSeq.NFData MarkShardsAsProvisionedRequest where
  rnf (MarkShardsAsProvisionedRequest __field__shards)
    = DeepSeq.rnf __field__shards `Prelude.seq` ()

instance Default.Default MarkShardsAsProvisionedRequest where
  def = MarkShardsAsProvisionedRequest Default.def

instance Hashable.Hashable MarkShardsAsProvisionedRequest where
  hashWithSalt __salt (MarkShardsAsProvisionedRequest _shards)
    = Hashable.hashWithSalt __salt _shards

data MarkShardsAsProvisionedResponse = MarkShardsAsProvisionedResponse{markShardsAsProvisionedResponse_updated_shards
                                                                       :: Common.ShardSet,
                                                                       markShardsAsProvisionedResponse_new_nodes_configuration_version
                                                                       :: Common.Unsigned64}
                                       deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON MarkShardsAsProvisionedResponse where
  toJSON
    (MarkShardsAsProvisionedResponse __field__updated_shards
       __field__new_nodes_configuration_version)
    = Aeson.object
        ("updated_shards" .= __field__updated_shards :
           "new_nodes_configuration_version" .=
             __field__new_nodes_configuration_version
             : Prelude.mempty)

instance Thrift.ThriftStruct MarkShardsAsProvisionedResponse where
  buildStruct _proxy
    (MarkShardsAsProvisionedResponse __field__updated_shards
       __field__new_nodes_configuration_version)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "updated_shards"
           (Thrift.getListType _proxy)
           1
           0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__updated_shards)
           :
           Thrift.genField _proxy "new_nodes_configuration_version"
             (Thrift.getI64Type _proxy)
             2
             1
             (Thrift.genI64 _proxy __field__new_nodes_configuration_version)
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__updated_shards <- ST.newSTRef Default.def
            __field__new_nodes_configuration_version <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__updated_shards
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__new_nodes_configuration_version
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__updated_shards <- ST.readSTRef
                                                                         __field__updated_shards
                                             !__val__new_nodes_configuration_version <- ST.readSTRef
                                                                                          __field__new_nodes_configuration_version
                                             Prelude.pure
                                               (MarkShardsAsProvisionedResponse
                                                  __val__updated_shards
                                                  __val__new_nodes_configuration_version)
              _idMap
                = HashMap.fromList
                    [("updated_shards", 1), ("new_nodes_configuration_version", 2)]
            _parse 0)

instance DeepSeq.NFData MarkShardsAsProvisionedResponse where
  rnf
    (MarkShardsAsProvisionedResponse __field__updated_shards
       __field__new_nodes_configuration_version)
    = DeepSeq.rnf __field__updated_shards `Prelude.seq`
        DeepSeq.rnf __field__new_nodes_configuration_version `Prelude.seq`
          ()

instance Default.Default MarkShardsAsProvisionedResponse where
  def = MarkShardsAsProvisionedResponse Default.def Default.def

instance Hashable.Hashable MarkShardsAsProvisionedResponse where
  hashWithSalt __salt
    (MarkShardsAsProvisionedResponse _updated_shards
       _new_nodes_configuration_version)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt __salt _updated_shards)
        _new_nodes_configuration_version

newtype BumpGenerationRequest = BumpGenerationRequest{bumpGenerationRequest_node_filters
                                                      :: [Nodes.NodesFilter]}
                                deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON BumpGenerationRequest where
  toJSON (BumpGenerationRequest __field__node_filters)
    = Aeson.object
        ("node_filters" .= __field__node_filters : Prelude.mempty)

instance Thrift.ThriftStruct BumpGenerationRequest where
  buildStruct _proxy (BumpGenerationRequest __field__node_filters)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "node_filters" (Thrift.getListType _proxy)
           1
           0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__node_filters)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__node_filters <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__node_filters
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__node_filters <- ST.readSTRef
                                                                       __field__node_filters
                                             Prelude.pure
                                               (BumpGenerationRequest __val__node_filters)
              _idMap = HashMap.fromList [("node_filters", 1)]
            _parse 0)

instance DeepSeq.NFData BumpGenerationRequest where
  rnf (BumpGenerationRequest __field__node_filters)
    = DeepSeq.rnf __field__node_filters `Prelude.seq` ()

instance Default.Default BumpGenerationRequest where
  def = BumpGenerationRequest Default.def

instance Hashable.Hashable BumpGenerationRequest where
  hashWithSalt __salt (BumpGenerationRequest _node_filters)
    = Hashable.hashWithSalt __salt _node_filters

data BumpGenerationResponse = BumpGenerationResponse{bumpGenerationResponse_bumped_nodes
                                                     :: [Common.NodeID],
                                                     bumpGenerationResponse_new_nodes_configuration_version
                                                     :: Common.Unsigned64}
                              deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON BumpGenerationResponse where
  toJSON
    (BumpGenerationResponse __field__bumped_nodes
       __field__new_nodes_configuration_version)
    = Aeson.object
        ("bumped_nodes" .= __field__bumped_nodes :
           "new_nodes_configuration_version" .=
             __field__new_nodes_configuration_version
             : Prelude.mempty)

instance Thrift.ThriftStruct BumpGenerationResponse where
  buildStruct _proxy
    (BumpGenerationResponse __field__bumped_nodes
       __field__new_nodes_configuration_version)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "bumped_nodes" (Thrift.getListType _proxy)
           1
           0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__bumped_nodes)
           :
           Thrift.genField _proxy "new_nodes_configuration_version"
             (Thrift.getI64Type _proxy)
             2
             1
             (Thrift.genI64 _proxy __field__new_nodes_configuration_version)
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__bumped_nodes <- ST.newSTRef Default.def
            __field__new_nodes_configuration_version <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__bumped_nodes
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__new_nodes_configuration_version
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__bumped_nodes <- ST.readSTRef
                                                                       __field__bumped_nodes
                                             !__val__new_nodes_configuration_version <- ST.readSTRef
                                                                                          __field__new_nodes_configuration_version
                                             Prelude.pure
                                               (BumpGenerationResponse __val__bumped_nodes
                                                  __val__new_nodes_configuration_version)
              _idMap
                = HashMap.fromList
                    [("bumped_nodes", 1), ("new_nodes_configuration_version", 2)]
            _parse 0)

instance DeepSeq.NFData BumpGenerationResponse where
  rnf
    (BumpGenerationResponse __field__bumped_nodes
       __field__new_nodes_configuration_version)
    = DeepSeq.rnf __field__bumped_nodes `Prelude.seq`
        DeepSeq.rnf __field__new_nodes_configuration_version `Prelude.seq`
          ()

instance Default.Default BumpGenerationResponse where
  def = BumpGenerationResponse Default.def Default.def

instance Hashable.Hashable BumpGenerationResponse where
  hashWithSalt __salt
    (BumpGenerationResponse _bumped_nodes
       _new_nodes_configuration_version)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt __salt _bumped_nodes)
        _new_nodes_configuration_version

newtype BootstrapClusterRequest = BootstrapClusterRequest{bootstrapClusterRequest_metadata_replication_property
                                                          :: Common.ReplicationProperty}
                                  deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON BootstrapClusterRequest where
  toJSON
    (BootstrapClusterRequest __field__metadata_replication_property)
    = Aeson.object
        ("metadata_replication_property" .=
           Map.mapKeys Thrift.keyToStr __field__metadata_replication_property
           : Prelude.mempty)

instance Thrift.ThriftStruct BootstrapClusterRequest where
  buildStruct _proxy
    (BootstrapClusterRequest __field__metadata_replication_property)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "metadata_replication_property"
           (Thrift.getMapType _proxy)
           1
           0
           ((Thrift.genMap _proxy (Thrift.getI32Type _proxy)
               (Thrift.getI32Type _proxy)
               Prelude.False
               (Thrift.genI32 _proxy . Prelude.fromIntegral .
                  Thrift.fromThriftEnum)
               (Thrift.genI32 _proxy)
               . Map.toList)
              __field__metadata_replication_property)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__metadata_replication_property <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Map.fromList <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseEnum
                                                                                           _proxy
                                                                                           "LocationScope")
                                                                                        (Thrift.parseI32
                                                                                           _proxy)
                                                                                        Prelude.False)
                                                                        ST.writeSTRef
                                                                          __field__metadata_replication_property
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__metadata_replication_property <- ST.readSTRef
                                                                                        __field__metadata_replication_property
                                             Prelude.pure
                                               (BootstrapClusterRequest
                                                  __val__metadata_replication_property)
              _idMap = HashMap.fromList [("metadata_replication_property", 1)]
            _parse 0)

instance DeepSeq.NFData BootstrapClusterRequest where
  rnf
    (BootstrapClusterRequest __field__metadata_replication_property)
    = DeepSeq.rnf __field__metadata_replication_property `Prelude.seq`
        ()

instance Default.Default BootstrapClusterRequest where
  def = BootstrapClusterRequest Default.def

instance Hashable.Hashable BootstrapClusterRequest where
  hashWithSalt __salt
    (BootstrapClusterRequest _metadata_replication_property)
    = Hashable.hashWithSalt __salt
        ((Prelude.map (\ (_k, _v) -> (_k, _v)) . Map.toAscList)
           _metadata_replication_property)

newtype BootstrapClusterResponse = BootstrapClusterResponse{bootstrapClusterResponse_new_nodes_configuration_version
                                                            :: Common.Unsigned64}
                                   deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON BootstrapClusterResponse where
  toJSON
    (BootstrapClusterResponse __field__new_nodes_configuration_version)
    = Aeson.object
        ("new_nodes_configuration_version" .=
           __field__new_nodes_configuration_version
           : Prelude.mempty)

instance Thrift.ThriftStruct BootstrapClusterResponse where
  buildStruct _proxy
    (BootstrapClusterResponse __field__new_nodes_configuration_version)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "new_nodes_configuration_version"
           (Thrift.getI64Type _proxy)
           1
           0
           (Thrift.genI64 _proxy __field__new_nodes_configuration_version)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__new_nodes_configuration_version <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__new_nodes_configuration_version
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__new_nodes_configuration_version <- ST.readSTRef
                                                                                          __field__new_nodes_configuration_version
                                             Prelude.pure
                                               (BootstrapClusterResponse
                                                  __val__new_nodes_configuration_version)
              _idMap = HashMap.fromList [("new_nodes_configuration_version", 1)]
            _parse 0)

instance DeepSeq.NFData BootstrapClusterResponse where
  rnf
    (BootstrapClusterResponse __field__new_nodes_configuration_version)
    = DeepSeq.rnf __field__new_nodes_configuration_version
        `Prelude.seq` ()

instance Default.Default BootstrapClusterResponse where
  def = BootstrapClusterResponse Default.def

instance Hashable.Hashable BootstrapClusterResponse where
  hashWithSalt __salt
    (BootstrapClusterResponse _new_nodes_configuration_version)
    = Hashable.hashWithSalt __salt _new_nodes_configuration_version
