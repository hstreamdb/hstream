-----------------------------------------------------------------
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
--  @generated
-----------------------------------------------------------------
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE BangPatterns #-}
{-# OPTIONS_GHC -fno-warn-unused-imports#-}
{-# OPTIONS_GHC -fno-warn-overlapping-patterns#-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns#-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
module Maintenance.Types
       (MaintenanceProgress(MaintenanceProgress_UNKNOWN,
                            MaintenanceProgress_BLOCKED_UNTIL_SAFE,
                            MaintenanceProgress_IN_PROGRESS, MaintenanceProgress_COMPLETED,
                            MaintenanceProgress__UNKNOWN),
        MaintenancePriority(MaintenancePriority_IMMINENT,
                            MaintenancePriority_HIGH, MaintenancePriority_MEDIUM,
                            MaintenancePriority_LOW, MaintenancePriority__UNKNOWN),
        MaintenanceDefinition(MaintenanceDefinition,
                              maintenanceDefinition_shards,
                              maintenanceDefinition_shard_target_state,
                              maintenanceDefinition_sequencer_nodes,
                              maintenanceDefinition_sequencer_target_state,
                              maintenanceDefinition_user, maintenanceDefinition_reason,
                              maintenanceDefinition_extras,
                              maintenanceDefinition_skip_safety_checks,
                              maintenanceDefinition_force_restore_rebuilding,
                              maintenanceDefinition_group, maintenanceDefinition_ttl_seconds,
                              maintenanceDefinition_allow_passive_drains,
                              maintenanceDefinition_group_id,
                              maintenanceDefinition_last_check_impact_result,
                              maintenanceDefinition_expires_on, maintenanceDefinition_created_on,
                              maintenanceDefinition_progress, maintenanceDefinition_priority,
                              maintenanceDefinition_skip_capacity_checks),
        ClusterMaintenanceState(ClusterMaintenanceState,
                                clusterMaintenanceState_maintenances,
                                clusterMaintenanceState_version),
        MaintenanceDefinitionResponse(MaintenanceDefinitionResponse,
                                      maintenanceDefinitionResponse_maintenances),
        MaintenancesFilter(MaintenancesFilter,
                           maintenancesFilter_group_ids, maintenancesFilter_user),
        RemoveMaintenancesRequest(RemoveMaintenancesRequest,
                                  removeMaintenancesRequest_filter, removeMaintenancesRequest_user,
                                  removeMaintenancesRequest_reason),
        RemoveMaintenancesResponse(RemoveMaintenancesResponse,
                                   removeMaintenancesResponse_maintenances),
        MarkAllShardsUnrecoverableRequest(MarkAllShardsUnrecoverableRequest,
                                          markAllShardsUnrecoverableRequest_user,
                                          markAllShardsUnrecoverableRequest_reason),
        MarkAllShardsUnrecoverableResponse(MarkAllShardsUnrecoverableResponse,
                                           markAllShardsUnrecoverableResponse_shards_succeeded,
                                           markAllShardsUnrecoverableResponse_shards_failed))
       where
import qualified Common.Types as Common
import qualified Control.DeepSeq as DeepSeq
import qualified Control.Exception as Exception
import qualified Control.Monad as Monad
import qualified Control.Monad.ST.Trans as ST
import qualified Control.Monad.Trans.Class as Trans
import qualified Data.Aeson as Aeson
import qualified Data.Aeson.Types as Aeson
import qualified Data.Default as Default
import qualified Data.Function as Function
import qualified Data.HashMap.Strict as HashMap
import qualified Data.Hashable as Hashable
import qualified Data.Int as Int
import qualified Data.List as List
import qualified Data.Map.Strict as Map
import qualified Data.Ord as Ord
import qualified Data.Text as Text
import qualified Data.Text.Encoding as Text
import qualified Nodes.Types as Nodes
import qualified Prelude as Prelude
import qualified Safety.Types as Safety
import qualified Thrift.Binary.Parser as Parser
import qualified Thrift.CodegenTypesOnly as Thrift
import Control.Applicative ((<|>), (*>), (<*))
import Data.Aeson ((.:), (.:?), (.=), (.!=))
import Data.Monoid ((<>))
import Prelude ((.), (++), (>), (==))
import Prelude ((.), (<$>), (<*>), (>>=), (==), (/=), (<), (++))

data MaintenanceProgress = MaintenanceProgress_UNKNOWN
                         | MaintenanceProgress_BLOCKED_UNTIL_SAFE
                         | MaintenanceProgress_IN_PROGRESS
                         | MaintenanceProgress_COMPLETED
                         | MaintenanceProgress__UNKNOWN Prelude.Int
                           deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON MaintenanceProgress where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData MaintenanceProgress where
  rnf __MaintenanceProgress = Prelude.seq __MaintenanceProgress ()

instance Default.Default MaintenanceProgress where
  def = MaintenanceProgress_UNKNOWN

instance Hashable.Hashable MaintenanceProgress where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum MaintenanceProgress where
  toThriftEnum 0 = MaintenanceProgress_UNKNOWN
  toThriftEnum 1 = MaintenanceProgress_BLOCKED_UNTIL_SAFE
  toThriftEnum 2 = MaintenanceProgress_IN_PROGRESS
  toThriftEnum 3 = MaintenanceProgress_COMPLETED
  toThriftEnum val = MaintenanceProgress__UNKNOWN val
  fromThriftEnum MaintenanceProgress_UNKNOWN = 0
  fromThriftEnum MaintenanceProgress_BLOCKED_UNTIL_SAFE = 1
  fromThriftEnum MaintenanceProgress_IN_PROGRESS = 2
  fromThriftEnum MaintenanceProgress_COMPLETED = 3
  fromThriftEnum (MaintenanceProgress__UNKNOWN val) = val
  allThriftEnumValues
    = [MaintenanceProgress_UNKNOWN,
       MaintenanceProgress_BLOCKED_UNTIL_SAFE,
       MaintenanceProgress_IN_PROGRESS, MaintenanceProgress_COMPLETED]
  toThriftEnumEither 0 = Prelude.Right MaintenanceProgress_UNKNOWN
  toThriftEnumEither 1
    = Prelude.Right MaintenanceProgress_BLOCKED_UNTIL_SAFE
  toThriftEnumEither 2
    = Prelude.Right MaintenanceProgress_IN_PROGRESS
  toThriftEnumEither 3 = Prelude.Right MaintenanceProgress_COMPLETED
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum MaintenanceProgress: "
           ++ Prelude.show val)

data MaintenancePriority = MaintenancePriority_IMMINENT
                         | MaintenancePriority_HIGH
                         | MaintenancePriority_MEDIUM
                         | MaintenancePriority_LOW
                         | MaintenancePriority__UNKNOWN Prelude.Int
                           deriving (Prelude.Eq, Prelude.Show)

instance Aeson.ToJSON MaintenancePriority where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData MaintenancePriority where
  rnf __MaintenancePriority = Prelude.seq __MaintenancePriority ()

instance Default.Default MaintenancePriority where
  def = MaintenancePriority_IMMINENT

instance Hashable.Hashable MaintenancePriority where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum MaintenancePriority where
  toThriftEnum 1 = MaintenancePriority_IMMINENT
  toThriftEnum 2 = MaintenancePriority_HIGH
  toThriftEnum 3 = MaintenancePriority_MEDIUM
  toThriftEnum 4 = MaintenancePriority_LOW
  toThriftEnum val = MaintenancePriority__UNKNOWN val
  fromThriftEnum MaintenancePriority_IMMINENT = 1
  fromThriftEnum MaintenancePriority_HIGH = 2
  fromThriftEnum MaintenancePriority_MEDIUM = 3
  fromThriftEnum MaintenancePriority_LOW = 4
  fromThriftEnum (MaintenancePriority__UNKNOWN val) = val
  allThriftEnumValues
    = [MaintenancePriority_IMMINENT, MaintenancePriority_HIGH,
       MaintenancePriority_MEDIUM, MaintenancePriority_LOW]
  toThriftEnumEither 1 = Prelude.Right MaintenancePriority_IMMINENT
  toThriftEnumEither 2 = Prelude.Right MaintenancePriority_HIGH
  toThriftEnumEither 3 = Prelude.Right MaintenancePriority_MEDIUM
  toThriftEnumEither 4 = Prelude.Right MaintenancePriority_LOW
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum MaintenancePriority: "
           ++ Prelude.show val)

instance Prelude.Ord MaintenancePriority where
  compare = Function.on Prelude.compare Thrift.fromThriftEnum

data MaintenanceDefinition = MaintenanceDefinition{maintenanceDefinition_shards
                                                   :: Common.ShardSet,
                                                   maintenanceDefinition_shard_target_state ::
                                                   Nodes.ShardOperationalState,
                                                   maintenanceDefinition_sequencer_nodes ::
                                                   [Common.NodeID],
                                                   maintenanceDefinition_sequencer_target_state ::
                                                   Nodes.SequencingState,
                                                   maintenanceDefinition_user :: Text.Text,
                                                   maintenanceDefinition_reason :: Text.Text,
                                                   maintenanceDefinition_extras ::
                                                   Map.Map Text.Text Text.Text,
                                                   maintenanceDefinition_skip_safety_checks ::
                                                   Prelude.Bool,
                                                   maintenanceDefinition_force_restore_rebuilding ::
                                                   Prelude.Bool,
                                                   maintenanceDefinition_group :: Prelude.Bool,
                                                   maintenanceDefinition_ttl_seconds :: Int.Int32,
                                                   maintenanceDefinition_allow_passive_drains ::
                                                   Prelude.Bool,
                                                   maintenanceDefinition_group_id ::
                                                   Prelude.Maybe Common.MaintenanceGroupID,
                                                   maintenanceDefinition_last_check_impact_result ::
                                                   Prelude.Maybe Safety.CheckImpactResponse,
                                                   maintenanceDefinition_expires_on ::
                                                   Prelude.Maybe Common.Timestamp,
                                                   maintenanceDefinition_created_on ::
                                                   Prelude.Maybe Common.Timestamp,
                                                   maintenanceDefinition_progress ::
                                                   MaintenanceProgress,
                                                   maintenanceDefinition_priority ::
                                                   Prelude.Maybe MaintenancePriority,
                                                   maintenanceDefinition_skip_capacity_checks ::
                                                   Prelude.Bool}
                             deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON MaintenanceDefinition where
  toJSON
    (MaintenanceDefinition __field__shards __field__shard_target_state
       __field__sequencer_nodes __field__sequencer_target_state
       __field__user __field__reason __field__extras
       __field__skip_safety_checks __field__force_restore_rebuilding
       __field__group __field__ttl_seconds __field__allow_passive_drains
       __field__group_id __field__last_check_impact_result
       __field__expires_on __field__created_on __field__progress
       __field__priority __field__skip_capacity_checks)
    = Aeson.object
        ("shards" .= __field__shards :
           "shard_target_state" .= __field__shard_target_state :
             "sequencer_nodes" .= __field__sequencer_nodes :
               "sequencer_target_state" .= __field__sequencer_target_state :
                 "user" .= __field__user :
                   "reason" .= __field__reason :
                     "extras" .= __field__extras :
                       "skip_safety_checks" .= __field__skip_safety_checks :
                         "force_restore_rebuilding" .= __field__force_restore_rebuilding :
                           "group" .= __field__group :
                             "ttl_seconds" .= __field__ttl_seconds :
                               "allow_passive_drains" .= __field__allow_passive_drains :
                                 Prelude.maybe Prelude.id ((:) . ("group_id" .=)) __field__group_id
                                   (Prelude.maybe Prelude.id ((:) . ("last_check_impact_result" .=))
                                      __field__last_check_impact_result
                                      (Prelude.maybe Prelude.id ((:) . ("expires_on" .=))
                                         __field__expires_on
                                         (Prelude.maybe Prelude.id ((:) . ("created_on" .=))
                                            __field__created_on
                                            ("progress" .= __field__progress :
                                               Prelude.maybe Prelude.id ((:) . ("priority" .=))
                                                 __field__priority
                                                 ("skip_capacity_checks" .=
                                                    __field__skip_capacity_checks
                                                    : Prelude.mempty))))))

instance Thrift.ThriftStruct MaintenanceDefinition where
  buildStruct _proxy
    (MaintenanceDefinition __field__shards __field__shard_target_state
       __field__sequencer_nodes __field__sequencer_target_state
       __field__user __field__reason __field__extras
       __field__skip_safety_checks __field__force_restore_rebuilding
       __field__group __field__ttl_seconds __field__allow_passive_drains
       __field__group_id __field__last_check_impact_result
       __field__expires_on __field__created_on __field__progress
       __field__priority __field__skip_capacity_checks)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "shards" (Thrift.getListType _proxy) 1 0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__shards)
           :
           Thrift.genField _proxy "shard_target_state"
             (Thrift.getI32Type _proxy)
             2
             1
             ((Thrift.genI32 _proxy . Prelude.fromIntegral .
                 Thrift.fromThriftEnum)
                __field__shard_target_state)
             :
             Thrift.genField _proxy "sequencer_nodes"
               (Thrift.getListType _proxy)
               3
               2
               (Thrift.genList _proxy (Thrift.getStructType _proxy)
                  (Thrift.buildStruct _proxy)
                  __field__sequencer_nodes)
               :
               Thrift.genField _proxy "sequencer_target_state"
                 (Thrift.getI32Type _proxy)
                 4
                 3
                 ((Thrift.genI32 _proxy . Prelude.fromIntegral .
                     Thrift.fromThriftEnum)
                    __field__sequencer_target_state)
                 :
                 Thrift.genField _proxy "user" (Thrift.getStringType _proxy) 5 4
                   (Thrift.genText _proxy __field__user)
                   :
                   Thrift.genField _proxy "reason" (Thrift.getStringType _proxy) 6 5
                     (Thrift.genText _proxy __field__reason)
                     :
                     Thrift.genField _proxy "extras" (Thrift.getMapType _proxy) 7 6
                       ((Thrift.genMap _proxy (Thrift.getStringType _proxy)
                           (Thrift.getStringType _proxy)
                           Prelude.True
                           (Thrift.genText _proxy)
                           (Thrift.genText _proxy)
                           . Map.toList)
                          __field__extras)
                       :
                       Thrift.genFieldBool _proxy "skip_safety_checks" 8 7
                         __field__skip_safety_checks
                         :
                         Thrift.genFieldBool _proxy "force_restore_rebuilding" 9 8
                           __field__force_restore_rebuilding
                           :
                           Thrift.genFieldBool _proxy "group" 10 9 __field__group :
                             Thrift.genFieldPrim _proxy "ttl_seconds" (Thrift.getI32Type _proxy)
                               11
                               10
                               (Thrift.genI32Prim _proxy)
                               __field__ttl_seconds
                               :
                               Thrift.genFieldBool _proxy "allow_passive_drains" 12 11
                                 __field__allow_passive_drains
                                 :
                                 let (__cereal__group_id, __id__group_id)
                                       = case __field__group_id of
                                           Prelude.Just _val -> ((:)
                                                                   (Thrift.genField _proxy
                                                                      "group_id"
                                                                      (Thrift.getStringType _proxy)
                                                                      13
                                                                      12
                                                                      (Thrift.genText _proxy _val)),
                                                                 13)
                                           Prelude.Nothing -> (Prelude.id, 12)
                                   in
                                   __cereal__group_id
                                     (let (__cereal__last_check_impact_result,
                                           __id__last_check_impact_result)
                                            = case __field__last_check_impact_result of
                                                Prelude.Just _val -> ((:)
                                                                        (Thrift.genField _proxy
                                                                           "last_check_impact_result"
                                                                           (Thrift.getStructType
                                                                              _proxy)
                                                                           14
                                                                           __id__group_id
                                                                           (Thrift.buildStruct
                                                                              _proxy
                                                                              _val)),
                                                                      14)
                                                Prelude.Nothing -> (Prelude.id, __id__group_id)
                                        in
                                        __cereal__last_check_impact_result
                                          (let (__cereal__expires_on, __id__expires_on)
                                                 = case __field__expires_on of
                                                     Prelude.Just _val -> ((:)
                                                                             (Thrift.genField _proxy
                                                                                "expires_on"
                                                                                (Thrift.getI64Type
                                                                                   _proxy)
                                                                                15
                                                                                __id__last_check_impact_result
                                                                                (Thrift.genI64
                                                                                   _proxy
                                                                                   _val)),
                                                                           15)
                                                     Prelude.Nothing -> (Prelude.id,
                                                                         __id__last_check_impact_result)
                                             in
                                             __cereal__expires_on
                                               (let (__cereal__created_on, __id__created_on)
                                                      = case __field__created_on of
                                                          Prelude.Just _val -> ((:)
                                                                                  (Thrift.genField
                                                                                     _proxy
                                                                                     "created_on"
                                                                                     (Thrift.getI64Type
                                                                                        _proxy)
                                                                                     16
                                                                                     __id__expires_on
                                                                                     (Thrift.genI64
                                                                                        _proxy
                                                                                        _val)),
                                                                                16)
                                                          Prelude.Nothing -> (Prelude.id,
                                                                              __id__expires_on)
                                                  in
                                                  __cereal__created_on
                                                    (Thrift.genField _proxy "progress"
                                                       (Thrift.getI32Type _proxy)
                                                       17
                                                       __id__created_on
                                                       ((Thrift.genI32 _proxy . Prelude.fromIntegral
                                                           . Thrift.fromThriftEnum)
                                                          __field__progress)
                                                       :
                                                       let (__cereal__priority, __id__priority)
                                                             = case __field__priority of
                                                                 Prelude.Just _val -> ((:)
                                                                                         (Thrift.genField
                                                                                            _proxy
                                                                                            "priority"
                                                                                            (Thrift.getI32Type
                                                                                               _proxy)
                                                                                            18
                                                                                            17
                                                                                            ((Thrift.genI32
                                                                                                _proxy
                                                                                                .
                                                                                                Prelude.fromIntegral
                                                                                                .
                                                                                                Thrift.fromThriftEnum)
                                                                                               _val)),
                                                                                       18)
                                                                 Prelude.Nothing -> (Prelude.id, 17)
                                                         in
                                                         __cereal__priority
                                                           (Thrift.genFieldBool _proxy
                                                              "skip_capacity_checks"
                                                              19
                                                              __id__priority
                                                              __field__skip_capacity_checks
                                                              : []))))))
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__shards <- ST.newSTRef Default.def
            __field__shard_target_state <- ST.newSTRef Default.def
            __field__sequencer_nodes <- ST.newSTRef Default.def
            __field__sequencer_target_state <- ST.newSTRef Default.def
            __field__user <- ST.newSTRef ""
            __field__reason <- ST.newSTRef ""
            __field__extras <- ST.newSTRef Default.def
            __field__skip_safety_checks <- ST.newSTRef Prelude.False
            __field__force_restore_rebuilding <- ST.newSTRef Prelude.False
            __field__group <- ST.newSTRef Prelude.True
            __field__ttl_seconds <- ST.newSTRef 0
            __field__allow_passive_drains <- ST.newSTRef Prelude.False
            __field__group_id <- ST.newSTRef Prelude.Nothing
            __field__last_check_impact_result <- ST.newSTRef Prelude.Nothing
            __field__expires_on <- ST.newSTRef Prelude.Nothing
            __field__created_on <- ST.newSTRef Prelude.Nothing
            __field__progress <- ST.newSTRef Default.def
            __field__priority <- ST.newSTRef Prelude.Nothing
            __field__skip_capacity_checks <- ST.newSTRef Prelude.False
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__shards
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "ShardOperationalState")
                                                                        ST.writeSTRef
                                                                          __field__shard_target_state
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__sequencer_nodes
                                                                          _val
                                                                 4 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "SequencingState")
                                                                        ST.writeSTRef
                                                                          __field__sequencer_target_state
                                                                          _val
                                                                 5 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__user
                                                                          _val
                                                                 6 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__reason
                                                                          _val
                                                                 7 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Map.fromList <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        (Thrift.parseText
                                                                                           _proxy)
                                                                                        Prelude.True)
                                                                        ST.writeSTRef
                                                                          __field__extras
                                                                          _val
                                                                 8 | _type ==
                                                                       Thrift.getBoolType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseBoolF
                                                                                      _proxy
                                                                                      _bool)
                                                                        ST.writeSTRef
                                                                          __field__skip_safety_checks
                                                                          _val
                                                                 9 | _type ==
                                                                       Thrift.getBoolType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseBoolF
                                                                                      _proxy
                                                                                      _bool)
                                                                        ST.writeSTRef
                                                                          __field__force_restore_rebuilding
                                                                          _val
                                                                 10 | _type ==
                                                                        Thrift.getBoolType _proxy
                                                                      ->
                                                                      do !_val <- Trans.lift
                                                                                    (Thrift.parseBoolF
                                                                                       _proxy
                                                                                       _bool)
                                                                         ST.writeSTRef
                                                                           __field__group
                                                                           _val
                                                                 11 | _type ==
                                                                        Thrift.getI32Type _proxy
                                                                      ->
                                                                      do !_val <- Trans.lift
                                                                                    (Thrift.parseI32
                                                                                       _proxy)
                                                                         ST.writeSTRef
                                                                           __field__ttl_seconds
                                                                           _val
                                                                 12 | _type ==
                                                                        Thrift.getBoolType _proxy
                                                                      ->
                                                                      do !_val <- Trans.lift
                                                                                    (Thrift.parseBoolF
                                                                                       _proxy
                                                                                       _bool)
                                                                         ST.writeSTRef
                                                                           __field__allow_passive_drains
                                                                           _val
                                                                 13 | _type ==
                                                                        Thrift.getStringType _proxy
                                                                      ->
                                                                      do !_val <- Trans.lift
                                                                                    (Thrift.parseText
                                                                                       _proxy)
                                                                         ST.writeSTRef
                                                                           __field__group_id
                                                                           (Prelude.Just _val)
                                                                 14 | _type ==
                                                                        Thrift.getStructType _proxy
                                                                      ->
                                                                      do !_val <- Trans.lift
                                                                                    (Thrift.parseStruct
                                                                                       _proxy)
                                                                         ST.writeSTRef
                                                                           __field__last_check_impact_result
                                                                           (Prelude.Just _val)
                                                                 15 | _type ==
                                                                        Thrift.getI64Type _proxy
                                                                      ->
                                                                      do !_val <- Trans.lift
                                                                                    (Thrift.parseI64
                                                                                       _proxy)
                                                                         ST.writeSTRef
                                                                           __field__expires_on
                                                                           (Prelude.Just _val)
                                                                 16 | _type ==
                                                                        Thrift.getI64Type _proxy
                                                                      ->
                                                                      do !_val <- Trans.lift
                                                                                    (Thrift.parseI64
                                                                                       _proxy)
                                                                         ST.writeSTRef
                                                                           __field__created_on
                                                                           (Prelude.Just _val)
                                                                 17 | _type ==
                                                                        Thrift.getI32Type _proxy
                                                                      ->
                                                                      do !_val <- Trans.lift
                                                                                    (Thrift.parseEnum
                                                                                       _proxy
                                                                                       "MaintenanceProgress")
                                                                         ST.writeSTRef
                                                                           __field__progress
                                                                           _val
                                                                 18 | _type ==
                                                                        Thrift.getI32Type _proxy
                                                                      ->
                                                                      do !_val <- Trans.lift
                                                                                    (Thrift.parseEnum
                                                                                       _proxy
                                                                                       "MaintenancePriority")
                                                                         ST.writeSTRef
                                                                           __field__priority
                                                                           (Prelude.Just _val)
                                                                 19 | _type ==
                                                                        Thrift.getBoolType _proxy
                                                                      ->
                                                                      do !_val <- Trans.lift
                                                                                    (Thrift.parseBoolF
                                                                                       _proxy
                                                                                       _bool)
                                                                         ST.writeSTRef
                                                                           __field__skip_capacity_checks
                                                                           _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__shards <- ST.readSTRef
                                                                 __field__shards
                                             !__val__shard_target_state <- ST.readSTRef
                                                                             __field__shard_target_state
                                             !__val__sequencer_nodes <- ST.readSTRef
                                                                          __field__sequencer_nodes
                                             !__val__sequencer_target_state <- ST.readSTRef
                                                                                 __field__sequencer_target_state
                                             !__val__user <- ST.readSTRef __field__user
                                             !__val__reason <- ST.readSTRef __field__reason
                                             !__val__extras <- ST.readSTRef __field__extras
                                             !__val__skip_safety_checks <- ST.readSTRef
                                                                             __field__skip_safety_checks
                                             !__val__force_restore_rebuilding <- ST.readSTRef
                                                                                   __field__force_restore_rebuilding
                                             !__val__group <- ST.readSTRef __field__group
                                             !__val__ttl_seconds <- ST.readSTRef
                                                                      __field__ttl_seconds
                                             !__val__allow_passive_drains <- ST.readSTRef
                                                                               __field__allow_passive_drains
                                             !__val__group_id <- ST.readSTRef __field__group_id
                                             !__val__last_check_impact_result <- ST.readSTRef
                                                                                   __field__last_check_impact_result
                                             !__val__expires_on <- ST.readSTRef __field__expires_on
                                             !__val__created_on <- ST.readSTRef __field__created_on
                                             !__val__progress <- ST.readSTRef __field__progress
                                             !__val__priority <- ST.readSTRef __field__priority
                                             !__val__skip_capacity_checks <- ST.readSTRef
                                                                               __field__skip_capacity_checks
                                             Prelude.pure
                                               (MaintenanceDefinition __val__shards
                                                  __val__shard_target_state
                                                  __val__sequencer_nodes
                                                  __val__sequencer_target_state
                                                  __val__user
                                                  __val__reason
                                                  __val__extras
                                                  __val__skip_safety_checks
                                                  __val__force_restore_rebuilding
                                                  __val__group
                                                  __val__ttl_seconds
                                                  __val__allow_passive_drains
                                                  __val__group_id
                                                  __val__last_check_impact_result
                                                  __val__expires_on
                                                  __val__created_on
                                                  __val__progress
                                                  __val__priority
                                                  __val__skip_capacity_checks)
              _idMap
                = HashMap.fromList
                    [("shards", 1), ("shard_target_state", 2), ("sequencer_nodes", 3),
                     ("sequencer_target_state", 4), ("user", 5), ("reason", 6),
                     ("extras", 7), ("skip_safety_checks", 8),
                     ("force_restore_rebuilding", 9), ("group", 10),
                     ("ttl_seconds", 11), ("allow_passive_drains", 12),
                     ("group_id", 13), ("last_check_impact_result", 14),
                     ("expires_on", 15), ("created_on", 16), ("progress", 17),
                     ("priority", 18), ("skip_capacity_checks", 19)]
            _parse 0)

instance DeepSeq.NFData MaintenanceDefinition where
  rnf
    (MaintenanceDefinition __field__shards __field__shard_target_state
       __field__sequencer_nodes __field__sequencer_target_state
       __field__user __field__reason __field__extras
       __field__skip_safety_checks __field__force_restore_rebuilding
       __field__group __field__ttl_seconds __field__allow_passive_drains
       __field__group_id __field__last_check_impact_result
       __field__expires_on __field__created_on __field__progress
       __field__priority __field__skip_capacity_checks)
    = DeepSeq.rnf __field__shards `Prelude.seq`
        DeepSeq.rnf __field__shard_target_state `Prelude.seq`
          DeepSeq.rnf __field__sequencer_nodes `Prelude.seq`
            DeepSeq.rnf __field__sequencer_target_state `Prelude.seq`
              DeepSeq.rnf __field__user `Prelude.seq`
                DeepSeq.rnf __field__reason `Prelude.seq`
                  DeepSeq.rnf __field__extras `Prelude.seq`
                    DeepSeq.rnf __field__skip_safety_checks `Prelude.seq`
                      DeepSeq.rnf __field__force_restore_rebuilding `Prelude.seq`
                        DeepSeq.rnf __field__group `Prelude.seq`
                          DeepSeq.rnf __field__ttl_seconds `Prelude.seq`
                            DeepSeq.rnf __field__allow_passive_drains `Prelude.seq`
                              DeepSeq.rnf __field__group_id `Prelude.seq`
                                DeepSeq.rnf __field__last_check_impact_result `Prelude.seq`
                                  DeepSeq.rnf __field__expires_on `Prelude.seq`
                                    DeepSeq.rnf __field__created_on `Prelude.seq`
                                      DeepSeq.rnf __field__progress `Prelude.seq`
                                        DeepSeq.rnf __field__priority `Prelude.seq`
                                          DeepSeq.rnf __field__skip_capacity_checks `Prelude.seq` ()

instance Default.Default MaintenanceDefinition where
  def
    = MaintenanceDefinition Default.def Default.def Default.def
        Default.def
        ""
        ""
        Default.def
        Prelude.False
        Prelude.False
        Prelude.True
        0
        Prelude.False
        Prelude.Nothing
        Prelude.Nothing
        Prelude.Nothing
        Prelude.Nothing
        Default.def
        Prelude.Nothing
        Prelude.False

instance Hashable.Hashable MaintenanceDefinition where
  hashWithSalt __salt
    (MaintenanceDefinition _shards _shard_target_state _sequencer_nodes
       _sequencer_target_state _user _reason _extras _skip_safety_checks
       _force_restore_rebuilding _group _ttl_seconds _allow_passive_drains
       _group_id _last_check_impact_result _expires_on _created_on
       _progress _priority _skip_capacity_checks)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt
           (Hashable.hashWithSalt
              (Hashable.hashWithSalt
                 (Hashable.hashWithSalt
                    (Hashable.hashWithSalt
                       (Hashable.hashWithSalt
                          (Hashable.hashWithSalt
                             (Hashable.hashWithSalt
                                (Hashable.hashWithSalt
                                   (Hashable.hashWithSalt
                                      (Hashable.hashWithSalt
                                         (Hashable.hashWithSalt
                                            (Hashable.hashWithSalt
                                               (Hashable.hashWithSalt
                                                  (Hashable.hashWithSalt
                                                     (Hashable.hashWithSalt
                                                        (Hashable.hashWithSalt
                                                           (Hashable.hashWithSalt __salt _shards)
                                                           _shard_target_state)
                                                        _sequencer_nodes)
                                                     _sequencer_target_state)
                                                  _user)
                                               _reason)
                                            ((Prelude.map (\ (_k, _v) -> (_k, _v)) . Map.toAscList)
                                               _extras))
                                         _skip_safety_checks)
                                      _force_restore_rebuilding)
                                   _group)
                                _ttl_seconds)
                             _allow_passive_drains)
                          _group_id)
                       _last_check_impact_result)
                    _expires_on)
                 _created_on)
              _progress)
           _priority)
        _skip_capacity_checks

data ClusterMaintenanceState = ClusterMaintenanceState{clusterMaintenanceState_maintenances
                                                       :: [MaintenanceDefinition],
                                                       clusterMaintenanceState_version ::
                                                       Common.Unsigned64}
                               deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON ClusterMaintenanceState where
  toJSON
    (ClusterMaintenanceState __field__maintenances __field__version)
    = Aeson.object
        ("maintenances" .= __field__maintenances :
           "version" .= __field__version : Prelude.mempty)

instance Thrift.ThriftStruct ClusterMaintenanceState where
  buildStruct _proxy
    (ClusterMaintenanceState __field__maintenances __field__version)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "maintenances" (Thrift.getListType _proxy)
           1
           0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__maintenances)
           :
           Thrift.genField _proxy "version" (Thrift.getI64Type _proxy) 2 1
             (Thrift.genI64 _proxy __field__version)
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__maintenances <- ST.newSTRef Default.def
            __field__version <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__maintenances
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__version
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__maintenances <- ST.readSTRef
                                                                       __field__maintenances
                                             !__val__version <- ST.readSTRef __field__version
                                             Prelude.pure
                                               (ClusterMaintenanceState __val__maintenances
                                                  __val__version)
              _idMap = HashMap.fromList [("maintenances", 1), ("version", 2)]
            _parse 0)

instance DeepSeq.NFData ClusterMaintenanceState where
  rnf
    (ClusterMaintenanceState __field__maintenances __field__version)
    = DeepSeq.rnf __field__maintenances `Prelude.seq`
        DeepSeq.rnf __field__version `Prelude.seq` ()

instance Default.Default ClusterMaintenanceState where
  def = ClusterMaintenanceState Default.def Default.def

instance Hashable.Hashable ClusterMaintenanceState where
  hashWithSalt __salt
    (ClusterMaintenanceState _maintenances _version)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt __salt _maintenances)
        _version

newtype MaintenanceDefinitionResponse = MaintenanceDefinitionResponse{maintenanceDefinitionResponse_maintenances
                                                                      :: [MaintenanceDefinition]}
                                        deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON MaintenanceDefinitionResponse where
  toJSON (MaintenanceDefinitionResponse __field__maintenances)
    = Aeson.object
        ("maintenances" .= __field__maintenances : Prelude.mempty)

instance Thrift.ThriftStruct MaintenanceDefinitionResponse where
  buildStruct _proxy
    (MaintenanceDefinitionResponse __field__maintenances)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "maintenances" (Thrift.getListType _proxy)
           1
           0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__maintenances)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__maintenances <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__maintenances
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__maintenances <- ST.readSTRef
                                                                       __field__maintenances
                                             Prelude.pure
                                               (MaintenanceDefinitionResponse __val__maintenances)
              _idMap = HashMap.fromList [("maintenances", 1)]
            _parse 0)

instance DeepSeq.NFData MaintenanceDefinitionResponse where
  rnf (MaintenanceDefinitionResponse __field__maintenances)
    = DeepSeq.rnf __field__maintenances `Prelude.seq` ()

instance Default.Default MaintenanceDefinitionResponse where
  def = MaintenanceDefinitionResponse Default.def

instance Hashable.Hashable MaintenanceDefinitionResponse where
  hashWithSalt __salt (MaintenanceDefinitionResponse _maintenances)
    = Hashable.hashWithSalt __salt _maintenances

data MaintenancesFilter = MaintenancesFilter{maintenancesFilter_group_ids
                                             :: [Common.MaintenanceGroupID],
                                             maintenancesFilter_user :: Prelude.Maybe Text.Text}
                          deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON MaintenancesFilter where
  toJSON (MaintenancesFilter __field__group_ids __field__user)
    = Aeson.object
        ("group_ids" .= __field__group_ids :
           Prelude.maybe Prelude.id ((:) . ("user" .=)) __field__user
             Prelude.mempty)

instance Thrift.ThriftStruct MaintenancesFilter where
  buildStruct _proxy
    (MaintenancesFilter __field__group_ids __field__user)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "group_ids" (Thrift.getListType _proxy) 1 0
           (Thrift.genList _proxy (Thrift.getStringType _proxy)
              (Thrift.genText _proxy)
              __field__group_ids)
           :
           case __field__user of
             Prelude.Just _val -> Thrift.genField _proxy "user"
                                    (Thrift.getStringType _proxy)
                                    2
                                    1
                                    (Thrift.genText _proxy _val)
                                    : []
             Prelude.Nothing -> [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__group_ids <- ST.newSTRef Default.def
            __field__user <- ST.newSTRef Prelude.Nothing
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseText
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__group_ids
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__user
                                                                          (Prelude.Just _val)
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__group_ids <- ST.readSTRef
                                                                    __field__group_ids
                                             !__val__user <- ST.readSTRef __field__user
                                             Prelude.pure
                                               (MaintenancesFilter __val__group_ids __val__user)
              _idMap = HashMap.fromList [("group_ids", 1), ("user", 2)]
            _parse 0)

instance DeepSeq.NFData MaintenancesFilter where
  rnf (MaintenancesFilter __field__group_ids __field__user)
    = DeepSeq.rnf __field__group_ids `Prelude.seq`
        DeepSeq.rnf __field__user `Prelude.seq` ()

instance Default.Default MaintenancesFilter where
  def = MaintenancesFilter Default.def Prelude.Nothing

instance Hashable.Hashable MaintenancesFilter where
  hashWithSalt __salt (MaintenancesFilter _group_ids _user)
    = Hashable.hashWithSalt (Hashable.hashWithSalt __salt _group_ids)
        _user

data RemoveMaintenancesRequest = RemoveMaintenancesRequest{removeMaintenancesRequest_filter
                                                           :: MaintenancesFilter,
                                                           removeMaintenancesRequest_user ::
                                                           Text.Text,
                                                           removeMaintenancesRequest_reason ::
                                                           Text.Text}
                                 deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON RemoveMaintenancesRequest where
  toJSON
    (RemoveMaintenancesRequest __field__filter __field__user
       __field__reason)
    = Aeson.object
        ("filter" .= __field__filter :
           "user" .= __field__user :
             "reason" .= __field__reason : Prelude.mempty)

instance Thrift.ThriftStruct RemoveMaintenancesRequest where
  buildStruct _proxy
    (RemoveMaintenancesRequest __field__filter __field__user
       __field__reason)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "filter" (Thrift.getStructType _proxy) 1 0
           (Thrift.buildStruct _proxy __field__filter)
           :
           Thrift.genField _proxy "user" (Thrift.getStringType _proxy) 2 1
             (Thrift.genText _proxy __field__user)
             :
             Thrift.genField _proxy "reason" (Thrift.getStringType _proxy) 3 2
               (Thrift.genText _proxy __field__reason)
               : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__filter <- ST.newSTRef Default.def
            __field__user <- ST.newSTRef ""
            __field__reason <- ST.newSTRef ""
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStructType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseStruct
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__filter
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__user
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__reason
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__filter <- ST.readSTRef
                                                                 __field__filter
                                             !__val__user <- ST.readSTRef __field__user
                                             !__val__reason <- ST.readSTRef __field__reason
                                             Prelude.pure
                                               (RemoveMaintenancesRequest __val__filter __val__user
                                                  __val__reason)
              _idMap
                = HashMap.fromList [("filter", 1), ("user", 2), ("reason", 3)]
            _parse 0)

instance DeepSeq.NFData RemoveMaintenancesRequest where
  rnf
    (RemoveMaintenancesRequest __field__filter __field__user
       __field__reason)
    = DeepSeq.rnf __field__filter `Prelude.seq`
        DeepSeq.rnf __field__user `Prelude.seq`
          DeepSeq.rnf __field__reason `Prelude.seq` ()

instance Default.Default RemoveMaintenancesRequest where
  def = RemoveMaintenancesRequest Default.def "" ""

instance Hashable.Hashable RemoveMaintenancesRequest where
  hashWithSalt __salt
    (RemoveMaintenancesRequest _filter _user _reason)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _filter)
           _user)
        _reason

newtype RemoveMaintenancesResponse = RemoveMaintenancesResponse{removeMaintenancesResponse_maintenances
                                                                :: [MaintenanceDefinition]}
                                     deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON RemoveMaintenancesResponse where
  toJSON (RemoveMaintenancesResponse __field__maintenances)
    = Aeson.object
        ("maintenances" .= __field__maintenances : Prelude.mempty)

instance Thrift.ThriftStruct RemoveMaintenancesResponse where
  buildStruct _proxy
    (RemoveMaintenancesResponse __field__maintenances)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "maintenances" (Thrift.getListType _proxy)
           1
           0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__maintenances)
           : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__maintenances <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__maintenances
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__maintenances <- ST.readSTRef
                                                                       __field__maintenances
                                             Prelude.pure
                                               (RemoveMaintenancesResponse __val__maintenances)
              _idMap = HashMap.fromList [("maintenances", 1)]
            _parse 0)

instance DeepSeq.NFData RemoveMaintenancesResponse where
  rnf (RemoveMaintenancesResponse __field__maintenances)
    = DeepSeq.rnf __field__maintenances `Prelude.seq` ()

instance Default.Default RemoveMaintenancesResponse where
  def = RemoveMaintenancesResponse Default.def

instance Hashable.Hashable RemoveMaintenancesResponse where
  hashWithSalt __salt (RemoveMaintenancesResponse _maintenances)
    = Hashable.hashWithSalt __salt _maintenances

data MarkAllShardsUnrecoverableRequest = MarkAllShardsUnrecoverableRequest{markAllShardsUnrecoverableRequest_user
                                                                           :: Text.Text,
                                                                           markAllShardsUnrecoverableRequest_reason
                                                                           :: Text.Text}
                                         deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON MarkAllShardsUnrecoverableRequest where
  toJSON
    (MarkAllShardsUnrecoverableRequest __field__user __field__reason)
    = Aeson.object
        ("user" .= __field__user :
           "reason" .= __field__reason : Prelude.mempty)

instance Thrift.ThriftStruct MarkAllShardsUnrecoverableRequest
         where
  buildStruct _proxy
    (MarkAllShardsUnrecoverableRequest __field__user __field__reason)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "user" (Thrift.getStringType _proxy) 1 0
           (Thrift.genText _proxy __field__user)
           :
           Thrift.genField _proxy "reason" (Thrift.getStringType _proxy) 2 1
             (Thrift.genText _proxy __field__reason)
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__user <- ST.newSTRef ""
            __field__reason <- ST.newSTRef ""
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__user
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getStringType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseText
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__reason
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__user <- ST.readSTRef __field__user
                                             !__val__reason <- ST.readSTRef __field__reason
                                             Prelude.pure
                                               (MarkAllShardsUnrecoverableRequest __val__user
                                                  __val__reason)
              _idMap = HashMap.fromList [("user", 1), ("reason", 2)]
            _parse 0)

instance DeepSeq.NFData MarkAllShardsUnrecoverableRequest where
  rnf
    (MarkAllShardsUnrecoverableRequest __field__user __field__reason)
    = DeepSeq.rnf __field__user `Prelude.seq`
        DeepSeq.rnf __field__reason `Prelude.seq` ()

instance Default.Default MarkAllShardsUnrecoverableRequest where
  def = MarkAllShardsUnrecoverableRequest "" ""

instance Hashable.Hashable MarkAllShardsUnrecoverableRequest where
  hashWithSalt __salt
    (MarkAllShardsUnrecoverableRequest _user _reason)
    = Hashable.hashWithSalt (Hashable.hashWithSalt __salt _user)
        _reason

data MarkAllShardsUnrecoverableResponse = MarkAllShardsUnrecoverableResponse{markAllShardsUnrecoverableResponse_shards_succeeded
                                                                             :: Common.ShardSet,
                                                                             markAllShardsUnrecoverableResponse_shards_failed
                                                                             :: Common.ShardSet}
                                          deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON MarkAllShardsUnrecoverableResponse where
  toJSON
    (MarkAllShardsUnrecoverableResponse __field__shards_succeeded
       __field__shards_failed)
    = Aeson.object
        ("shards_succeeded" .= __field__shards_succeeded :
           "shards_failed" .= __field__shards_failed : Prelude.mempty)

instance Thrift.ThriftStruct MarkAllShardsUnrecoverableResponse
         where
  buildStruct _proxy
    (MarkAllShardsUnrecoverableResponse __field__shards_succeeded
       __field__shards_failed)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "shards_succeeded"
           (Thrift.getListType _proxy)
           1
           0
           (Thrift.genList _proxy (Thrift.getStructType _proxy)
              (Thrift.buildStruct _proxy)
              __field__shards_succeeded)
           :
           Thrift.genField _proxy "shards_failed" (Thrift.getListType _proxy)
             2
             1
             (Thrift.genList _proxy (Thrift.getStructType _proxy)
                (Thrift.buildStruct _proxy)
                __field__shards_failed)
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__shards_succeeded <- ST.newSTRef Default.def
            __field__shards_failed <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__shards_succeeded
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__shards_failed
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__shards_succeeded <- ST.readSTRef
                                                                           __field__shards_succeeded
                                             !__val__shards_failed <- ST.readSTRef
                                                                        __field__shards_failed
                                             Prelude.pure
                                               (MarkAllShardsUnrecoverableResponse
                                                  __val__shards_succeeded
                                                  __val__shards_failed)
              _idMap
                = HashMap.fromList [("shards_succeeded", 1), ("shards_failed", 2)]
            _parse 0)

instance DeepSeq.NFData MarkAllShardsUnrecoverableResponse where
  rnf
    (MarkAllShardsUnrecoverableResponse __field__shards_succeeded
       __field__shards_failed)
    = DeepSeq.rnf __field__shards_succeeded `Prelude.seq`
        DeepSeq.rnf __field__shards_failed `Prelude.seq` ()

instance Default.Default MarkAllShardsUnrecoverableResponse where
  def = MarkAllShardsUnrecoverableResponse Default.def Default.def

instance Hashable.Hashable MarkAllShardsUnrecoverableResponse where
  hashWithSalt __salt
    (MarkAllShardsUnrecoverableResponse _shards_succeeded
       _shards_failed)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt __salt _shards_succeeded)
        _shards_failed
