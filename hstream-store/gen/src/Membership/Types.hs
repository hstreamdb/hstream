-----------------------------------------------------------------
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
--  @generated
-----------------------------------------------------------------
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE BangPatterns #-}
{-# OPTIONS_GHC -fno-warn-unused-imports#-}
{-# OPTIONS_GHC -fno-warn-overlapping-patterns#-}
{-# OPTIONS_GHC -fno-warn-incomplete-patterns#-}
{-# LANGUAGE GeneralizedNewtypeDeriving #-}
module Membership.Types
       (U8, U16, U32, U64, Node_idx,
        StorageState(StorageState_NONE, StorageState_NONE_TO_RO,
                     StorageState_READ_ONLY, StorageState_READ_WRITE,
                     StorageState_RW_TO_RO, StorageState_DATA_MIGRATION,
                     StorageState_PROVISIONING, StorageState_INVALID,
                     StorageState__UNKNOWN),
        MetaDataStorageState(MetaDataStorageState_NONE,
                             MetaDataStorageState_METADATA, MetaDataStorageState_PROMOTING,
                             MetaDataStorageState_INVALID, MetaDataStorageState__UNKNOWN),
        ShardID(ShardID, shardID_node_idx, shardID_shard_idx),
        ShardState(ShardState, shardState_shard_idx,
                   shardState_storage_state, shardState_flags,
                   shardState_metadata_state, shardState_since_version,
                   shardState_manual_override),
        StorageNodeState,
        StorageMembership(StorageMembership,
                          storageMembership_proto_version,
                          storageMembership_membership_version,
                          storageMembership_node_states, storageMembership_metadata_shards,
                          storageMembership_bootstrapping),
        SequencerNodeState(SequencerNodeState, sequencerNodeState_weight,
                           sequencerNodeState_sequencer_enabled,
                           sequencerNodeState_manual_override),
        SequencerMembership(SequencerMembership,
                            sequencerMembership_proto_version,
                            sequencerMembership_membership_version,
                            sequencerMembership_node_states,
                            sequencerMembership_bootstrapping))
       where
import qualified Control.DeepSeq as DeepSeq
import qualified Control.Exception as Exception
import qualified Control.Monad as Monad
import qualified Control.Monad.ST.Trans as ST
import qualified Control.Monad.Trans.Class as Trans
import qualified Data.Aeson as Aeson
import qualified Data.Aeson.Types as Aeson
import qualified Data.Default as Default
import qualified Data.Function as Function
import qualified Data.HashMap.Strict as HashMap
import qualified Data.Hashable as Hashable
import qualified Data.Int as Int
import qualified Data.List as List
import qualified Data.Map.Strict as Map
import qualified Data.Ord as Ord
import qualified Prelude as Prelude
import qualified Thrift.Binary.Parser as Parser
import qualified Thrift.CodegenTypesOnly as Thrift
import Control.Applicative ((<|>), (*>), (<*))
import Data.Aeson ((.:), (.:?), (.=), (.!=))
import Data.Monoid ((<>))
import Prelude ((.), (++), (>), (==))
import Prelude ((.), (<$>), (<*>), (>>=), (==), (/=), (<), (++))

type U8 = Int.Int8

type U16 = Int.Int16

type U32 = Int.Int32

type U64 = Int.Int64

type Node_idx = U16

data StorageState = StorageState_NONE
                  | StorageState_NONE_TO_RO
                  | StorageState_READ_ONLY
                  | StorageState_READ_WRITE
                  | StorageState_RW_TO_RO
                  | StorageState_DATA_MIGRATION
                  | StorageState_INVALID
                  | StorageState_PROVISIONING
                  | StorageState__UNKNOWN Prelude.Int
                    deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON StorageState where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData StorageState where
  rnf __StorageState = Prelude.seq __StorageState ()

instance Default.Default StorageState where
  def = StorageState_NONE

instance Hashable.Hashable StorageState where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum StorageState where
  toThriftEnum 0 = StorageState_NONE
  toThriftEnum 1 = StorageState_NONE_TO_RO
  toThriftEnum 2 = StorageState_READ_ONLY
  toThriftEnum 3 = StorageState_READ_WRITE
  toThriftEnum 4 = StorageState_RW_TO_RO
  toThriftEnum 5 = StorageState_DATA_MIGRATION
  toThriftEnum 7 = StorageState_PROVISIONING
  toThriftEnum 6 = StorageState_INVALID
  toThriftEnum val = StorageState__UNKNOWN val
  fromThriftEnum StorageState_NONE = 0
  fromThriftEnum StorageState_NONE_TO_RO = 1
  fromThriftEnum StorageState_READ_ONLY = 2
  fromThriftEnum StorageState_READ_WRITE = 3
  fromThriftEnum StorageState_RW_TO_RO = 4
  fromThriftEnum StorageState_DATA_MIGRATION = 5
  fromThriftEnum StorageState_PROVISIONING = 7
  fromThriftEnum StorageState_INVALID = 6
  fromThriftEnum (StorageState__UNKNOWN val) = val
  allThriftEnumValues
    = [StorageState_NONE, StorageState_NONE_TO_RO,
       StorageState_READ_ONLY, StorageState_READ_WRITE,
       StorageState_RW_TO_RO, StorageState_DATA_MIGRATION,
       StorageState_INVALID, StorageState_PROVISIONING]
  toThriftEnumEither 0 = Prelude.Right StorageState_NONE
  toThriftEnumEither 1 = Prelude.Right StorageState_NONE_TO_RO
  toThriftEnumEither 2 = Prelude.Right StorageState_READ_ONLY
  toThriftEnumEither 3 = Prelude.Right StorageState_READ_WRITE
  toThriftEnumEither 4 = Prelude.Right StorageState_RW_TO_RO
  toThriftEnumEither 5 = Prelude.Right StorageState_DATA_MIGRATION
  toThriftEnumEither 7 = Prelude.Right StorageState_PROVISIONING
  toThriftEnumEither 6 = Prelude.Right StorageState_INVALID
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum StorageState: "
           ++ Prelude.show val)

data MetaDataStorageState = MetaDataStorageState_NONE
                          | MetaDataStorageState_METADATA
                          | MetaDataStorageState_PROMOTING
                          | MetaDataStorageState_INVALID
                          | MetaDataStorageState__UNKNOWN Prelude.Int
                            deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON MetaDataStorageState where
  toJSON = Aeson.toJSON . Thrift.fromThriftEnum

instance DeepSeq.NFData MetaDataStorageState where
  rnf __MetaDataStorageState = Prelude.seq __MetaDataStorageState ()

instance Default.Default MetaDataStorageState where
  def = MetaDataStorageState_NONE

instance Hashable.Hashable MetaDataStorageState where
  hashWithSalt _salt _val
    = Hashable.hashWithSalt _salt (Thrift.fromThriftEnum _val)

instance Thrift.ThriftEnum MetaDataStorageState where
  toThriftEnum 0 = MetaDataStorageState_NONE
  toThriftEnum 1 = MetaDataStorageState_METADATA
  toThriftEnum 2 = MetaDataStorageState_PROMOTING
  toThriftEnum 3 = MetaDataStorageState_INVALID
  toThriftEnum val = MetaDataStorageState__UNKNOWN val
  fromThriftEnum MetaDataStorageState_NONE = 0
  fromThriftEnum MetaDataStorageState_METADATA = 1
  fromThriftEnum MetaDataStorageState_PROMOTING = 2
  fromThriftEnum MetaDataStorageState_INVALID = 3
  fromThriftEnum (MetaDataStorageState__UNKNOWN val) = val
  allThriftEnumValues
    = [MetaDataStorageState_NONE, MetaDataStorageState_METADATA,
       MetaDataStorageState_PROMOTING, MetaDataStorageState_INVALID]
  toThriftEnumEither 0 = Prelude.Right MetaDataStorageState_NONE
  toThriftEnumEither 1 = Prelude.Right MetaDataStorageState_METADATA
  toThriftEnumEither 2 = Prelude.Right MetaDataStorageState_PROMOTING
  toThriftEnumEither 3 = Prelude.Right MetaDataStorageState_INVALID
  toThriftEnumEither val
    = Prelude.Left
        ("toThriftEnumEither: not a valid identifier for enum MetaDataStorageState: "
           ++ Prelude.show val)

data ShardID = ShardID{shardID_node_idx :: U16,
                       shardID_shard_idx :: U16}
               deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON ShardID where
  toJSON (ShardID __field__node_idx __field__shard_idx)
    = Aeson.object
        ("node_idx" .= __field__node_idx :
           "shard_idx" .= __field__shard_idx : Prelude.mempty)

instance Thrift.ThriftStruct ShardID where
  buildStruct _proxy (ShardID __field__node_idx __field__shard_idx)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "node_idx" (Thrift.getI16Type _proxy) 1 0
           (Thrift.genI16 _proxy __field__node_idx)
           :
           Thrift.genField _proxy "shard_idx" (Thrift.getI16Type _proxy) 2 1
             (Thrift.genI16 _proxy __field__shard_idx)
             : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__node_idx <- ST.newSTRef Default.def
            __field__shard_idx <- ST.newSTRef Default.def
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI16Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI16
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__node_idx
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI16Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI16
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__shard_idx
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__node_idx <- ST.readSTRef
                                                                   __field__node_idx
                                             !__val__shard_idx <- ST.readSTRef __field__shard_idx
                                             Prelude.pure (ShardID __val__node_idx __val__shard_idx)
              _idMap = HashMap.fromList [("node_idx", 1), ("shard_idx", 2)]
            _parse 0)

instance DeepSeq.NFData ShardID where
  rnf (ShardID __field__node_idx __field__shard_idx)
    = DeepSeq.rnf __field__node_idx `Prelude.seq`
        DeepSeq.rnf __field__shard_idx `Prelude.seq` ()

instance Default.Default ShardID where
  def = ShardID Default.def Default.def

instance Hashable.Hashable ShardID where
  hashWithSalt __salt (ShardID _node_idx _shard_idx)
    = Hashable.hashWithSalt (Hashable.hashWithSalt __salt _node_idx)
        _shard_idx

data ShardState = ShardState{shardState_shard_idx :: U16,
                             shardState_storage_state :: StorageState, shardState_flags :: U32,
                             shardState_metadata_state :: MetaDataStorageState,
                             shardState_since_version :: U64,
                             shardState_manual_override :: Prelude.Bool}
                  deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON ShardState where
  toJSON
    (ShardState __field__shard_idx __field__storage_state
       __field__flags __field__metadata_state __field__since_version
       __field__manual_override)
    = Aeson.object
        ("shard_idx" .= __field__shard_idx :
           "storage_state" .= __field__storage_state :
             "flags" .= __field__flags :
               "metadata_state" .= __field__metadata_state :
                 "since_version" .= __field__since_version :
                   "manual_override" .= __field__manual_override : Prelude.mempty)

instance Thrift.ThriftStruct ShardState where
  buildStruct _proxy
    (ShardState __field__shard_idx __field__storage_state
       __field__flags __field__metadata_state __field__since_version
       __field__manual_override)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "shard_idx" (Thrift.getI16Type _proxy) 1 0
           (Thrift.genI16 _proxy __field__shard_idx)
           :
           Thrift.genField _proxy "storage_state" (Thrift.getI32Type _proxy) 2
             1
             ((Thrift.genI32 _proxy . Prelude.fromIntegral .
                 Thrift.fromThriftEnum)
                __field__storage_state)
             :
             Thrift.genField _proxy "flags" (Thrift.getI32Type _proxy) 3 2
               (Thrift.genI32 _proxy __field__flags)
               :
               Thrift.genField _proxy "metadata_state" (Thrift.getI32Type _proxy)
                 4
                 3
                 ((Thrift.genI32 _proxy . Prelude.fromIntegral .
                     Thrift.fromThriftEnum)
                    __field__metadata_state)
                 :
                 Thrift.genField _proxy "since_version" (Thrift.getI64Type _proxy) 6
                   4
                   (Thrift.genI64 _proxy __field__since_version)
                   :
                   Thrift.genFieldBool _proxy "manual_override" 7 6
                     __field__manual_override
                     : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__shard_idx <- ST.newSTRef Default.def
            __field__storage_state <- ST.newSTRef Default.def
            __field__flags <- ST.newSTRef Default.def
            __field__metadata_state <- ST.newSTRef Default.def
            __field__since_version <- ST.newSTRef Default.def
            __field__manual_override <- ST.newSTRef Prelude.False
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI16Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI16
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__shard_idx
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "StorageState")
                                                                        ST.writeSTRef
                                                                          __field__storage_state
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI32
                                                                                      _proxy)
                                                                        ST.writeSTRef __field__flags
                                                                          _val
                                                                 4 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseEnum
                                                                                      _proxy
                                                                                      "MetaDataStorageState")
                                                                        ST.writeSTRef
                                                                          __field__metadata_state
                                                                          _val
                                                                 6 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__since_version
                                                                          _val
                                                                 7 | _type ==
                                                                       Thrift.getBoolType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseBoolF
                                                                                      _proxy
                                                                                      _bool)
                                                                        ST.writeSTRef
                                                                          __field__manual_override
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__shard_idx <- ST.readSTRef
                                                                    __field__shard_idx
                                             !__val__storage_state <- ST.readSTRef
                                                                        __field__storage_state
                                             !__val__flags <- ST.readSTRef __field__flags
                                             !__val__metadata_state <- ST.readSTRef
                                                                         __field__metadata_state
                                             !__val__since_version <- ST.readSTRef
                                                                        __field__since_version
                                             !__val__manual_override <- ST.readSTRef
                                                                          __field__manual_override
                                             Prelude.pure
                                               (ShardState __val__shard_idx __val__storage_state
                                                  __val__flags
                                                  __val__metadata_state
                                                  __val__since_version
                                                  __val__manual_override)
              _idMap
                = HashMap.fromList
                    [("shard_idx", 1), ("storage_state", 2), ("flags", 3),
                     ("metadata_state", 4), ("since_version", 6),
                     ("manual_override", 7)]
            _parse 0)

instance DeepSeq.NFData ShardState where
  rnf
    (ShardState __field__shard_idx __field__storage_state
       __field__flags __field__metadata_state __field__since_version
       __field__manual_override)
    = DeepSeq.rnf __field__shard_idx `Prelude.seq`
        DeepSeq.rnf __field__storage_state `Prelude.seq`
          DeepSeq.rnf __field__flags `Prelude.seq`
            DeepSeq.rnf __field__metadata_state `Prelude.seq`
              DeepSeq.rnf __field__since_version `Prelude.seq`
                DeepSeq.rnf __field__manual_override `Prelude.seq` ()

instance Default.Default ShardState where
  def
    = ShardState Default.def Default.def Default.def Default.def
        Default.def
        Prelude.False

instance Hashable.Hashable ShardState where
  hashWithSalt __salt
    (ShardState _shard_idx _storage_state _flags _metadata_state
       _since_version _manual_override)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt
           (Hashable.hashWithSalt
              (Hashable.hashWithSalt
                 (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _shard_idx)
                    _storage_state)
                 _flags)
              _metadata_state)
           _since_version)
        _manual_override

type StorageNodeState = Map.Map Node_idx [ShardState]

data StorageMembership = StorageMembership{storageMembership_proto_version
                                           :: U32,
                                           storageMembership_membership_version :: U64,
                                           storageMembership_node_states :: StorageNodeState,
                                           storageMembership_metadata_shards :: [ShardID],
                                           storageMembership_bootstrapping :: Prelude.Bool}
                         deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON StorageMembership where
  toJSON
    (StorageMembership __field__proto_version
       __field__membership_version __field__node_states
       __field__metadata_shards __field__bootstrapping)
    = Aeson.object
        ("proto_version" .= __field__proto_version :
           "membership_version" .= __field__membership_version :
             "node_states" .= Map.mapKeys Thrift.keyToStr __field__node_states :
               "metadata_shards" .= __field__metadata_shards :
                 "bootstrapping" .= __field__bootstrapping : Prelude.mempty)

instance Thrift.ThriftStruct StorageMembership where
  buildStruct _proxy
    (StorageMembership __field__proto_version
       __field__membership_version __field__node_states
       __field__metadata_shards __field__bootstrapping)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "proto_version" (Thrift.getI32Type _proxy)
           1
           0
           (Thrift.genI32 _proxy __field__proto_version)
           :
           Thrift.genField _proxy "membership_version"
             (Thrift.getI64Type _proxy)
             2
             1
             (Thrift.genI64 _proxy __field__membership_version)
             :
             Thrift.genField _proxy "node_states" (Thrift.getMapType _proxy) 3 2
               ((Thrift.genMap _proxy (Thrift.getI16Type _proxy)
                   (Thrift.getListType _proxy)
                   Prelude.False
                   (Thrift.genI16 _proxy)
                   (Thrift.genList _proxy (Thrift.getStructType _proxy)
                      (Thrift.buildStruct _proxy))
                   . Map.toList)
                  __field__node_states)
               :
               Thrift.genField _proxy "metadata_shards"
                 (Thrift.getListType _proxy)
                 4
                 3
                 (Thrift.genList _proxy (Thrift.getStructType _proxy)
                    (Thrift.buildStruct _proxy)
                    __field__metadata_shards)
                 :
                 Thrift.genFieldBool _proxy "bootstrapping" 5 4
                   __field__bootstrapping
                   : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__proto_version <- ST.newSTRef Default.def
            __field__membership_version <- ST.newSTRef Default.def
            __field__node_states <- ST.newSTRef Default.def
            __field__metadata_shards <- ST.newSTRef Default.def
            __field__bootstrapping <- ST.newSTRef Prelude.False
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI32
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__proto_version
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__membership_version
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Map.fromList <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseI16
                                                                                           _proxy)
                                                                                        (Prelude.snd
                                                                                           <$>
                                                                                           Thrift.parseList
                                                                                             _proxy
                                                                                             (Thrift.parseStruct
                                                                                                _proxy))
                                                                                        Prelude.False)
                                                                        ST.writeSTRef
                                                                          __field__node_states
                                                                          _val
                                                                 4 | _type ==
                                                                       Thrift.getListType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Prelude.snd <$>
                                                                                      Thrift.parseList
                                                                                        _proxy
                                                                                        (Thrift.parseStruct
                                                                                           _proxy))
                                                                        ST.writeSTRef
                                                                          __field__metadata_shards
                                                                          _val
                                                                 5 | _type ==
                                                                       Thrift.getBoolType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseBoolF
                                                                                      _proxy
                                                                                      _bool)
                                                                        ST.writeSTRef
                                                                          __field__bootstrapping
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__proto_version <- ST.readSTRef
                                                                        __field__proto_version
                                             !__val__membership_version <- ST.readSTRef
                                                                             __field__membership_version
                                             !__val__node_states <- ST.readSTRef
                                                                      __field__node_states
                                             !__val__metadata_shards <- ST.readSTRef
                                                                          __field__metadata_shards
                                             !__val__bootstrapping <- ST.readSTRef
                                                                        __field__bootstrapping
                                             Prelude.pure
                                               (StorageMembership __val__proto_version
                                                  __val__membership_version
                                                  __val__node_states
                                                  __val__metadata_shards
                                                  __val__bootstrapping)
              _idMap
                = HashMap.fromList
                    [("proto_version", 1), ("membership_version", 2),
                     ("node_states", 3), ("metadata_shards", 4), ("bootstrapping", 5)]
            _parse 0)

instance DeepSeq.NFData StorageMembership where
  rnf
    (StorageMembership __field__proto_version
       __field__membership_version __field__node_states
       __field__metadata_shards __field__bootstrapping)
    = DeepSeq.rnf __field__proto_version `Prelude.seq`
        DeepSeq.rnf __field__membership_version `Prelude.seq`
          DeepSeq.rnf __field__node_states `Prelude.seq`
            DeepSeq.rnf __field__metadata_shards `Prelude.seq`
              DeepSeq.rnf __field__bootstrapping `Prelude.seq` ()

instance Default.Default StorageMembership where
  def
    = StorageMembership Default.def Default.def Default.def Default.def
        Prelude.False

instance Hashable.Hashable StorageMembership where
  hashWithSalt __salt
    (StorageMembership _proto_version _membership_version _node_states
       _metadata_shards _bootstrapping)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt
           (Hashable.hashWithSalt
              (Hashable.hashWithSalt
                 (Hashable.hashWithSalt __salt _proto_version)
                 _membership_version)
              ((Prelude.map (\ (_k, _v) -> (_k, _v)) . Map.toAscList)
                 _node_states))
           _metadata_shards)
        _bootstrapping

data SequencerNodeState = SequencerNodeState{sequencerNodeState_weight
                                             :: Prelude.Double,
                                             sequencerNodeState_sequencer_enabled :: Prelude.Bool,
                                             sequencerNodeState_manual_override :: Prelude.Bool}
                          deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON SequencerNodeState where
  toJSON
    (SequencerNodeState __field__weight __field__sequencer_enabled
       __field__manual_override)
    = Aeson.object
        ("weight" .= __field__weight :
           "sequencer_enabled" .= __field__sequencer_enabled :
             "manual_override" .= __field__manual_override : Prelude.mempty)

instance Thrift.ThriftStruct SequencerNodeState where
  buildStruct _proxy
    (SequencerNodeState __field__weight __field__sequencer_enabled
       __field__manual_override)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "weight" (Thrift.getDoubleType _proxy) 1 0
           (Thrift.genDouble _proxy __field__weight)
           :
           Thrift.genFieldBool _proxy "sequencer_enabled" 3 1
             __field__sequencer_enabled
             :
             Thrift.genFieldBool _proxy "manual_override" 4 3
               __field__manual_override
               : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__weight <- ST.newSTRef Default.def
            __field__sequencer_enabled <- ST.newSTRef Prelude.False
            __field__manual_override <- ST.newSTRef Prelude.False
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getDoubleType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseDouble
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__weight
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getBoolType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseBoolF
                                                                                      _proxy
                                                                                      _bool)
                                                                        ST.writeSTRef
                                                                          __field__sequencer_enabled
                                                                          _val
                                                                 4 | _type ==
                                                                       Thrift.getBoolType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseBoolF
                                                                                      _proxy
                                                                                      _bool)
                                                                        ST.writeSTRef
                                                                          __field__manual_override
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__weight <- ST.readSTRef
                                                                 __field__weight
                                             !__val__sequencer_enabled <- ST.readSTRef
                                                                            __field__sequencer_enabled
                                             !__val__manual_override <- ST.readSTRef
                                                                          __field__manual_override
                                             Prelude.pure
                                               (SequencerNodeState __val__weight
                                                  __val__sequencer_enabled
                                                  __val__manual_override)
              _idMap
                = HashMap.fromList
                    [("weight", 1), ("sequencer_enabled", 3), ("manual_override", 4)]
            _parse 0)

instance DeepSeq.NFData SequencerNodeState where
  rnf
    (SequencerNodeState __field__weight __field__sequencer_enabled
       __field__manual_override)
    = DeepSeq.rnf __field__weight `Prelude.seq`
        DeepSeq.rnf __field__sequencer_enabled `Prelude.seq`
          DeepSeq.rnf __field__manual_override `Prelude.seq` ()

instance Default.Default SequencerNodeState where
  def = SequencerNodeState Default.def Prelude.False Prelude.False

instance Hashable.Hashable SequencerNodeState where
  hashWithSalt __salt
    (SequencerNodeState _weight _sequencer_enabled _manual_override)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt (Hashable.hashWithSalt __salt _weight)
           _sequencer_enabled)
        _manual_override

data SequencerMembership = SequencerMembership{sequencerMembership_proto_version
                                               :: U32,
                                               sequencerMembership_membership_version :: U64,
                                               sequencerMembership_node_states ::
                                               Map.Map Node_idx SequencerNodeState,
                                               sequencerMembership_bootstrapping :: Prelude.Bool}
                           deriving (Prelude.Eq, Prelude.Show, Prelude.Ord)

instance Aeson.ToJSON SequencerMembership where
  toJSON
    (SequencerMembership __field__proto_version
       __field__membership_version __field__node_states
       __field__bootstrapping)
    = Aeson.object
        ("proto_version" .= __field__proto_version :
           "membership_version" .= __field__membership_version :
             "node_states" .= Map.mapKeys Thrift.keyToStr __field__node_states :
               "bootstrapping" .= __field__bootstrapping : Prelude.mempty)

instance Thrift.ThriftStruct SequencerMembership where
  buildStruct _proxy
    (SequencerMembership __field__proto_version
       __field__membership_version __field__node_states
       __field__bootstrapping)
    = Thrift.genStruct _proxy
        (Thrift.genField _proxy "proto_version" (Thrift.getI32Type _proxy)
           1
           0
           (Thrift.genI32 _proxy __field__proto_version)
           :
           Thrift.genField _proxy "membership_version"
             (Thrift.getI64Type _proxy)
             2
             1
             (Thrift.genI64 _proxy __field__membership_version)
             :
             Thrift.genField _proxy "node_states" (Thrift.getMapType _proxy) 3 2
               ((Thrift.genMap _proxy (Thrift.getI16Type _proxy)
                   (Thrift.getStructType _proxy)
                   Prelude.False
                   (Thrift.genI16 _proxy)
                   (Thrift.buildStruct _proxy)
                   . Map.toList)
                  __field__node_states)
               :
               Thrift.genFieldBool _proxy "bootstrapping" 4 3
                 __field__bootstrapping
                 : [])
  parseStruct _proxy
    = ST.runSTT
        (do Prelude.return ()
            __field__proto_version <- ST.newSTRef Default.def
            __field__membership_version <- ST.newSTRef Default.def
            __field__node_states <- ST.newSTRef Default.def
            __field__bootstrapping <- ST.newSTRef Prelude.False
            let
              _parse _lastId
                = do _fieldBegin <- Trans.lift
                                      (Thrift.parseFieldBegin _proxy _lastId _idMap)
                     case _fieldBegin of
                       Thrift.FieldBegin _type _id _bool -> do case _id of
                                                                 1 | _type ==
                                                                       Thrift.getI32Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI32
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__proto_version
                                                                          _val
                                                                 2 | _type ==
                                                                       Thrift.getI64Type _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseI64
                                                                                      _proxy)
                                                                        ST.writeSTRef
                                                                          __field__membership_version
                                                                          _val
                                                                 3 | _type ==
                                                                       Thrift.getMapType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Map.fromList <$>
                                                                                      Thrift.parseMap
                                                                                        _proxy
                                                                                        (Thrift.parseI16
                                                                                           _proxy)
                                                                                        (Thrift.parseStruct
                                                                                           _proxy)
                                                                                        Prelude.False)
                                                                        ST.writeSTRef
                                                                          __field__node_states
                                                                          _val
                                                                 4 | _type ==
                                                                       Thrift.getBoolType _proxy
                                                                     ->
                                                                     do !_val <- Trans.lift
                                                                                   (Thrift.parseBoolF
                                                                                      _proxy
                                                                                      _bool)
                                                                        ST.writeSTRef
                                                                          __field__bootstrapping
                                                                          _val
                                                                 _ -> Trans.lift
                                                                        (Thrift.parseSkip _proxy
                                                                           _type
                                                                           (Prelude.Just _bool))
                                                               _parse _id
                       Thrift.FieldEnd -> do !__val__proto_version <- ST.readSTRef
                                                                        __field__proto_version
                                             !__val__membership_version <- ST.readSTRef
                                                                             __field__membership_version
                                             !__val__node_states <- ST.readSTRef
                                                                      __field__node_states
                                             !__val__bootstrapping <- ST.readSTRef
                                                                        __field__bootstrapping
                                             Prelude.pure
                                               (SequencerMembership __val__proto_version
                                                  __val__membership_version
                                                  __val__node_states
                                                  __val__bootstrapping)
              _idMap
                = HashMap.fromList
                    [("proto_version", 1), ("membership_version", 2),
                     ("node_states", 3), ("bootstrapping", 4)]
            _parse 0)

instance DeepSeq.NFData SequencerMembership where
  rnf
    (SequencerMembership __field__proto_version
       __field__membership_version __field__node_states
       __field__bootstrapping)
    = DeepSeq.rnf __field__proto_version `Prelude.seq`
        DeepSeq.rnf __field__membership_version `Prelude.seq`
          DeepSeq.rnf __field__node_states `Prelude.seq`
            DeepSeq.rnf __field__bootstrapping `Prelude.seq` ()

instance Default.Default SequencerMembership where
  def
    = SequencerMembership Default.def Default.def Default.def
        Prelude.False

instance Hashable.Hashable SequencerMembership where
  hashWithSalt __salt
    (SequencerMembership _proto_version _membership_version
       _node_states _bootstrapping)
    = Hashable.hashWithSalt
        (Hashable.hashWithSalt
           (Hashable.hashWithSalt
              (Hashable.hashWithSalt __salt _proto_version)
              _membership_version)
           ((Prelude.map (\ (_k, _v) -> (_k, _v)) . Map.toAscList)
              _node_states))
        _bootstrapping
