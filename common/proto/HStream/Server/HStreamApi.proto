syntax = "proto3";

package hstream.server;

import "third_party/google/protobuf/struct.proto";
import "third_party/google/protobuf/timestamp.proto";
import "third_party/google/protobuf/empty.proto";

option java_package = "io.hstream";
option java_multiple_files = true;
option java_outer_classname = "HStreamProto";

service HStreamApi {
  // only for push query
  // e.g., create as select
  rpc ExecutePushQuery(CommandPushQuery) returns (stream Struct);

  // for execute any sql stmt except push query,
  // e.g., insert, create, show/list, select(without emit changes) ...
  rpc ExecuteQuery(CommandQuery) returns (CommandQueryResponse);

  rpc sendConsumerHeartbeat(ConsumerHeartbeatRequest) returns (ConsumerHeartbeatResponse) {}

  rpc Append(AppendRequest) returns (AppendResponse) {}

  rpc Subscribe(Subscription) returns (Subscription) {}

  rpc DeleteSubscription(DeleteSubscriptionRequest) returns (google.protobuf.Empty) {}

  rpc ListSubscriptions(google.protobuf.Empty) returns (ListSubscriptionsResponse) {}

  rpc Fetch(FetchRequest) returns (FetchResponse) {}

  rpc CommitOffset(CommittedOffset) returns (CommittedOffset) {}

  rpc CreateStream(Stream) returns (Stream) {}

  rpc DeleteStream(DeleteStreamRequest) returns (google.protobuf.Empty) {}

  rpc ListStreams(google.protobuf.Empty) returns (ListStreamsResponse) {}

  rpc TerminateQuery(TerminateQueryRequest) returns (TerminateQueryResponse) {}

  // query related apis
  rpc CreateQuery(CreateQueryRequest) returns (Query) {}
  rpc ListQueries(ListQueriesRequest) returns (ListQueriesResponse) {}
  rpc GetQuery(GetQueryRequest) returns (Query) {}
  rpc DeleteQuery(DeleteQueryRequest) returns (google.protobuf.Empty) {}
  rpc RestartQuery(RestartQueryRequest) returns (google.protobuf.Empty) {}
  rpc CancelQuery(CancelQueryRequest) returns (google.protobuf.Empty) {}

  // connector related apis
  rpc CreateSinkConnector(CreateSinkConnectorRequest) returns (Connector) {}
  rpc ListConnectors(ListConnectorsRequest) returns (ListConnectorsResponse) {}
  rpc GetConnector(GetConnectorRequest) returns (Connector) {}
  rpc DeleteConnector(DeleteConnectorRequest) returns (google.protobuf.Empty) {}
  rpc RestartConnector(RestartConnectorRequest) returns (google.protobuf.Empty) {}
  rpc CancelConnector(CancelConnectorRequest) returns (google.protobuf.Empty) {}

  // view related apis
  rpc CreateView(CreateViewRequest) returns (View) {}
  rpc ListViews(ListViewsRequest) returns (ListViewsResponse) {}
  rpc GetView(GetViewRequest) returns (View) {}
  rpc DeleteView(DeleteViewRequest) returns (google.protobuf.Empty) {}

  // overvew related apis
  // rpc GetOverview(GetOverviewRequest) returns (GetOverviewResponse) {}

  // node related apis
  // rpc FetchNode(FetchNodeRequest) returns (FetchNodeResponse) {}
  // rpc GetNode(GetNodeRequest) returns (GetNodeResponse) {}
}

message CommandStreamTask{
  string command_sql = 1;
}

message CommandStreamTaskResponse{
  string command_resp = 1;
}

message CommandConnect {
  string client_version = 1;
  int32 protocol_version = 2;
}

message CommandConnected {
  string server_version = 1;
  int32 protocol_version = 2;
}

message CommandPushQuery {
  string query_text = 1;
}

message CommandQuery {
  string stmt_text = 1;
}

message CommandQueryResponse{
  oneof kind {
    CommandSuccess success = 1;
    CommandQueryResultSet result_set = 2;
  }
}

message CommandQueryResultSet {
    repeated Struct result_set = 1;
}

message CommandSuccess {
}

// add more error
enum HStreamServerError {
  NoError = 0;
  UnknownError = 1;
  NotExistError = 3;
}

message ConsumerHeartbeatRequest {
  string subscriptionId = 1;
}

message ConsumerHeartbeatResponse {
  string subscriptionId = 1;
}

message AppendRequest {
  string streamName = 1;
  repeated bytes records = 2;
}
message AppendResponse {
  string streamName = 1;
  repeated RecordId recordIds = 2;
}

message Subscription {
  string subscriptionId = 1;
  string streamName = 2;
  SubscriptionOffset offset = 3;
}

message SubscriptionOffset {
  enum SpecialOffset {
    EARLIST = 0;
    LATEST = 1;
  }

  oneof offset {
    SpecialOffset specialOffset = 1;
    RecordId recordOffset = 2;
  }
}

message DeleteSubscriptionRequest {
  string subscriptionId = 1;
}

message FetchRequest {
  string subscriptionId = 1;
  uint64 timeout = 2;
  uint32 maxSize = 3;
}

message FetchResponse {
  repeated ReceivedRecord receivedRecords = 1;
}

message ReceivedRecord {
  RecordId recordId = 1;
  bytes record = 2;
}

message CommittedOffset {
  string subscriptionId = 1;
  string streamName = 2;
  RecordId offset = 3;
}

message StreamOffset {
  string streamName = 1;
  RecordId offset = 2;
}

message DeleteStreamRequest {
  string streamName = 1;
}

message ListStreamsResponse {
  repeated Stream streams = 1;
}

message ListSubscriptionsResponse {
  repeated Subscription subscription = 1;
}

message Stream {
  string streamName = 1;
  uint32 replicationFactor = 2;
}

message HStreamRecord {
  // Required.
  HStreamRecordHeader header = 1;

  // Optional.
  // Payload may be empty.
  bytes payload = 2;
}

message HStreamRecordHeader {
  // Required.
  // Flag for payload. 
  // - JSON: 0x01 << 24  
  // - RAW:  0x02 << 24
  uint32 flag = 1;

  // Optional. 
  // Attributes attached to this record.
  map<string, string> attributes = 2;

  // Required.
  // The time at which the message was published,
  // populated by the server.
  Timestamp publish_time = 3;

  // Optional. 
  // key for the message.  
  string key = 4;
}

message RecordId {
  // LSN of the total batch records
  uint64 batchId = 1;
  // Offset of each record in the batch
  uint32 batchIndex = 2;
}

message TerminateQueryRequest {
  string queryName = 1;
}

message TerminateQueryResponse {
  string queryName = 1;
}

// Query realated Request and Response
message CreateQueryRequest {
  string id = 1;
  string queryText = 4;
}

message ListQueriesRequest {}

message ListQueriesResponse {
  repeated Query queries = 1;
}

message GetQueryRequest {
  string id = 1;
}

message Query {
  string id = 1;
  int32 status = 2;
  int64 createdTime = 3;
  string queryText = 4;
}

message DeleteQueryRequest {
  string id = 1;
}

message DeleteQueryResponse {
  bool success = 1;
}

message RestartQueryRequest {
  string id = 1;
}

message RestartQueryResponse {
  bool success = 1;
}

message CancelQueryRequest {
  string id = 1;
}

message CancelQueryResponse {
  bool success = 1;
}

// Connector Related Request and Response
message CreateSinkConnectorRequest {
  string sql = 4;
}

message ListConnectorsRequest {}

message ListConnectorsResponse {
  repeated Connector connectors = 1;
}

message GetConnectorRequest {
  string id = 1;
}

message Connector {
  string id = 1;
  int32 status = 2;
  int64 createdTime = 3;
  string sql = 4;
}

message DeleteConnectorRequest {
  string id = 1;
}

message DeleteConnectorResponse {
  bool success = 1;
}

message RestartConnectorRequest {
  string id = 1;
}

message RestartConnectorResponse {
  bool success = 1;
}

message CancelConnectorRequest {
  string id = 1;
}

message CancelConnectorResponse {
  bool success = 1;
}

message TerminateConnectorRequest {
  string connectorId = 1;
}

message TerminateConnectorResponse {
  string connectorId = 1;
}

// View related Request and Response
message GetViewRequest {
  string viewId = 1;
}

message DeleteViewRequest {
  string viewId = 1;
}

message ListViewsRequest {}

message ListViewsResponse {
  repeated View views = 1;
}

message CreateViewRequest {
  string sql = 1;
}

message View {
  string viewId = 1;
  int32 status = 2;
  int64 createdTime = 3;
  string sql = 4;
  repeated string schema = 5;
}
