syntax = "proto3";

package hstream.server;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

option java_package = "io.hstream";
option java_multiple_files = true;
option java_outer_classname = "HStreamProto";

option go_package = "github.com/hstreamdb/hstream/hstream-http-server";

service HStreamApi {
  // ---------------------------------------------------------------------------
  // Stable APIs
  // ---------------------------------------------------------------------------

  rpc Echo(EchoRequest) returns (EchoResponse);

  // Stream APIs
  rpc CreateStream(Stream) returns (Stream) {}
  rpc DeleteStream(DeleteStreamRequest) returns (google.protobuf.Empty) {}
  rpc ListStreams(ListStreamsRequest) returns (ListStreamsResponse) {}
  rpc LookupStream(LookupStreamRequest) returns (LookupStreamResponse) {}
  rpc Append(AppendRequest) returns (AppendResponse) {}
  rpc Append0(AppendRequest) returns (AppendResponse) {}

  // Create a stream with a select query, so the data generated by this select query will be
  // inserted to the stream automatically. Apart from this, the stream are the same with any
  // other streams, you can still use all the stream rpc APIs above.
  rpc CreateQueryStream(CreateQueryStreamRequest) returns (CreateQueryStreamResponse) {}

  // Subscribe APIs
  rpc CreateSubscription(Subscription) returns (Subscription) {}
  rpc ListSubscriptions(ListSubscriptionsRequest) returns (ListSubscriptionsResponse) {}
  rpc CheckSubscriptionExist(CheckSubscriptionExistRequest) returns (CheckSubscriptionExistResponse) {}
  rpc DeleteSubscription(DeleteSubscriptionRequest) returns (google.protobuf.Empty) {}
  rpc LookupSubscription(LookupSubscriptionRequest) returns (LookupSubscriptionResponse) {}
  rpc StreamingFetch(stream StreamingFetchRequest) returns (stream StreamingFetchResponse) {}

  // Cluster APIs
  rpc DescribeCluster(google.protobuf.Empty) returns (DescribeClusterResponse) {}

  // ---------------------------------------------------------------------------
  // Developing APIs
  // ---------------------------------------------------------------------------

  // Stats
  rpc PerStreamTimeSeriesStats(PerStreamTimeSeriesStatsRequest)
    returns (PerStreamTimeSeriesStatsResponse);
  rpc PerStreamTimeSeriesStatsAll(PerStreamTimeSeriesStatsAllRequest)
    returns (PerStreamTimeSeriesStatsAllResponse);

  // Admin Command
  rpc SendAdminCommand(AdminCommandRequest) returns (AdminCommandResponse);

  // only for push query
  // e.g., select (with emit changes)
  rpc ExecutePushQuery(CommandPushQuery) returns (stream google.protobuf.Struct);

  // for execute any sql stmt except push query,
  // e.g., insert, create, show/list, select(without emit changes) ...
  rpc ExecuteQuery(CommandQuery) returns (CommandQueryResponse);

  // query related apis
  rpc CreateQuery(CreateQueryRequest) returns (Query) {}
  rpc ListQueries(ListQueriesRequest) returns (ListQueriesResponse) {}
  rpc GetQuery(GetQueryRequest) returns (Query) {}
  rpc TerminateQueries(TerminateQueriesRequest) returns (TerminateQueriesResponse) {}
  rpc DeleteQuery(DeleteQueryRequest) returns (google.protobuf.Empty) {}
  rpc RestartQuery(RestartQueryRequest) returns (google.protobuf.Empty) {}

  // connector related apis
  rpc CreateSinkConnector(CreateSinkConnectorRequest) returns (Connector) {}
  rpc ListConnectors(ListConnectorsRequest) returns (ListConnectorsResponse) {}
  rpc GetConnector(GetConnectorRequest) returns (Connector) {}
  rpc DeleteConnector(DeleteConnectorRequest) returns (google.protobuf.Empty) {}
  rpc RestartConnector(RestartConnectorRequest) returns (google.protobuf.Empty) {}
  rpc TerminateConnector(TerminateConnectorRequest) returns (google.protobuf.Empty) {}

  // view related apis
  rpc CreateView(CreateViewRequest) returns (View) {}
  rpc ListViews(ListViewsRequest) returns (ListViewsResponse) {}
  rpc GetView(GetViewRequest) returns (View) {}
  rpc DeleteView(DeleteViewRequest) returns (google.protobuf.Empty) {}

  // overvew related apis
  // rpc GetOverview(GetOverviewRequest) returns (GetOverviewResponse) {}

  // FIXME: (store)node related apis
  rpc ListNodes(ListNodesRequest) returns (ListNodesResponse) {}
  rpc GetNode(GetNodeRequest) returns (Node) {}
}

message EchoRequest {
  string msg = 1;
}

message EchoResponse {
  string msg = 1;
}

message CommandStreamTask {
  string command_sql = 1;
}

message CommandStreamTaskResponse{
  string command_resp = 1;
}

message CommandConnect {
  string client_version = 1;
  int32 protocol_version = 2;
}

message CommandConnected {
  string server_version = 1;
  int32 protocol_version = 2;
}

message CommandPushQuery {
  string query_text = 1;
}

message CommandQuery {
  string stmt_text = 1;
}

message CommandQueryResponse {
  repeated google.protobuf.Struct result_set = 1;
}

message AppendRequest {
  string streamName = 1;
  repeated HStreamRecord records = 2;
}

message AppendResponse {
  string streamName = 1;
  repeated RecordId recordIds = 2;
}

message Subscription {
  string subscriptionId = 1;
  string streamName = 2;
  int32 ackTimeoutSeconds = 3;
  int32 maxUnackedRecords = 4;
}

message DeleteSubscriptionRequest {
  string subscriptionId = 1;
  bool force = 2;
}

message CheckSubscriptionExistRequest {
  string subscriptionId = 1;
}

message CheckSubscriptionExistResponse {
  bool exists = 1;
}

message StreamingFetchRequest {
  string subscriptionId = 1;
  string consumerName = 2;
  repeated RecordId ackIds = 3;
}

message StreamingFetchResponse {
  repeated ReceivedRecord receivedRecords = 1;
}

message ReceivedRecord {
  RecordId recordId = 1;
  bytes record = 2;   // protobuf encoded HStreamRecord
}

message StreamOffset {
  string streamName = 1;
  RecordId offset = 2;
}

message DeleteStreamRequest {
  string streamName = 1;
  bool ignoreNonExist = 2;
  bool force = 3;
}

message ListStreamsResponse {
  repeated Stream streams = 1;
}

// TODOï¼šAdd options for filtering or max_size
message ListStreamsRequest {}

message ListSubscriptionsRequest {}

message ListSubscriptionsResponse {
  repeated Subscription subscription = 1;
}

message Stream {
  string streamName = 1;
  uint32 replicationFactor = 2;
  uint32 backlogDuration = 3;
}

message CreateQueryStreamRequest {
  Stream queryStream = 1;
  string queryStatements = 2;
}

message CreateQueryStreamResponse {
  Stream queryStream = 1;
  Query streamQuery = 2;
}

message HStreamRecordBatch {
  repeated bytes batch = 1;
}

message HStreamRecord {
  // Required.
  HStreamRecordHeader header = 1;

  // Optional.
  // Payload may be empty.
  bytes payload = 2;
}

message HStreamRecordHeader {
  // Required.
  // Flag for payload.
  enum Flag {
    JSON = 0;
    RAW  = 1;
  }
  Flag flag = 1;

  // Optional.
  // Attributes attached to this record.
  map<string, string> attributes = 2;

  // Required.
  // The time at which the message was published,
  // populated by the server.
  google.protobuf.Timestamp publish_time = 3;

  // Optional.
  // key for the message.
  string key = 4;
}

message RecordId {
  uint64 shardId = 1;
  // LSN of the total batch records
  uint64 batchId = 2;
  // Offset of each record in the batch
  uint32 batchIndex = 3;
}

message TerminateQueriesRequest {
  repeated string queryId = 1;
  bool all = 2;
}

message TerminateQueriesResponse {
  repeated string queryId = 1;
}

// Query realated Request and Response
message CreateQueryRequest {
  string id = 1;
  string queryText = 4;
}

message ListQueriesRequest {}

message ListQueriesResponse {
  repeated Query queries = 1;
}

message GetQueryRequest {
  string id = 1;
}

enum TaskStatusPB {
  TASK_CREATING = 0;
  TASK_CREATED = 1;
  TASK_RUNNING = 2;
  TASK_CREATION_ABORT = 3;
  TASK_CONNECTION_ABORT = 4;
  TASK_TERMINATED = 5;
}

message Query {
  string id = 1;
  TaskStatusPB status = 2;
  int64 createdTime = 3;
  string queryText = 4;
}

message DeleteQueryRequest {
  string id = 1;
}

message DeleteQueryResponse {
  bool success = 1;
}

message RestartQueryRequest {
  string id = 1;
}

message RestartQueryResponse {
  bool success = 1;
}

// Connector Related Request and Response
message CreateSinkConnectorRequest {
  string sql = 1;
}

message ListConnectorsRequest {}

message ListConnectorsResponse {
  repeated Connector connectors = 1;
}

message GetConnectorRequest {
  string id = 1;
}

message Connector {
  string id = 1;
  TaskStatusPB status = 2;
  int64 createdTime = 3;
  string sql = 4;
}

message DeleteConnectorRequest {
  string id = 1;
}

message DeleteConnectorResponse {
  bool success = 1;
}

message RestartConnectorRequest {
  string id = 1;
}

message RestartConnectorResponse {
  bool success = 1;
}

message TerminateConnectorRequest {
  string connectorId = 1;
}

// View related Request and Response
message GetViewRequest {
  string viewId = 1;
}

message DeleteViewRequest {
  string viewId = 1;
  bool ignoreNonExist = 2;
}

message ListViewsRequest {}

message ListViewsResponse {
  repeated View views = 1;
}

message CreateViewRequest {
  string sql = 1;
}

message View {
  string viewId = 1;
  TaskStatusPB status = 2;
  int64 createdTime = 3;
  string sql = 4;
  repeated string schema = 5;
}

// Nodes related Request and Response
message GetNodeRequest {
  int32 id = 1;
}

message ListNodesRequest {}

message ListNodesResponse {
  repeated Node nodes = 1;
}

message Node {
  int32 id = 1;
  repeated int32 roles = 2;
  string address = 3;
  string status = 4;
}

message StatsIntervalVals {
  repeated int32 intervals = 1;
}

message StatsDoubleVals {
  repeated double vals = 1;
}

message AdminCommandRequest {
  string command = 1;
}

message AdminCommandResponse {
  string result = 1;
}

message PerStreamTimeSeriesStatsRequest {
  string method = 1;
  string streamName = 2;
  StatsIntervalVals intervals = 3;
}

message PerStreamTimeSeriesStatsResponse {
  StatsDoubleVals stats = 1;
}

message PerStreamTimeSeriesStatsAllResponse {
  map<string, StatsDoubleVals> stats = 1;
}

message PerStreamTimeSeriesStatsAllRequest {
  string method = 1;
  StatsIntervalVals intervals = 2;
}


// ---------------------------------------------------------------------------
// Messages for Cluster
// ---------------------------------------------------------------------------

message DescribeClusterResponse {
  string protocolVersion = 1;
  string serverVersion = 2;
  repeated ServerNode serverNodes = 3;
}

message ServerNode {
  uint32 id = 1;
  string host = 2;
  uint32 port = 3;
}

enum NodeState {
  Starting = 0;
  Running = 1;
  Unavailable = 2;
  Dead = 3;
}

message ServerNodeStatus {
  ServerNode node = 1;
  NodeState state = 2;
}

message LookupStreamRequest {
  string streamName = 1;
  string orderingKey = 2;
}

message LookupStreamResponse {
  string streamName = 1;
  string orderingKey = 2;
  ServerNode serverNode = 3;
}

message LookupSubscriptionRequest {
  string subscriptionId = 1;
}

message LookupSubscriptionResponse {
  string subscriptionId = 1;
  ServerNode serverNode = 2;
}
