syntax = "proto3";

package hstream.gossip;

import "HStream/Server/HStreamInternal.proto";

service HStreamGossip {
  rpc SendBootstrapPing(Empty) returns (hstream.server.internal.ServerNode);
  rpc SendPing(Ping) returns (Ack);
  rpc SendPingReq(PingReq) returns (PingReqResp);
  rpc SendJoin(JoinReq) returns (JoinResp);
  rpc SendGossip(Gossip) returns (Empty);

  // For CLI use only
  rpc CliJoin(CliJoinReq) returns (JoinResp);
  rpc CliCluster(Empty) returns (Cluster);
  rpc CliUserEvent(UserEvent) returns (Empty);
  rpc CliGetSeenEvents(Empty) returns (SeenEvents);
}

message Empty {};

message ServerList { repeated hstream.server.internal.ServerNode nodes = 1;}

message Ping { repeated Message msg = 1; }

message Ack  { repeated Message msg = 1; }

message PingReq {
  hstream.server.internal.ServerNode target = 1;
  repeated Message msg = 2;
}

message PingReqResp {
  bool acked = 1;
  repeated Message msg = 2;
}

message Gossip { repeated Message msg = 1; }

message JoinReq { hstream.server.internal.ServerNode new = 1; }
message JoinResp {
  uint32 epoch = 1;
  repeated hstream.server.internal.ServerNode members = 2;
}

message CliJoinReq {
  bytes host = 1;
  uint32 port = 2;
}

message UserEvent {
  string name = 1;
  bytes payload = 2;
}

message Cluster { repeated hstream.server.internal.ServerNode members = 1; }
message SeenEvents { repeated UserEvent events = 1; }

message Message {
  oneof content {
    StateMessage state = 1;
    EventMessage event = 2;
  }
}

message StateMessage {
  oneof content {
    StateReport suspect = 1;
    StateReport alive   = 2;
    StateReport confirm = 3;
  }
}

message StateReport {
  uint32 incarnation = 1;
  hstream.server.internal.ServerNode reportee = 2;
  hstream.server.internal.ServerNode reporter = 3;
}

message EventMessage {
  string name = 1;
  uint32 lamportTime = 2;
  bytes  payload = 3;
}
