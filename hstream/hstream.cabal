cabal-version:      2.2
name:               hstream
version:            0.1.0.0
synopsis:           High performance stream processing platform for IoT data written in Haskell.
description:        Please see the README on Github at
                    <https://github.com/hstream-io/hstream#readme>
license:            BSD-3-Clause
license-file:       LICENSE
copyright:          Copyright (c) 2020 EMQ Technologies Co., Ltd.
author:             Feng Lee <feng@emqx.io>
maintainer:         lambda@emqx.io
tested-with:        GHC == 8.10.3, GHC == 8.8.4
category:           Database
homepage:           https://github.com/hstream-io/hstream
bug-reports:        https://github.com/hstream-io/hstream/issues
build-type:         Simple
extra-source-files: ChangeLog.md

source-repository head
  type:     git
  location: https://github.com/hstream-io/hstream

library
  exposed-modules:  HStream.SQL.Codegen
                    HStream.Server.Type
                    HStream.Server.Handler
                    HStream.Server.Api

  other-modules:    HStream.SQL.Codegen.Boilerplate
                    HStream.SQL.Codegen.Utils
  hs-source-dirs:   src
  build-depends:    base                 >= 4.11 && < 5
                  , aeson
                  , array
                  , binary
                  , bytestring           ^>= 0.10
                  , containers           ^>= 0.6
                  , extra
                  , hstream-processing
                  , hstream-sql
                  , hstream-store
                  , rio
                  , scientific
                  , string-random
                  , text                 ^>= 1.2
                  , time                 >= 1.9.1 && < 2
                  , unordered-containers
                  , async
                  , http-conduit
                  , pretty-simple
                  , random ^>= 1.2
                  , servant
                  , servant-server
                  , text
                  , warp
                  , Z-Data
                  , wai
  default-language: Haskell2010
  ghc-options:      -Wall -Wcompat -Widentities -Wincomplete-record-updates
                    -Wincomplete-uni-patterns -Wpartial-fields -Wredundant-constraints

executable sql-example-mock
  main-is:          Example.hs
  hs-source-dirs:   sql-example-mock
  build-depends:    base
                  , aeson
                  , hstream
                  , hstream-processing
                  , hstream-sql
                  , random
                  , rio
                  , scientific
                  , text
                  , unordered-containers
  default-language: Haskell2010
  ghc-options:      -Wall -Wcompat -Widentities -Wincomplete-record-updates
                    -Wincomplete-uni-patterns -Wpartial-fields -Wredundant-constraints

executable hstream-server
  main-is:          Main.hs
  hs-source-dirs:   server
  build-depends:    base
                  , hstream
                  , servant
                  , aeson
                  , optparse-applicative
                  , warp
                  , random
  default-language: Haskell2010
  ghc-options:      -Wall -Wcompat -Widentities -Wincomplete-record-updates -threaded
                    -Wincomplete-uni-patterns -Wpartial-fields -Wredundant-constraints

executable hstream-client
  main-is:          Main.hs
  hs-source-dirs:   client
  build-depends:    base
                  , aeson
                  , hstream
                  , hstream-sql
                  , haskeline
                  , http-conduit
                  , optparse-applicative
                  , pretty-simple
                  , text
                  , conduit
                  , bytestring
                  , random
  default-language: Haskell2010
  ghc-options:      -Wall -Wcompat -Widentities -Wincomplete-record-updates -threaded
                    -Wincomplete-uni-patterns -Wpartial-fields -Wredundant-constraints

executable sql-example-logdevice
  main-is:          Example.hs
  hs-source-dirs:   sql-example-logdevice
  build-depends:    base
                  , aeson
                  , hstream
                  , hstream-processing
                  , hstream-sql
                  , hstream-store
                  , random
                  , rio
                  , scientific
                  , text
                  , unordered-containers
                  , Z-Data
  default-language: Haskell2010
  ghc-options:      -Wall -Wcompat -Widentities -Wincomplete-record-updates
                    -Wincomplete-uni-patterns -Wpartial-fields -Wredundant-constraints
                    -threaded

test-suite hstream-test
  type:               exitcode-stdio-1.0
  main-is:            Spec.hs
  other-modules:      HStream.RunSQLSpec
  hs-source-dirs:     test
  build-depends:      base               >= 4.11 && < 5
                    , aeson
                    , hspec
                    , hstream
                    , hstream-processing
                    , hstream-store
                    , random             ^>= 1.2
                    , rio
                    , scientific
                    , Z-Data
  default-language:   Haskell2010
  build-tool-depends: hspec-discover:hspec-discover == 2.*
  ghc-options:        -Wall -Wcompat -Widentities -Wincomplete-record-updates
                      -Wincomplete-uni-patterns -Wpartial-fields -Wredundant-constraints
                      -threaded -rtsopts -with-rtsopts=-N
