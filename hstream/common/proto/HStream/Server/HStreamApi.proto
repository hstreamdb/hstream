syntax = "proto3";

package hstream.server;

import "third_party/google/protobuf/struct.proto";
import "third_party/google/protobuf/timestamp.proto";

service HStreamApi {
  // only for push query
  // e.g., create as select
  rpc ExecutePushQuery(CommandPushQuery) returns (stream Struct);

  // for execute any sql stmt except push query,
  // e.g., insert, create, show/list, select(without emit changes) ...
  rpc ExecuteQuery(CommandQuery) returns (CommandQueryResponse);

  rpc Append(AppendRequest) returns (AppendResponse) {}

  rpc Subscribe(Subscription) returns (Subscription) {}

  rpc Fetch(FetchRequest) returns (FetchResponse) {}

  rpc CommitOffset(CommittedOffset) returns (CommittedOffset) {}

  rpc CreateStreams(CreateStreamsRequest) returns (CreateStreamsResponse) {}

  rpc RemoveStreams(RemoveStreamsRequest) returns (RemoveStreamsResponse) {}

  rpc TerminateQuery(TerminateQueryRequest) returns (TerminateQueryResponse) {}

  // query related apis
  rpc CreateQuery(CreateQueryRequest) returns (CreateQueryResponse) {}
  rpc FetchQuery(FetchQueryRequest) returns (FetchQueryResponse) {}
  rpc GetQuery(GetQueryRequest) returns (GetQueryResponse) {}
  rpc DeleteQuery(DeleteQueryRequest) returns (DeleteQueryResponse) {}
  rpc RestartQuery(RestartQueryRequest) returns (RestartQueryResponse) {}
  rpc CancelQuery(CancelQueryRequest) returns (CancelQueryResponse) {}

  // connector related apis
  // rpc CreateConnector(CreateConnectorRequest) returns (CreateConnectorResponse) {}
  // rpc FetchConnector(FetchConnectorRequest) returns (FetchConnectorResponse) {}
  // rpc GetConnector(GetConnectorRequest) returns (GetConnectorResponse) {}
  // rpc DeleteConnector(DeleteConnectorRequest) returns (DeleteConnectorResponse) {}
  // rpc RestartConnector(RestartConnectorRequest) returns (RestartConnectorResponse) {}
  // rpc CancelConnector(CancelConnectorRequest) returns (CancelConnectorResponse) {}

  // stream related apis
  // rpc CreateStream(CreateStreamRequest) returns (CreateStreamResponse) {}
  // rpc FetchStream(FetchStreamRequest) returns (FetchStreamResponse) {}
  // rpc GetStream(GetStreamRequest) returns (GetStreamResponse) {}
  // rpc DeleteStream(DeleteStreamRequest) returns (DeleteStreamResponse) {}

  // view related apis
  // rpc CreateView(CreateViewRequest) returns (CreateViewResponse) {}
  // rpc FetchView(FetchViewRequest) returns (FetchViewResponse) {}
  // rpc GetView(GetViewRequest) returns (GetViewResponse) {}
  // rpc DeleteView(DeleteViewRequest) returns (DeleteViewResponse) {}

  // overvew related apis
  // rpc GetOverview(GetOverviewRequest) returns (GetOverviewResponse) {}

  // node related apis
  // rpc FetchNode(FetchNodeRequest) returns (FetchNodeResponse) {}
  // rpc GetNode(GetNodeRequest) returns (GetNodeResponse) {}
}

message CommandStreamTask{
  string command_sql = 1;
}

message CommandStreamTaskResponse{
  string command_resp = 1;
}

message CommandConnect {
  string client_version = 1;
  int32 protocol_version = 2;
}

message CommandConnected {
  string server_version = 1;
  int32 protocol_version = 2;
}

message CommandPushQuery {
  string query_text = 1;
}

message CommandQuery {
  string stmt_text = 1;
}

message CommandQueryResponse{
  oneof kind {
    CommandSuccess success = 1;
    CommandQueryResultSet result_set = 2;
  }
}

message CommandQueryResultSet {
    repeated Struct result_set = 1;
}

message CommandSuccess {
}

// add more error
enum HStreamServerError {
  NoError = 0;
  UnknownError = 1;
  NotExistError = 3;
}

message AppendRequest {
  string streamName = 1;
  repeated bytes records = 2;
}
message AppendResponse {
  string streamName = 1;
  repeated RecordId recordIds = 2;
}

message Subscription {
  string subscriptionId = 1;
  string streamName = 2;
  SubscriptionOffset offset = 3;
}

message SubscriptionOffset {
  enum SpecialOffset {
    EARLIST = 0;
    LATEST = 1;
  }

  oneof offset {
    SpecialOffset specialOffset = 1;
    RecordId recordOffset = 2;
  }
}

message FetchRequest {
  string subscriptionId = 1;
  uint64 timeout = 2;
  uint32 maxSize = 3;
}

message FetchResponse {
  repeated ReceivedRecord receivedRecords = 1;
}

message ReceivedRecord {
  RecordId recordId = 1;
  bytes record = 2;
}

message CommittedOffset {
  string subscriptionId = 1;
  string streamName = 2;
  RecordId offset = 3;
}

message StreamOffset {
  string streamName = 1;
  RecordId offset = 2;
}

message CreateStreamsRequest {
  repeated CreateStreamRequest requests = 1;
}

message CreateStreamRequest {
  string streamName = 1;
  uint32 replicationFactor = 2;
}

message CreateStreamsResponse {
  repeated CreateStreamResponse responses = 1;
}

message CreateStreamResponse {
  string streamName = 1;
  HStreamServerError error = 2;
}

message RemoveStreamsRequest {
  repeated RemoveStreamRequest requests = 1;
}

message RemoveStreamRequest {
  string streamName = 1;
}

message RemoveStreamsResponse {
  repeated RemoveStreamResponse responses = 1;
}

message RemoveStreamResponse {
  string streamName = 1;
  HStreamServerError error = 2;
}

message HStreamRecord {
  // Required.
  HStreamRecordHeader header = 1;

  // Optional.
  // Payload may be empty.
  bytes payload = 2;
}

message HStreamRecordHeader {
  // Required.
  // Flag for payload. 
  // - JSON: 0x01 << 24  
  // - RAW:  0x02 << 24
  uint32 flag = 1;

  // Optional. 
  // Attributes attached to this record.
  map<string, string> attributes = 2;

  // Required.
  // The time at which the message was published,
  // populated by the server.
  Timestamp publish_time = 3;

  // Optional. 
  // key for the message.  
  string key = 4;
}

message TerminateQueryRequest {
  string queryName = 1;
}

message TerminateQueryResponse {
  string queryName = 1;
}

message RecordId {
  // LSN of the total batch records
  uint64 batchId = 1;
  // Offset of each record in the batch
  uint32 batchIndex = 2;
}

message CreateQueryRequest {
  string id = 1;
  string queryText = 4;
}

message CreateQueryResponse {
  bool success = 1;
}

message FetchQueryRequest {}

message FetchQueryResponse {
  repeated GetQueryResponse responses = 1;
}

message GetQueryRequest {
  string id = 1;
}

message GetQueryResponse {
  string id = 1;
  int32 status = 2;
  int64 createdTime = 3;
  string queryText = 4;
  HStreamServerError error = 5;
}

message DeleteQueryRequest {
  string id = 1;
}

message DeleteQueryResponse {
  bool success = 1;
}

message RestartQueryRequest {
  string id = 1;
}

message RestartQueryResponse {
  bool success = 1;
}

message CancelQueryRequest {
  string id = 1;
}

message CancelQueryResponse {
  bool success = 1;
}
