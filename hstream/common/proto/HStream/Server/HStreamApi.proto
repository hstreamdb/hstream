syntax = "proto3";

package hstream.server;

import "third_party/google/protobuf/struct.proto";
import "third_party/google/protobuf/timestamp.proto";

service HStreamApi {
  // only for push query
  // e.g., create as select
  rpc ExecutePushQuery(CommandPushQuery) returns (stream Struct);

  // for execute any sql stmt except push query,
  // e.g., insert, create, show/list, select(without emit changes) ...
  rpc ExecuteQuery(CommandQuery) returns (CommandQueryResponse);

  rpc Append(AppendRequest) returns (AppendResponse) {}

  rpc Subscribe(SubscribeRequest) returns (SubscribeResponse) {}

  rpc Fetch(FetchRequest) returns (FetchResponse) {}

  rpc CommitOffset(CommitOffsetRequest) returns (CommitOffsetResponse) {}

  rpc CreateStreams(CreateStreamsRequest) returns (CreateStreamsResponse) {}

  rpc RemoveStreams(RemoveStreamsRequest) returns (RemoveStreamsResponse) {}
}

message CommandStreamTask{
  string command_sql = 1;
}

message CommandStreamTaskResponse{
  string command_resp = 1;
}

message CommandConnect {
  string client_version = 1;
  int32 protocol_version = 2;
}

message CommandConnected {
  string server_version = 1;
  int32 protocol_version = 2;
}

message CommandPushQuery {
  string query_text = 1;
}

message CommandQuery {
  string stmt_text = 1;
}

message CommandQueryResponse{
  oneof kind {
    CommandSuccess success = 1;
    CommandQueryResultSet result_set = 2;
  }
}

message CommandQueryResultSet {
    repeated Struct result_set = 1;
}

message CommandSuccess {
}

// add more error
enum HStreamServerError {
  NoError = 0;
  UnknownError = 1;
}

message AppendRequest {
  string streamName = 1;
  repeated bytes records = 2;
}
message AppendResponse {
  string streamName = 1;
  repeated RecordId recordIds = 2;
}
message RecordId {
  uint64 batchId = 1;
  uint32 batchIndex = 2;
}

message SubscribeRequest {
  string subscriptionId = 1;
  repeated StreamSubscription subscriptions = 2;
}

message SubscribeResponse {
  string subscriptionId = 1;
  HStreamServerError error = 2;
}

message StreamSubscription {
  string streamName = 1;
  uint64 startOffset = 2;
}

message FetchRequest {
  string subscriptionId = 1;
}

message FetchResponse {
  repeated FetchedRecord records = 1;
}

message FetchedRecord {
  string streamName = 1;
  repeated bytes records = 2;
}

message CommitOffsetRequest {
  string subscriptionId = 1;
  repeated StreamOffset streamOffsets = 2;
}

message StreamOffset {
  string streamName = 1;
  uint64 offset = 2;
}

message CommitOffsetResponse {
  repeated StreamCommitOffsetResponse responses = 1;
}

message StreamCommitOffsetResponse {
  string streamName = 1;
  HStreamServerError error = 2;
}

message CreateStreamsRequest {
  repeated CreateStreamRequest requests = 1;
}

message CreateStreamRequest {
  string streamName = 1;
  uint32 replicationFactor = 2;
}

message CreateStreamsResponse {
  repeated CreateStreamResponse responses = 1;
}

message CreateStreamResponse {
  string streamName = 1;
  HStreamServerError error = 2;
}

message RemoveStreamsRequest {
  repeated RemoveStreamRequest requests = 1;
}

message RemoveStreamRequest {
  string streamName = 1;
}

message RemoveStreamsResponse {
  repeated RemoveStreamResponse responses = 1;
}

message RemoveStreamResponse {
  string streamName = 1;
  HStreamServerError error = 2;
}

message HStreamRecord {
  // Required.
  HStreamRecordHeader header = 1;

  // Optional.
  // Payload may be empty.
  bytes payload = 2;
}

message HStreamRecordHeader {
  // Required.
  // Flag for payload. 
  // - JSON: 0x01 << 24  
  // - RAW:  0x02 << 24
  uint32 flag = 1;

  // Optional. 
  // Attributes attached to this record.
  map<string, string> attributes = 2;

  // Required.
  // The time at which the message was published,
  // populated by the server.
  Timestamp publish_time = 3;

  // Optional. 
  // key for the message.  
  string key = 4;
}
